<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git-guigu-note]]></title>
    <url>%2Fgit%2Fgit-guigu-note%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在衰老到来之前，做一件值得做的事情。做这件事不是为了别的，而是为了证明自己是好样的。-《似水流年》 复制 选中后 Ctrl+ins 即键盘右上角的insert键粘贴 相应的位置 Shift+ins查看git 配置信息cat ~/.gitconfig状态查看 git status 查看工作区、暂存区状态文件内容查看 cat haha.txt添加操作 git add [file_name]git commit -m ‘说明信息’ [file_name]创建文件 touch haha.txt 或 vim good.txt 字母ll 列出本地库所有文件和文件总数，创建日期 时间 创建人 文件名 git add haha.txt 后 若想返回add前的状态 根据提示 git rm –cached haha.txt 即可返回，此删除只是从暂存区里面删除，工作区的文件还在git commit haha.txt 这里没带-m ‘说明信息’ 回车后会进入vim 编辑器 可以编写大量的说明信息 首先 按a键 进入插入模式，之后就可以进行编辑了。 编辑完了就可以按Esc键退出插入模式，然后输出:wq即可退出vim编辑器，回到git bash界面。 查看提交记录 git log 打印的记录风格： 分散 有作者 邮箱 日期提示，显示内容详细，内容多了，多屏显示控制方式：桥空格为向下翻页，b键为向上翻页，q 键为退出查看 git log –oneline 打印效果为一行 git reflog 打印的记录风格： 紧凑 在一行显示并有提示版本回退数字提示 版本前进后退 基于索引值操作 任意版本穿梭 推荐方法 git reset –hard alfe9cd 这里alfe9cd为某一版本的提交id值即索引值 基于符号 ^ 只能后退 返回上一个版本 git reset –hard HEAD^ 版本倒退三个 git reset –hard HEAD^^^ 基于符号 ~ 只能后退 版本倒退三个 git reset –hard HEAD~3 reset 命令的三个参数对比 –soft 仅仅在本地库移动HEAD指针 –mixed 在本地库移动HEAD指针,重置暂存区 –hard 在本地库移动HEAD指针,重置暂存区,重置工作区，三个区位置保持一致 删除文件 rm aaa.txt git status 显示为 红色 deleted: aaa.txt 提示要add该文件 git add aaa.txt git status 显示为 绿色 表示已添加到暂存区 git commit -m ‘deleted aaa.txt’ 将这次删除操作提交到本地库 删除文件并恢复 前提：删除前 文件的状态提交到了本地库 操作： git reset –hard [指针位置] 删除操作已经提交到本地库：指针位置指向包含删除文件的历史纪录 删除操作尚未提交到本地库：指针位置使用HEAD 比较文件差异 git diff [文件名] 将工作区的文件和暂存区进行比较 git diff [本地库中历史版本] [文件名] 将工作区的文件和本地历史记录比较 git diff 不带文件名 比较多个文件 &emsp;&emsp;未完待续……]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git-note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-tour]]></title>
    <url>%2Fvue%2Fvue-tour%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;I love three things in this world. Sun, Moon, and You. Sun for morning, Moon for night, and You forever.浮世三千，吾爱有三，日、月与卿。日为朝，月为暮，卿为朝朝暮暮。 A Vue.js project-去哪儿旅行，vue学习练手小项目。 Build Setup1234567891011# install dependenciesnpm install# serve with hot reload at localhost:8080npm run dev# build for production with minificationnpm run build# build for production and view the bundle analyzer reportnpm run build --report css 省略号…123overflow hiddenwhite-space nowraptext-overflow ellipsis 项目初始化 如果这个项目是从github 上克隆来的 初始化时直接 vue init webpack 注意这里不用再加初始化的项目名称 修改 标签 路劲优化，简化 ,在webpack 中配置 build/webpack.base.conf.js 的alias 下面是vue-cli 配置好的 1234alias: &#123; &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;, &apos;@&apos;: resolve(&apos;src&apos;),&#125; import HelloWorld from ‘@/components/HelloWorld’ 其中的 @ 表示src目录 在css 样式中 import ‘~@/assets/styles/varibles.styl’ 其中的 ~@ 表示src目录 移动端快速点击 npm i fastclick –save 解决300毫秒延迟 在main.js 中 import fastClick from ‘fastclick’ fastClick.attach(document.body) css代码编辑工具 stylus npm i stylus –save npm i stylus-loader –save 阿里图标 进入网站后 /图标管理/我的项目/新建项目1px 使用的是硅谷外卖 stylus/mixins.styl 使用 @import ‘~@/assets/styles/border.styl’ 某一个样式下 bottom-border-1px(#ccc) 自己传一个色值 github 创建新分支index-swiper本地 git pull 将分支拉到本地切换到这个分支 git checkout index-swiper轮播图 npm i vue-awesome-swiper@2.6.7 –save 官网具体配置 轮播图 index-swiper 开发完成后 git add . git commit -m ‘swiper finished’ git push git checkout master git merge index-swiper 将index-swiper 分支的文件 合并到master主分支 git push 在浏览器中自动打开 config/index.js 修改里面的配置，把autoOpenBrowser:false改为autoOpenBrowser:true即可 布局 高度 height 0padding-bottom 33.9% 用padding-bottom 的值撑开高度 即高宽比 Git出现|MERGING解决 使用git上传或者下拉中出现MERGING，这是合并冲突了 输入命令可以正常跳转：git reset –hard head ajax npm install axios –save config/index.js中配置 12345678proxyTable: &#123; &apos;/api&apos;: &#123; target: &apos;http://localhost:8081&apos;, pathRewrite: &#123; &apos;^/api&apos;: &apos;/static/mock&apos; &#125; &#125; &#125;, vue 文件中 12axios.get(&apos;/api/index.json&apos;) .then(this.getHomeInfoSucc) 解决 swiper 初次显示时为最后一张图的情况 是因为刚开始时是一个空数组 给swiper 加 v-if = “list.length” 即list 传过来有值的时候在加载。 页面滚动 npm install better-scroll –save ref 属性使用注意 如果 ref 的值 是 v-for 循环产生的 使用时 this.$refs[‘A’][0] 即第零相 才是真正的dom 使用函数截流 提示网站性能 在 touchmove 事件中 使用 settimeout 即将一些触发特别快又频繁的代码放到 定时器里面 减少执行次数 vuex 状态管理 npm install vuex –save 安装 src/新建store/index.js 12345678910import Vue from &apos;vue&apos;import Vuex from &apos;vuex&apos;Vue.use(Vuex)export default new Vuex.Store(&#123; state: &#123; city: &apos;北京&apos; &#125;&#125;) main.js 12345678910import store from &apos;./store&apos;new Vue(&#123; el: &apos;#app&apos;, router, store, 添加选项store components: &#123; App &#125;, template: &apos;&lt;App/&gt;&apos;&#125;) 城市选择后 直接跳转到 首页 显示相应的城市 在事件处理 方法里面 12this.$store.dispatch(&apos;changeCity&apos;, city)this.$router.push(&apos;/&apos;) localStorage 的使用 需要在外层加 tyr catch 以防 某谢用户 避了本地存储功能 或浏览器使用隐身模式 12345678910111213141516171819202122232425let defaultCity = &apos;常州&apos;try &#123; if (localStorage.city) &#123; defaultCity = localStorage.city &#125;&#125;catch (e) &#123;&#125;export default new Vuex.Store(&#123; state: &#123; city: defaultCity || &apos;常州&apos; &#125;, actions: &#123; changeCity (ctx,city) &#123; ctx.commit(&apos;changeCity&apos;, city) &#125; &#125;, mutations: &#123; changeCity (state, city) &#123; state.city = city try &#123; localStorage.city = city &#125;catch (e) &#123;&#125; &#125; &#125;&#125;) mapState 的使用 定义import { mapState } from &#39;vuex&#39; 12345678910computed: &#123; ...mapState([&apos;city&apos;]) &#125; 也可以是computed: &#123; ...mapState(&#123; currentCity: &apos;city&apos; &#125;) &#125;, 使用 或 keep-alike 的使用123&lt;keep-alive&gt; &lt;router-view/&gt;&lt;/keep-alive&gt; 相应的组件 数据 加载一次后会保存到内存中 下次调用 直接取 提升性能 vue 实例 选项中多了一个生命 周期钩子函数 activated, 其在页面重新显示，有变动的时候触发 12345activated () &#123; if (this.lastCity !== this.city) &#123; this.getHomeInfo() &#125; &#125; 及时解除全局事件 让其只在当前组件中触发 deactivated 在页面隐藏，页面被替换为新的页面 时触发 123456activated () &#123; window.addEventListener(&apos;scroll&apos;, this.handleScroll) &#125;, deactivated () &#123; window.removeEventListener(&apos;scroll&apos;,this.handleScroll) &#125; 递归组件的使用 在自己组件内部 通过name 选项 的名字 作为递归组件的标签名使用&lt;detail-list :list=&quot;item.children&quot;&gt;&lt;/detail-list&gt; 缓存相关 App.vue 中 Detail 组件不缓存 123&lt;keep-alive exclude=&quot;Detail&quot;&gt; &lt;router-view/&gt;&lt;/keep-alive&gt; 解决不同页面位置的相互影响问题 router/index.js 中加入scrollBehavior选项 123456789101112export default new Router(&#123; routes: [ &#123; path: &apos;/&apos;, name: &apos;Home&apos;, component: Home &#125; ], scrollBehavior (to, from, savedPosition) &#123; return &#123;x: 0, y: 0&#125; &#125;&#125;) 解决某些手机浏览器 不支持 promise 的情况 npm install babel-polyfill –save main.js 中 import &#39;babel-polyfill&#39; 项目优化 按需加载js 组件 此方法 只在打包生成的app.js文件特别大（1M左右）的时候使用，小的话，不宜，因为这样会增加http 请求 router/index.js 将import Home from &#39;@/pages/home/Home.vue&#39;引入组件的方式去掉，配置路由为 12345&#123; path: &apos;/&apos;, name: &apos;Home&apos;, component: ( ) =&gt; import(&apos;@/pages/home/Home.vue&apos;) &#125;, 项目上线 npm run build 生成dist 文件夹 将dist 给后端运行 &emsp;&emsp; 项目正在开发完毕。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http]]></title>
    <url>%2Fhttp%2Fhttp%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; GET POST 的区别 前提:web浏览器环境下的RFC规范GET 用来获取信息，POST用来发送信息 可见性 安全性 数据大小 编码类型 能否收藏为书签，GET可以 刷新，后退按钮，GET无影响，POST重新提交 能否保留到浏览器历史，GET保留 &emsp;&emsp;]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[net-model]]></title>
    <url>%2Fnet%2Fnet-model%2F</url>
    <content type="text"><![CDATA[应用层: 程序，软件，应用层协议，http协议，DNS协议(域名解析)，FTP协议(文件传输协议)，SMTP(邮件传输协议)传输层: 对数据传输的建立和管理，传输层协议，UDP协议(有丢包的可能)，TCP(保证数据的正确性，顺序性)网络层: 好比交通网络，IP协议(IP加端口号来确定一个程序的位置)数据链路层: 两个子层，一个叫逻辑链路控制子层，另一个叫媒体访问控制子层(MAC地址)物理层: 坐公交，扫码骑车。除了五层网络模型之外还有七层网络模型，那么七层网络模型是什么呢？就是将应用层一分为三，分别为：应用层，表示层和会话层。新出来的表示层和会话层没有相应的协议。一般表示层做的是数据格式化，或者加密等操作。]]></content>
      <categories>
        <category>net</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[xss]]></title>
    <url>%2Fsafe%2Fxss%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;让一个人变强大的最好方式是拥有一个想去保护的人。 XSS攻击究竟是如何一步一步的获取了别人的隐私呢？下面我们就来一步一步的来进行解析。1. 攻击者，上传一片文章或者博客，这边文章中带有一段JS代码，这段代码内容很简单，读取本地Cookie，发送给某个url。2. XX微博的服务器没有对用户上传的内容进行审查，就将内容存储起来。3. 当正常用户访问XX微博的时候，服务器将有问题的文章推送给了这个正常用户。（因为服务器并没有检查哪篇文章有问题，所以它会认为这是一篇正常的文章，以正常的方式推送给用户。）4. 当正常的用户点开这篇文章的时候，攻击者编写的脚本就会在正常的用户的电脑上执行。（因为攻击者的脚本就是在文章的内容中加入一段script代码，浏览器会将script标签中的内容当作js代码来看待，然后执行这段代码）5. 这段带有攻击性的代码可以读取用户本地的cookie内容，并将内容发送给攻击者事先准备好的url。（因为正常用户在本地打开，所以不存在跨域的问题）6. 攻击者收到了发送过来的cookie之后，就可以将cookie内容写入自己的浏览器里，然后就能登录这个正常用户的XX微博了。（因为现在很多网站都做了免登录功能，这个功能主要是依赖于种在浏览器里的cookie，这个cookie中会带有用户的部分信息，当用户在每次进入网站的时候，由于这些cookie的存在，就可以免登录了。我们这个例子中，XSS攻击就是获取到了用户的Cookie，从而在我们的本地来将这份cookie写入到我们的浏览器里，就能登录这个正常用户的帐号了~）我们会发现XSS攻击最大的问题在于，服务器端在用户上传文章内容的时候，没有进行内容审查。其实，我们只要将一些危险的符号进行HTML编码就可以了，比如将‘&lt;’替换为”&lt;”，将‘&gt;’替换为”&gt;”，这样攻击者就无法通过script标签的方式来进行攻击了~]]></content>
      <categories>
        <category>safe</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[shanjuan]]></title>
    <url>%2Ffriends%2Fshanjuan%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;juan，我的好朋友，好久不见，今偶然间，美好的回忆又浮现眼前，于是赶紧记下那些美好。 &emsp;&emsp;拿起雪糕想起了你。&emsp;&emsp;雪糕这玩意和辣条一样是我小时候的最爱，只是随着年岁渐长，慢慢留在记忆里了。昨晚室友叫我一起去超市，逛了一圈不知买点啥，看到有人买雪糕，心想，天气热了就买个尝尝吧。打开柜子，拿起雪糕，恍惚间，温暖的记忆又浮现在眼前。&emsp;&emsp;juan，我的高中同学，朋友，那时经常作我的同桌，人美心善，跟同学关系都挺好。当然对我也很好。常给我糖果啊各种小吃的，我用的笔啊书和本子啊经常从juan那直接拿。&emsp;&emsp;我对juan的第一印象：juan是一个可爱的小公主，而且很高洁。机缘巧合之下，我有幸认识了juan，而且常常作同桌。这让我们之间的距离又近了一点。juan是我去到十班最早认识的同学之一。&emsp;&emsp;时间久了，发生过的好多事情我就不记得了。所以我此时此刻在努力的将往事回忆，我生怕等我老了的时候，年轻时的这些美好时光要是再也回想不起来了，那样想想多遗憾啊。&emsp;&emsp;juan对我一直很好，就像对其他人一样。我们除了讨论学习，还聊小时候，聊未来。关于未来，其实都是我在表达对未来的迷惑，而juan一直在开导我。juan说我们可以永远做朋友。&emsp;&emsp;一个雪糕，那是高三时的一天中午你送我的，当时教室里是有其同学的，但是你只送给了我。在高三那个本就燥热的季节，让我清凉了一整个夏天。&emsp;&emsp;如今再拿起雪糕，眼前浮现出都是你对我的好。感谢那时的遇见，让我能有这么美好的回忆。juan，也愿你过得好，有个好对象。要是余生能再见，我想你还是那么的漂亮，那么温柔与大气。&emsp;&emsp;朋友的友谊不是三言两语就道的尽的，但都是埋藏在我的心底里的。 &emsp;&emsp;刚刚看qq空间里你发的说说–有人拿走了你的外卖，🤣🤣🤣]]></content>
      <categories>
        <category>friends</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[book-fengchuan]]></title>
    <url>%2Fbook-note%2Fbook-fengchuan%2F</url>
    <content type="text"><![CDATA[深夜时，人会更加容易情绪化，所以无论多难过，都要告诉自己，没有那麽糟糕，睡一觉就好了。 相比广告营销，口口相传更有效，分享能让我们感觉良好，因为他会让我们显得高大上。我们更愿意与人分享能提升个人形象的信息。某些产品，思想或行为，经常出现在我们眼前时，他们的影响力和传染力就会大大增加。从古至今，故事一直都是人们分享信息的重要工具。诱因，让人产生联想，看到这个，就会想到那个。打折规则，100元以上，降价多少元，以下为打几折。&emsp;&emsp;那么如何打造-个疯传的产品呢?第一，让你的产品成为一种社交货币，也就是说人们会通过分享它来赢得别人的好感和兴趣;第二，要利用诱因引发消费者的联想;第三，要带动消费者的情绪，让他们不断频繁地分享;第四，让你的产品尽可能出现在大家眼前，让人们不看都不行;第五，记得，简单实用的东西自然会受人欢迎;最后，帮你的产品量身打造一一个足够有意思的故事。&emsp;&emsp;两个可行的建议。首先，可以让你的产品带上点竞争元素。就是说利用人们的游戏心理，大家在玩游戏的时候都喜欢跟别人比赛，获得胜利之后，会得意地和别人分享自己的战绩，同时也就相当于告诉了别人某个产品。所以，如果你的产品有了游戏元素，就能鼓励消费者用你的产品进行某种互动，这样就提高了产品被分享的可能。]]></content>
      <categories>
        <category>book-note</category>
      </categories>
      <tags>
        <tag>skills</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-liao-note]]></title>
    <url>%2Fgit%2Fgit-liao-note%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;人是不能闲的，一闲就会想得太多，一闲就会感情泛滥，所谓矫情屁事多，空虚寂寞冷，都是因为懒散寂寞闲。 git 的优秀之处 它跟踪并管理的是文件的修改，而非文件。Git有不少命令中有“-”，有时候是“-”，有时候是“–”。学过linux的命令行就懂了，单个”-“ 后面跟的是单个字母的参数，如-m， 两个”–”后面跟的是多个字母的参数，如–readme.txt 在大多数情况下成立的。注意:我的博客页面上显示的效果都只有一个’-‘,若’-‘线条显示的比较细，则表示两个’-‘ 创建本地版本库cd 到目录文件夹下mkdir learn-git 新建文件夹，即版本库（repository）git init 初始化版本库,即把这个目录变成git 可以管理的仓库ctrl + l 清屏，以防代码太多看着难受ls 查看目录下的文件ls -a 查看不可见的文件touch git-test.txt 创建 txt文件 或者用vscode编辑器创建，别用windows 自带的记事本，因为记事本在编码方面有弱智的行为，键盘上的上键 返回上一步命令git add git-test.txt 添加要提交的文件，可多次添加多个文件，将文件添加到暂存区（stage即阶段的意思）git commit -m “添加描述内容，如 这是第一次使用commit提交” 可以一次提交多个文件，默认提交到master 分支时光穿梭机git status 查看仓库当前的状态git diff 查看文件的具体修改的内容 输出变化前后的内容git log 显示从最近到最远的提交日志git reset –hard HEAD^ 回退到上一个版本，HEAD表示当前版本，HEAD^即上一个版本，往上100个版本为HEAD~100git reflog 用来记录我们的每一次命令即commit 的idgit reset –hard commit_id commit_id 为某一版本提交的具体ID名词解释说明 工作区： 即我们电脑上的项目文件夹，版本库 ：即工作区里面的一个叫 .git 的隐藏目录，版本库里面有暂存区，有git 为我们创建的master 分支，以及指向master的一个指针HEAD 管理修改 每次修改，如果不用git add 到暂存区，就不会加入到commit 中git checkout – git-test.txt 让这个文件回到最近一次git commit 或 git add 时的状态，注意–是单独的即后面有空格 ，git checkout 使用版本库里面的版本替换工作区的版本 ，无论工作区是修改还是删除，都可以一键还原。 我测试时为什么不行呢cat git-test.txt 查看文件的内容 远程仓库github 上创建一个仓库就行了，最好与本地仓库同名根据提示：将本地仓库与远程仓库关联并推送到远程123…or push an existing repository from the command linegit remote add origin https://github.com/lqyasl/learn-git.git (关联)git push -u origin master (本地推送到远程) 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。一个项目库第一次推送成功后，后面 只要本地做了提交，就可以 git push origin master 不用加参数-u分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了。前面是先有本地仓库，再有远程库。如何关联远程库。现在，最好的方式是，先创建远程库，再从远程库里面克隆到本地。首先在github上创建一个 仓库 并勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。我这里创建了一个gitskills的库。git clone git@github.com:lqyasl/gitskills.git 或 git clone https://github.com/lqyasl/gitskills.git 等多种方式， 推荐使用前一种，其速度最快。cd gitskills 进入克隆的库ls 展开文件列表 可以看到已经有一叫README.md 的文件了分支管理分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。 与其他svn 版本控制系统相比， git 超级快。每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支。实战部分git checkout -b dev 创建dev分支，然后切换到dev分支： 这里git checkout命令加上-b参数表示创建一个分支并切换到这个分支。 checkout这里表示切换的意思。git branch 查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号。对README.md 文件做修改，比如加一点内容。然后 git add README.md 以及 git commit -m ‘分支测试’ ，我们就可以在dev分支上正常提交现在，dev分支的工作完成，我们就可以切换回master分支 git checkout master现在，我们把dev分支的工作成果合并到master分支上 git merge dev 这里git merge命令用于合并指定分支到当前分支。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。合并完成后，就可以放心地删除dev分支了。 git branch -d dev因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。gti branch 查看分支，可以看到只剩下一个master主分支了。创建分支与合并小结 Git鼓励大量使用分支： 查看分支：git branch 创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d 解决冲突创建新的feature1分支，继续我们的新分支开发 git checkout -b feature1修改 README.md 文件的内容在feature1分支上提交 git add README.md 以及 git commit -m ‘AND simple’切换到master分支 git checkout masterGit还会自动提示我们当前master分支比远程的master分支要超前1个提交在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick &amp; simple.提交README.md 文件现在，master分支和feature1分支各自都分别有新的提交这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看 gti merge feature1 结果显示： Automatic merge failed; fix conflicts and then commit the result.果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件修改README.md 并提交 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。最后，删除feature1分支： git branch -d feature1分支管理策略通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。下面我们实战一下–no-ff方式的git merge：首先，仍然创建并切换dev分支：git checkout -b dev## &emsp;&emsp;今晚到此为止，明天再写。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git-note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Math-random]]></title>
    <url>%2FMath%2FMath-random%2F</url>
    <content type="text"><![CDATA[引言：希望你睡不着时，想起的都是那些让你开心的事 常见的问题：如何生成一个区间[min,max]内的随机整数？答案很简单，即 Math.random()*(max-min)+min 以下是一些其他的方法。 new Date() - 0 new Date() 日期函数 默认会显示年月日等字符，new Date() - 0 会得到数字“秒” (new Date() - 0)%2239 ,得到取模数值分之一概率的随机数，即[0,2239]范围内一随机数 toString(指定进制) 方法的调用 与parseInt() 方法一样，进制区间为 [2,36]，取36得字母多一些 随便一个随机数.toString(36)得随机字符，但有数字，且长短不一 随机字符串函数，长度固定，且都是字母 从固定的字典中抽取字符构成随机字符串 12345678910// 在大小写字母之间随机生成 x 个字符function randStr(x)&#123; var s = &apos;&apos;; while(s.length &lt; x &amp;&amp; x &gt; 0)&#123; var r = Math.random(); s += String.fromCharCode(Math.floor(r*26) + (r &gt; 0.5 ? 97 : 65)) &#125;; return s;&#125;;console.log(randStr(3)); //KzE 三个随机字符 颜色随机函数1234function randomColor()&#123; var rand = &apos;#&apos;+(&apos;00000&apos;+(Math.random()*0x1000000&lt;&lt;0).toString(16)).slice(-6); return rand;&#125;; 后记 随机数相关得知识还又有很多，后面学到了再来补充笔记]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>random</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[search-skills]]></title>
    <url>%2Fsearch%2Fsearch-skills%2F</url>
    <content type="text"><![CDATA[口语转变为关键词 关键词之间打上空格 限定在特定网站内 关键词 site:某一站点 注意：站点前不用加www或http 限定文件类型 关键词 filetype:文件格式 限定时间段 关键词 20xx..20xx 注意：中间是两个英文句号 排除某个关键词 关键词 -广告 -推广 将关键词限定在标题中 关键词 intitle:限定内容 ##]]></content>
      <categories>
        <category>search</category>
      </categories>
      <tags>
        <tag>skills</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win-vscode-hotkey]]></title>
    <url>%2Fwin-vscode%2Fwin-vscode-hotkey%2F</url>
    <content type="text"><![CDATA[引言：如果你想要个和现在不同的人生，就必须去做你从未做过的事情。努力之后最坏的结果是失败，但不尝试的结果则是无止境的懊悔、怀疑和平庸。 windows 最常用快捷键 ctrl w 关闭当前网页 f2键 ：选中后按f2键即可重命名文件，另一种方法，点一下文件名，稍等，再点一下，即可重命名 f4: 重复上步操作 f5: 刷新桌面 刷新网页 f11: 全屏显示网页 shift : 省略号 shift + 数字6 （表示六个点） …… 书名号 shift + &lt;&gt; (小于大于） 分隔号 单独按 数字1 前面的键 《简 · 爱》 Alt + 单击拖动 为矩形选择 AlT + f4 关闭当前程序 删除 选中后 按delete 永久删除 选中后 shift +delete 截屏 PrtSc 截全屏 Alt +PrtSc 截当前窗口 ctrl alt delete 任务管理器 windows 打开开始菜单 ctrl shift n 新建文件夹 window e 打开文件资源管理器 alt tab 切换窗口 window d 回到桌面 vscode 常用快捷键 上下移动一行： Alt+Up 或 Alt+Down 向上或向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down 同时选中所有匹配： Ctrl+Shift+L Ctrl+D 下一个匹配的也被选中 Alt + 单击 ：插入光标 Ctrl + F2 选择当前字的所有出现 ctrl shift k 删除整行 ctrl shift a 多行注释 ctrl f 当前文件内搜索相关代码，终于找到这个功能了，哈哈，右上角会有弹框，其中有前后箭头，表示搜索的代码上一次、下一次出现的位置，点击直接会跳转到相应的位置，并且侧边上有相应的位置标识。 后记：快捷键还有很多，学到了再来补充]]></content>
      <categories>
        <category>win-vscode</category>
      </categories>
      <tags>
        <tag>hotkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-source]]></title>
    <url>%2Fvue-source%2Fvue-source%2F</url>
    <content type="text"><![CDATA[引言：read the fucking source code vue 源码分析知识点分析 vue 作为一个 MVVM 框架的基本实现原理准备知识 1 [].slice.call(lis): 将伪数组转换为真数组 slice 方法有浅拷贝的用法，表示截取一部分，不传参数的话就是拷贝原数组 这样更好 Array.prototype.slice.call(lis) 2 node.nodeType: 得到节点类型 节点类型：常用的 document // 文档 Element //元素节点 节点类型 nodeType === 1; Attr //属性 Text //文本 documentFragment // 文档碎片 3 Object.defineProperty(obj, propName, {}): 给对象添加/修改属性(指定描述符) vue 数据代理的核心语法，不支持ie8，面试题 属性描述符： 数据描述符： configurable: true/false 是否可以重新 define enumerable: true/false 是否可以枚举(for..in / keys()) value: 指定初始值 writable: true/false value 是否可以修改 访问描述符：vue的计算属性就是利用get set 方法 get: 回调函数, 根据其他相关的属性动态计算得到当前属性值，根据相关的属性更新（得到）当前的属性 set: 回调函数, 监视当前属性值的变化，更新相关的属性值 ，根据当前的属性更新相关的属性 Object.keys(obj): 得到对象自身可枚举的属性名的数组 obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性 DocumentFragment: 文档碎片(高效批量更新多个节点) 传言啊 这个 childNodes是正统属性 亲生的 而这个children是野孩子 这个野孩子比较随意 所以用它返回来的就只有DOM元素了 其他的文字啥的 都不返回 而 childNodes比较讲究 事无巨细 都要返回来 但是我还是觉得野孩子乖 所以也获得了几乎所有浏览器的支持 如果你想要DOM节点 直接用野孩子就可以了 12345&lt;ul id=&quot;list&quot;&gt; &lt;li&gt;test1&lt;/li&gt; &lt;li&gt;test2&lt;/li&gt; &lt;li&gt;test3&lt;/li&gt;&lt;/ul&gt; 12345678910111213141516let list = document.getElementById(&quot;list&quot;); // 1. 创建文档碎片 let fragment = document.createDocumentFragment(); // 2. 取出ul中 所有 子节点保存到fragment中 //Array.prototype.slice.call(list.children).forEach(element =&gt; &#123; fragment.appendChild(element); &#125;); // 3.修改fragment中的每一个子元素的内容 Array.prototype.slice.call(fragment.children).forEach(element =&gt; &#123; element.textContent = &apos;舒璐&apos;; &#125;); // 4.将文档碎片插入到list中 list.appendChild(fragment); 数据代理的实现基本实现流程 通过 Object.defineProperty()给 vm 添加与 data 对象的属性对应的属性描述符 所有添加的属性都包含 getter/setter getter/setter 内部去操作 data 中对应的属性数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152相当于Vue的构造函数function MVVM(options) &#123; // 将选项对象保存到vm this.$options = options; // 将data对象保存到vm和datq变量中 var data = this._data = this.$options.data; //将vm保存在me变量中 var me = this; // 遍历data中所有属性 Object.keys(data).forEach(function (key) &#123; // 属性名: name // 对指定属性实现代理 me._proxy(key); &#125;); // 对data进行监视 observe(data, this); // 创建一个用来编译模板的compile对象 this.$compile = new Compile(options.el || document.body, this)&#125;MVVM.prototype = &#123; $watch: function (key, cb, options) &#123; new Watcher(this, key, cb); &#125;, // 对指定属性实现代理 _proxy: function (key) &#123; // 保存vm var me = this; // 给vm添加指定属性名的属性(使用属性描述) Object.defineProperty(me, key, &#123; configurable: false, // 不能再重新定义 enumerable: true, // 可以枚举 // 当通过vm.name读取属性值时自动调用 get: function proxyGetter() &#123; // 读取data中对应属性值返回(实现代理读操作) return me._data[key]; &#125;, // 当通过vm.name = &apos;xxx&apos;时自动调用 set: function proxySetter(newVal) &#123; // 将最新的值保存到data中对应的属性上(实现代理写操作) me._data[key] = newVal; &#125; &#125;); &#125;&#125;; 其中最关键的部分为 1234567891011121314Object.defineProperty(me, key, &#123; configurable: false, // 不能再重新定义 enumerable: true, // 可以枚举 // 当通过vm.name读取属性值时自动调用 get: function proxyGetter() &#123; // 读取data中对应属性值返回(实现代理读操作) return me._data[key]; &#125;, // 当通过vm.name = &apos;xxx&apos;时自动调用 set: function proxySetter(newVal) &#123; // 将最新的值保存到data中对应的属性上(实现代理写操作) me._data[key] = newVal; &#125; &#125;); 模板解析 嵌套调用: a里面调用b,b里面调用c 递归: a 里面调用 a ,a继续调用a即特殊的嵌套调用 模板解析的基本流程 1)将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中 2)对 fragment 中的所有层次子节点递归进行编译解析处理 对大括号表达式文本节点进行解析 对元素节点的指令属性进行解析 事件指令解析 一般指令解析 3) 将解析后的 fragment 添加到 el 中显示 模板解析(1): 大括号表达式解析&lt;p&gt;&lt;/p&gt; 根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1 name 从 data 中取出表达式对应的属性值 将属性值设置为文本节点的 textContent 模板解析(2): 事件指令解析从指令名中取出事件名 根据指令的值(表达式)从 methods 中得到对应的事件处理函数对象 给当前元素节点绑定指定事件名和回调函数的 dom 事件监听 指令解析完后, 移除此指令属性 模板解析(3): 一般指令解析得到指令名和指令值(表达式) text/html/class msg/myClass 从 data 中根据表达式得到对应的值 根据指令名确定需要操作元素节点的什么属性 v-text—textContent 属性 v-html—innerHTML 属性 v-class–className 属性 4) 将得到的表达式的值设置到对应的属性上 5) 移除元素的指令属性 call apply bind JavaScript 的一大特点是， 函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念 apply 、 call 、bind 三者都是用来改变函数的this对象的指向的； apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文； apply 、 call 、bind 三者都可以利用后续参数传参； bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。 call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里 bind()最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的this值。 常见的错误就像，将方法从对象中拿出来，然后调用，并且希望this指向原来的对象。 如果不做特殊处理，一般会丢失原来的对象。用bind方法可以 数据绑定 简单地说，就是数据更新，界面改变。 一旦更新了 data 中的某个属性数据, 所有界面上直接使用或间接使用了此属性的节点+更新 数据劫持 数据劫持是 vue 中用来实现数据绑定的一种技术 基本思想: 通过 defineProperty()来监视 data 中所有属性(任意层次)数据的变化, 一旦变化就去更新界面 初始化显示：页面（表达式/指令）能从data中读取数据显示（编译/解析） 更新显示：更新data中的属性数据，.&gt;&gt;&gt; 页面更新 图中黑线表示初始化，红线表示更新时触发 双向数据绑定 双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的 双向数据绑定的实现流程: 在解析 v-model 指令时, 给当前元素添加 input 监听(input事件会在value属性值发生改变时触发，通过js改变value属性值不会触发此事件。只有IE8以上或者谷歌火狐等标准浏览器支持。) 当 input 的 value 发生改变时, 将最新的值赋值给当前表达式所对应的 data 属性 vuex 是vue 的一个插件 简单来说: 对 vue 应用中多个组件的共享状态进行集中式的管理(读/写) 状态自管理应用 state: 驱动应用的数据源（data） view: 以声明方式将 state 映射到视图(模板界面) actions:（在vue中是函数） 响应在 view 上的用户输入导致的状态变化 (包含 n 个*更新状态的方法*) ![](vuenote/2.jpg) 多组件共享状态的问题 多个视图依赖于同一状态 来自不同视图的行为需要变更同一状态 以前的解决办 将数据以及操作数据的行为都定义在父组件 将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递) vuex 就是用来解决这个问题的 vuex 核心概念和 API state vuex 管理的状态对象,它应该是唯一的 mutations 包含多个直接更新 state 的方法(回调函数)的对象 谁来触发: action 中的 commit(&apos;mutation 名称&apos;) 只能包含同步的代码, 不能写异步代码 const mutations = { yyy (state, {data1}) { // 更新 state 的某个属性 } } vuex 人生管理哲学，哈哈State:想一想，你现在心里在意哪些事？ Mutation目标导向: 写下目标，直接改变State Action阶段性执行： 写下行动 ，执行一个个Matation、异步函数、和其它阶段性执行。 Getters: 写下其它指标，根据现有的state得到其他的指标 mapState和mapGetters必须在computed中访问，因为它们返回的是对象，所以需要用拓展符…进行展开。 mapActions则是将Action挂载到methods上，也需要用拓展符…进行展开。 组件中的mapActions([“increment”])与actions 中 increment 函数名一样actions 中 commit(“INCREMENT”)与mutations 中 INCREMENT函数名一样大写的函数名只是为了区分各个函数 可以定义一个mutation-type.js 后记]]></content>
      <categories>
        <category>vue-source</category>
      </categories>
      <tags>
        <tag>source</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[friends]]></title>
    <url>%2Fstart%2Ffriends%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;终于等到你，还好我没放弃：来了就好好逛逛，这里既是我的学习园地，也是我的精神家园，欢迎常来看看。在手机上一些效果表现不出来，双击试试看。欢迎匿名来撩，无需登录，及时互动。快点击右下角聊天按钮，说点什么吧。 将进酒 李白 君不见，黄河之水天上来，奔流到海不复回。君不见，高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。岑夫子，丹丘生，将进酒，杯莫停。与君歌一曲，请君为我倾耳听。钟鼓馔玉不足贵，但愿长醉不复醒。古来圣贤皆寂寞，惟有饮者留其名。陈王昔时宴平乐，斗酒十千恣欢谑。主人何为言少钱，径须沽取对君酌。五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。‘Everything will be okay in the end. If it’s not okay, it’s not the end.’]]></content>
      <categories>
        <category>start</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[h5-guigu-music]]></title>
    <url>%2FH5%2Fh5-guigu-music%2F</url>
    <content type="text"><![CDATA[面向对象面向君，不负代码不负卿。 第一天 像素 适配 图片加载太慢，后面要用纯文字代替，记得更新 rem最终适配代码 123456;(function()&#123; var styleNode = document.createElement(&quot;style&quot;); var w = document.documentElement.clientWidth/16; styleNode.innerHTML=&quot;html&#123;font-size:&quot;+w+&quot;px!important&#125;&quot; document.head.appendChild(styleNode);&#125;)() 1物理像素的实现 用媒体查询的方法 一般用伪元素来做123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;/&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; #test:before&#123; position: absolute; bottom: 0px; content: &quot;&quot;; display: block; width: 100%; height: 1px; background: black; &#125; @media only screen and (-webkit-device-pixel-ratio:2 ) &#123; #test:before&#123; transform: scaleY(.5); &#125; &#125; @media only screen and (-webkit-device-pixel-ratio:3 ) &#123; #test:before&#123; transform: scaleY(.33333333333); &#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;test&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 第二天 移动端基础事件 querySelectorAll() 匹配满足选择器的所有元素 改变dom结构后一定得再次获取 1234567891011window.onload=function()&#123; //querySelectorAll:获取静态列表 var itemNodes = document.querySelectorAll(&quot;.item&quot;); // 第一次获取 console.log(itemNodes.length) document.body.innerHTML+=&quot;&lt;div class=&apos;item&apos;&gt;&lt;/div&gt;&quot;; itemNodes = document.querySelectorAll(&quot;.item&quot;); // 改变dom结构后一定得再次获取 console.log(itemNodes) for(var i=0;i&lt;itemNodes.length;i++)&#123; itemNodes[i].style.background=&quot;pink&quot;; &#125;&#125; querySelector 获取 querySelectorAll 匹配到的第一个 触屏事件 监听用 addEventListenerpc端12345678910 touchstart mousedown touchmove mousemove 不可能单独触发 可以单独触发 touchend mouseupwindow.onload=function()&#123; var item = document.querySelector(&quot;.item&quot;); item.addEventListener(&quot;touchstart&quot;,function()&#123; console.log(&quot;touchstart&quot;) &#125;)&#125; 移动端事件默认行为 长按选中，橡皮筋效果（下拉）等 全面禁止事件默认行为 在 touchstart事件上，即手指触摸上去的时候就开始禁止 一上来就这段代码，全面禁止事件默认行为12345678910window.onload=function()&#123; document.addEventListener(&quot;touchstart&quot;,function(ev)&#123; ev=ev||event; ev.preventDefault();&#125;)// 单独按需开启 item.addEventListener(&quot;touchstart&quot;,function(ev)&#123; ev=ev||event; ev.stopPropagation();&#125;) 右键菜单的阻止与开启 与自定义右键 全局阻止右键1234567891011121314151617181920212223242526272829 document.oncontextmenu=function()&#123; return false; &#125;// 单独按需开启浏览器的右键菜单 var inner = document.querySelector(&quot;#inner&quot;); inner.oncontextmenu=function(ev)&#123; ev.stopPropagation();&#125;// 也可以自定义右键菜单window.onload=function()&#123; document.oncontextmenu=function(ev)&#123; ev = ev||event; var x = ev.clientX; var y = ev.clientY; var wrap =document.querySelector(&quot;#wrap&quot;); wrap.style.display=&quot;block&quot;; wrap.style.left = x+&quot;px&quot;; wrap.style.top = y+&quot;px&quot;; return false; &#125; // 单击消失 document.onclick=function()&#123; var wrap =document.querySelector(&quot;#wrap&quot;); wrap.style.display=&quot;none&quot;; &#125;&#125; 事件点透 pc端的事件可以在移动端触发 PC端事件有300毫秒延迟 移动端事件不会有延迟 移动端 a 标签跳转方案 并解决误触 123456789101112131415161718192021 // 阻止事件默认行为 document.addEventListener(&quot;touchstart&quot;,function(ev)&#123; ev=ev||event; ev.preventDefault(); &#125;) //移动端a标签的跳转方案 解决误触 var aNodes = document.querySelectorAll(&quot;a&quot;); for(var i=0;i&lt;aNodes.length;i++)&#123; aNodes[i].addEventListener(&quot;touchstart&quot;,function()&#123; this.isMoved=false; &#125;) aNodes[i].addEventListener(&quot;touchmove&quot;,function()&#123; this.isMoved=true; &#125;) aNodes[i].addEventListener(&quot;touchend&quot;,function()&#123; if(!this.isMoved)&#123; location.href=this.href; &#125; &#125;) &#125;&#125; event : //changedTouches: 触发当前事件的手指列表, 最常用//targetTouches: 触发当前事件时元素上的手指列表//touches: 触发当前事件时屏幕上的手指列表常见问题 及解决方法 禁止电话与邮箱,添加标签 1&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot;/&gt; 按需开启 电话与邮箱 12 &lt;a href=&quot;tel:1383838438&quot;&gt;1383838438&lt;/a&gt;&lt;a href=&quot;mailto:2642816105@qq.com&quot;&gt;2642816105&lt;/a&gt; 解决连接按钮高亮问题 1234a &#123; text-decoration:none; // 去下划线 webkit-tap-highlight-color:rgba(0,0,0,0); // 去背景高亮，只需字体高亮&#125; 解决圆角过圆的问题 加属性 webkit-appearance:none 即可 fontboosting 的问题 及显示的字体与设置的大小不一致的现象，加属性 max-height:999999px;即可 无缝华屏 移动端清除浮动：父元素ul元素上加 overflow:hidden 即可 表单：表单高亮：outline:none; 表单内阴影：boder:none; 划屏相关 在谁上面划，即划屏包裹slide-wrapper 划的内容 即slide-content 元素排到一行的方法 浮动 父容器宽度不够会自动换行 另一种技巧 父容器white-space :nowrap; 子元素: display: inline-block;橡皮筋效果 减少每次move 的有效距离，最终的有效距离还是一直在增大 混合 继承 可以单独定义一系列通用的样式，在需要的时候进行调用。从而减少代码的重复 混合：简单 1234567891011121314151617181920&lt;!-- 定义混合 --&gt;.mixin()&#123; &lt;!-- 规则集 --&gt;&#125;&lt;!-- 使用混合 --&gt;#text1&#123; &lt;!-- 相当于将规则集里面的代码cv到这里 --&gt; &lt;!-- 每次使用都是将代码复制到相应位置 --&gt; &lt;!-- 使用几次就有几处相同的代码 --&gt; .mixin();&#125;#text2&#123; .mixin();&#125;#text3&#123; .mixin();&#125;&lt;!-- 多处使用相同的混合 这样写好一点-（手动写）-&gt;#text1,#text2,#text3&#123; .mixin() &#125; 继承：性能好一点 1234567891011121314151617&lt;!-- 定义继承 --&gt;.extend&#123; &lt;!-- 规则集 --&gt;&#125;&lt;!-- 使用继承 --&gt;#text1&#123; &amp;::extend(.extend);&#125;#text2&#123; &amp;::extend(.extend);&#125;#text3&#123; &amp;::extend(.extend);&#125;&lt;!-- 最终编译为 --&gt;#text1,#text2,#text3&#123; &lt;!-- 规则集 ，相当于将规则集里面的代码cv到这里--&gt;&#125;]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>H5-note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello-World]]></title>
    <url>%2Fstart%2Fhello-world%2F</url>
    <content type="text"><![CDATA[故事的开头，多是惊魂一瞥，然后一眼万年。故事的结局，多是渐行渐远，江湖不见。 在 xxx.md文件插入html效果 直接写html 即可 内联样式也直接写 这里输入文字，自定义字体大小 这里输入文字，自定义字体颜色这里输入文字，自定义字体背景色这是综合起来的效果 这是综合起来的效果2 首行缩进效果 其中的 &amp;emsp;&amp;emsp; 即缩进两个字最常见 人们常觉得准备的阶段是在浪费时间，只有当真正机会来临，而自己没有能力把握的时候，才能觉悟自己平时没有准备才是浪费了时间。———罗曼·罗兰 全方大的空白 &amp;emsp; &emsp;内容充实的生命就是长久的生命。我们要以行为而不是以时间来衡量生命。 ——小塞涅卡 &emsp;&emsp;内容充实的生命就是长久的生命。我们要以行为而不是以时间来衡量生命。 ——小塞涅卡 不断行的空白格&amp;nbsp; &nbsp;以后无论我去哪我都把你带着我看账你帮我打算盘我谈生意你帮我出主意一起把吴家东院发扬光大做到陕西第一天下第一。———那年花开月正圆周莹经典台词 md 语法常用语法总结倾斜 单层*示例：倾斜字体 加粗 双层*示例：加粗字体 加粗倾斜 三层*示例：加粗倾斜 删除线 双层~~示例：删除线 单层引用 &gt;加内容示例： 这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容这是引用的内容 分割线 三个或者三个以上的 - 或者 * 都可以示例： 分割线分割线分割线分割线分割线1 分割线分割线分割线分割线分割线2 无序列表 用 - + * 任何一种都可以示例： 无序列表1 无序列表2 无序列表3 有序列表 数字加点表格 :示例： 表头 表头 表头 内容 内容 内容 注：第二行分割表头和内容。-有一个就行，为了对齐，多加了几个 文字默认居左-两边加：表示文字居中-右边加：表示文字居右 代码:示例：单行: javascriptvuenodeajax 代码块 : 、、、.b{ background: red;}、、、]]></content>
      <categories>
        <category>start</category>
      </categories>
      <tags>
        <tag>md写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-note]]></title>
    <url>%2Fvue%2Fvue-note%2F</url>
    <content type="text"><![CDATA[人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。 要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾…… 但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是 Vue 的特点 遵循 MVVM 模式 即MVVM 模式的一种实现 编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发 它本身只关注 UI, 可以轻松引入 vue 插件（依赖vue）或其它第三库(不依赖vue)开发项目 MVVM 的理解 M 即 model 模型, 数据对象（data） V 即 view 视图，模板页面 VM 即 viewModel 视图模型 是vue的实例 dom监听 数据绑定 组件 即 局部功能界面 ，是提供某一完整功能的模块模板的理解：动态的html页面，包含了一些js语法代码vue 扩展组件 vue-cli: vue 脚手架 axios: ajax 请求 vue-router: 路由 vuex: 状态管 vue-lazyload: 图片懒加载 vue-scroller: 页面滑动相关 mint-ui: 基于 vue 的 UI 组件库(移动端) element-ui: 基于 vue 的 UI 组件库(PC 端) 编程方式 命令式 如 jquery 声明式 如 vue数组的扩展-array.some()和array.every()区别 some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false； every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；挂载元素app new Vue({ el :’#app’ }); new vue({}).$moute(‘#app’) 用于单元测试vue 指令 v-bind 即 : 强制 动态 数据绑定（属性） v-on 即 @ 绑定事件监听 v-html 内部innerHTML XSS攻击 内容必须是可信赖的 vue 计算属性 computed 什么时候执行 ： 初始化显示，/ 相关的data 数据属性发生变化时触发 各个方法的返回值作为相关的属性值 get 回调函数，当需要读取当前属性值的时候回调，计算并返回当前属性的值 set 回调函数，监视当前属性值的变化，当属性值变化时回调，更新相关的属性数据 计算属性，存在缓存，多次读取，只调用一次getter计算，性能好, 全选时可用计算属性 vue 的方法 methods 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。 然而，不同的是计算属性是基于它们的依赖进行缓存的。只在相关依赖发生改变时它们才会重新求值 相比之下，每当触发重新渲染时，调用方法将总会再次执行函数 如果你不希望有缓存，请用方法来替代 vue 的watch 虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器 当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的 绑定 style class :class=”xxx” xxx是字符串或对象 :style=”xxx” xxx是对象 对象更新,数组更新 完全跟新 即重新写这个对象 补充更新 vm.$set(要跟新的对象名,补充的属性名,属性值) 数组更新 vm.$set(要跟新的数组名,更新的下标,具体值) 数组更新检测 变异方法（vue重写原生的方法）即以下这些方法已不再是原生的方法 push pop shift unshift splice sort reverse 使用它们会触发视图更新 注意事项： 利用索引直接设置一个项时/修改数组的长度时 vue不能检测到数组变化 常用事件修饰符 阻止事件冒泡 如@click.stop=”XXX” 传统方法 e.stopPropagation 取消事件默认行为 如 @click.prevent=”xxx” 传统方法 e.preventDefault @click.once=”xxx” 点击事件将只会触发一次 常用按键修饰符 抬起某键时，执行操作 如按回车 @keyup.enter=”xxx” 鼠标修饰符 left right middle 系统修饰键 可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。 ctrl alt shift meta 表单数据的自动收集 使用 v-model vue实例的 生命周期（钩子函数） 大致有三个阶段 初始化阶段 beforeCreate created beforeMount mounted 只执行一次 更新阶段 beforeUpdate updated 执行N次 销毁阶段 beforeDestory destoryed 常用的有1：`mounted` （挂载方法） 发送*Ajax* 请求,获取真实dom ，执行定时器等异步任务 2：`beforeDestory` 收尾工作，如清除定时器，解绑操作等 vue 过渡&amp;动画 过渡 ：transition 显示时的效果：xxx-enter-active{…} 隐藏时的效果 ：xxx-leave-active{…} 其中xxx表示 transition元素的name 属性值 动画 ：animation 过滤 vue.filter(‘自定义函数名’，() =&gt; {…}) 指令 ref 为某个元素指定一个唯一的标识，vue对象通过$refs属性访问这个元素对象 v-cloak 防止闪现表达式 与css属性选择器配合 [v-cloak] {display:none} 自定义指令 全局指令： vue.directive(‘指令名’，function(el,binding){…}) 参数el指属性所在的标签对象 binding包含指令相关的数据对象 局部指令： 在vue实例选项中配置directives:{‘指令名’，(el,binding) =&gt; {…},others} vue 自定义插件 plugin Vue 插件是一个包含 install 方法的对象 1234567891011121314151617181920 自定义 Vue 插件 包在匿名函数自执行里面(function () &#123; const MyPlugin = &#123;&#125;; MyPlugin.install = function (Vue, options) &#123; // 1. 添加全局方法或属性 Vue.myGlobalMethod = function () &#123; alert(&apos;Vue 函数对象方法执行&apos;) &#125;; // 2. 添加全局资源 Vue.directive(&apos;my-directive&apos;, function (el, binding) &#123; el.innerHTML = &quot;MyPlugin my-directive &quot; + binding.value &#125;); // 3. 添加实例方法 Vue.prototype.$myMethod = function () &#123; alert(&apos;vue 实例对象方法执行&apos;) &#125;; &#125; window.MyPlugin = MyPlugin;&#125;)() 页面使用插件 1234567891011121314151617181920212223&lt;div id=&quot;demo&quot;&gt;&lt;!--使用自定义指令--&gt;&lt;p v-my-directive=&quot;msg&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;vue-myPlugin.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;//声明使用自定义插件Vue.use(MyPlugin)var vm = new Vue(&#123;el: &apos;#demo&apos;,data: &#123;msg: &apos;atguigu&apos;&#125;&#125;)//调用自定义的静态方法Vue.myGlobalMethod()//调用自定义的对象方法vm.$myMethod()&lt;/script&gt; vue 组件 全局组件 局部组件vue 组件间通信 父传向子 props 在组件内声明所有的 props 方式一: 只指定名称props: [‘name’, ‘age’, ‘setName’] 方式二: 指定名称和类型props: { name: String, age: Number, setNmae: Function} 方式三: 指定名称/类型/必要性/默认值props: { name: {type: String, required: true, default:xxx},}问题: a. 如果需要向非子后代传递数据必须多层逐层传递 b. 兄弟组件间也不能直接 props 通信, 必须借助父组件才可以 属性校验 123456789101112 要校验的 props : &#123; msg :&#123; type :Number, validator (value)&#123; //validator 属性校验器，可以自定义属性校验 return value &gt; 3; &#125; &#125; arr :&#123; type :Array, default :() =&gt; ([1,2,3]) // 属性校验中，如果是`数组/对象` 需要将默认值返回 &#125;&#125; 子传向父 通过自定义事件 绑定事件监听 // 方式一: 通过 v-on 绑定 @delete_todo=”deleteTodo” // 方式二: 通过$on() this.$refs.xxx.$on(‘delete_todo’, function (todo) { this.deleteTodo(todo) }) 触发事件 // 触发事件(只能在父组件中接收) this.$emit(eventName, data) 问题: 隔代组件或兄弟组件间通信此种方式不合适 vue 自定义事件 我的理解 子组件中 @click=”add” methods 里面 是具体的add方法干的事情 add里面最终 通过this.$emit(“add”,this.msg)通知父级我触发了此事件 并传值给父组件 父组件中 监听@add=”addCounter”methods里面定义addCounter要干啥事，用一个形参接收子组件传来的值 消息订阅与发布(PubSubJS 库) 订阅消息 —-&gt;事件监听 PubSub.subscribe(‘msg’, function(msg, data){}) 发布消息 —–&gt;触发事件 PubSub.publish(‘msg’, data) 优点: 此方式可实现任意关系组件间通信(数据) slot(插槽，占位的) 此方式用于父组件向子组件传递标签数据4.2 复用性 使用 父组件中 使用子组件，slot属性 ：xxx 对应的标签结构 子组件中 定义插槽，slot元素 name属性：不确定的标签结构 1 插槽对应的方法属性等定义在父组件中， 模块导出为函数还是对象的依据要看模块向外暴露一个功能还是多个功能 一个功能即函数 多个功能则对象 ，因为对象可以包含多个方法 ajax 插件相关知识 下载插件 引入插件 声明使用插件 即 Vue.use(名字) 方式一：vue-resource 内部会给vm对象和组件对象添加一个属性：$http $http 有两个方法 get() ,post() 方式二：axios vue.2.X 下载 npm install axios –save // 直接引入模块使用，不用声明 在哪里使用在哪里引入 123456789import axios from &apos;axios&apos; // 发送 ajax 请求axios.get(url).then(response =&gt; &#123; console.log(response.data) // 得到返回结果数据&#125;).catch(error =&gt; &#123; console.log(error.message)&#125;) 数组方法之map方法的特点：数组里面的对象变，但数组对象的个数不变组件名称 路由相关 开发中分为路由组件和非路由组件 路由组件 名称为 views 或 pages 非路由组件 名称为 components 路由器模块命名为router建立index.js文件 路由器模块: src/router/index.js 引入vue import Vue from ‘vue’ 引入VueRouter import VueRouter from ‘vue-router’ 注册使用VueRouter Vue.use(VueRouter) 导出一个VueRouter实例 1234567891011 export default new VueRouter(&#123; routes 数组， routes: [ // 路由配置 k即（path） 和value即（component） &#123; path: &apos;/&apos;, redirect: &apos;/about&apos; &#125;, &#123; path: &apos;/about&apos;, component: About &#125;, ]&#125;) 注册路由器: main.js 1234567 import Vue from &apos;vue&apos; import router from &apos;./router&apos; // 创建 vue 配置路由器new Vue(&#123; el: &apos;#app&apos;, router, render: h =&gt; h(app)&#125;) 使用路由组件标签 12345&lt;!--路由链接--&gt;&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;&lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;&lt;!--用于渲染当前路由组件--&gt;&lt;router-view&gt;&lt;/router-view&gt; 子路由 children path可以写全或 直接写当前的路由名字（简化写法） 缓存路由组件对象 默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的 如果可以缓存路由组件对象, 可以提高用户体验 123&lt;keep-alive&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt; 向路由组件传递数据 方式 1: 路由路径携带参数(param/query) 配置路由 12345children: [&#123; path: &apos;mdetail/:id&apos;, component: MessageDetail&#125;] 路由路径 1&lt;router-link :to=&quot;&apos;/home/message/mdetail/&apos;+m.id&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; 路由组件中读取请求参数 1this.$route.params.id 方式 2: 属性携带数据 1&lt;router-view :msg=&quot;msg&quot;&gt;&lt;/router-view&gt; 编程式路由导航 即用js 的方法实现而非 标签方式 相关 API 栈的结构 this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面) this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面) this.$router.back(): 请求(返回)上一个记录路由 this.$router.go(-1): 请求(返回)上一个记录路由 this.$router.go(1): 请求下一个记录路由 栈 队列 例子 ： 喝醉酒后站着从上面出来即为栈 call 方法调用 让一个函数成为指定对象的方法进行调用 slice.call(lis) 即让slice函数成为lis的方法进行调用]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[less-note]]></title>
    <url>%2Fless%2Fless%2F</url>
    <content type="text"><![CDATA[君子生非异也，善假于物也. less 即css预处理器 vscode 编辑器 下载插件 easy less 声明编码集 @charset “utf-8”声明变量 声明变量(原始值类型) @bb:#ff0000; 使用变量 color:@bb; 声明变量（路劲类型） @img:”../images”; 使用变量 background-image:url(“@{img}/1.jpg”) 声明变量(属性类型) @ww:width; 使用变量 @{ww}:100px; 混合方式 带默认参数 定义 .border-r(@radius:5px){ border-radiis:@radius; } 使用 .box{ .border-r; 传参即.border-r(10px); } 接收多个参数 定义 .box-s(@x, @y, @blur, @color){ box-shadow:@arguments; } 使用 .box{ .box-s(3px,4px,5px,red) } color 函数 了解就行 运算 各种可以计算的都可以计算 包括颜色值 支持运算符 + - * / 即加减乘除命名空间 它用于将mixins分组在通用名称下。 使用命名空间可以避免名称冲突，并从外部封装mixin组12345678910111213141516171819202122定义：#bgcolor()&#123; // 加 () 默认不输出 background: #ffffff; .a&#123; color: #888888; &amp;:hover&#123; color: green; &#125; .b&#123; background: red; &#125; &#125;&#125;使用：.bgcolor1&#123; background: yellow; #bgcolor&gt;.a; // &gt;符号表示选中混合中的每一个样式&#125;.bgcolor2&#123; // #bgcolor&gt;.a&gt;.b; #bgcolor .a .b; // 省略写法：将&gt;换成空格即可&#125; 避免编译 我们能在编译后的css文件中看到 它 编译计算之前的样子 最终的编译计算由浏览器来完成 css3中有这样一个函数calc() less里面 123.box&#123; width:~&apos;calc(300px - 10px)&apos;&#125; 编译完的 css 123.box&#123; width:calc(300px - 10px)&#125; !important css 样式中 用来提升优先级（最高） less 中 一样 常用来调试代码 比如 某一段样式不起作用，不知道是继承还是覆盖等造成的 给他加上 !important 还不起作用的话 就说明代码书写有误]]></content>
      <categories>
        <category>less</category>
      </categories>
  </entry>
</search>

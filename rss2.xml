<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Sat, 05 Oct 2019 06:20:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>vue常见组件之menu</title>
      <link>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bmenu/</link>
      <guid>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bmenu/</guid>
      <pubDate>Sat, 05 Oct 2019 06:16:47 GMT</pubDate>
      <description>
      
        vue常见组件
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;常见的首页竖条大菜单</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="pc端常见的竖条大菜单"><a href="#pc端常见的竖条大菜单" class="headerlink" title="pc端常见的竖条大菜单"></a>pc端常见的竖条大菜单</h2><ul><li>vue中以组件的形式来学习菜单</li><li>这里以自己写的menu.vue组件为例</li><li>左边的菜单项与右边的细节内容展示项为简单并列的dom结构即可，而非多么复杂的结构 </li><li>而在数据结构方面可以为嵌套的结构</li><li><p>右边只是一块空的展示区，展示左边的某一块内容细节，左边通过鼠标事件改变数据，从而改变右边展示区的内容。</p></li><li><p>因为左右两边为并列的dom结构而非父子结构，所以左边的鼠标事件(mouseover等)与右边无法衔接(就是鼠标从左边滑到右边后，右边会消失而不是继续展示，这点类似于鼠标的hover事件，通过鼠标hover维持状态的前提是，鼠标在当前元素以及它的子元素之上停留着)，所以我们通过在左右两边都监听鼠标事件来判断情况。 </p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"nav"</span> @<span class="attr">mouseleave</span>=<span class="string">"navLeave"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>全部分类<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(item, index) in menu"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">mouseenter</span>=<span class="string">"navEnter"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"item.type"</span> /&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">"kind"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"detail"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseenter</span>=<span class="string">"detEnter"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseleave</span>=<span class="string">"detLeave"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in curDetail.children"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.title &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(val, idx) in item.child"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"idx"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          &#123;&#123; val &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      kind: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      menu: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          type: <span class="string">'food'</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">'美食'</span>,</span></span><br><span class="line"><span class="undefined">          children: [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">              title: <span class="string">'热门美食'</span>,</span></span><br><span class="line"><span class="javascript">              child: [<span class="string">'火锅'</span>, <span class="string">'烤串'</span>, <span class="string">'啤酒'</span>, <span class="string">' 炸鸡'</span>, <span class="string">'小龙虾'</span>]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          ]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          type: <span class="string">'takeout'</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">'外面'</span>,</span></span><br><span class="line"><span class="undefined">          children: [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">              title: <span class="string">'热门外卖'</span>,</span></span><br><span class="line"><span class="javascript">              child: [<span class="string">'黄焖鸡'</span>, <span class="string">'炒菜'</span>, <span class="string">'花生'</span>, <span class="string">'榨菜'</span>, <span class="string">'水饺'</span>]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    curDetail () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.menu.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.type === <span class="keyword">this</span>.kind)[<span class="number">0</span>]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    navEnter (e) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.kind = e.target.querySelector(<span class="string">'i'</span>).className</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    navLeave () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.kind = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      &#125;, 150)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    detEnter () &#123;</span></span><br><span class="line"><span class="javascript">      clearTimeout(<span class="keyword">this</span>.timer)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    detLeave () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.kind = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bmenu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue常见组件之search</title>
      <link>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bsearch/</link>
      <guid>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bsearch/</guid>
      <pubDate>Sat, 05 Oct 2019 06:08:47 GMT</pubDate>
      <description>
      
        vue常见组件
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;vue常见组件之search，即大的电商等网站的大搜索框</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="pc端常见的搜索框组件"><a href="#pc端常见的搜索框组件" class="headerlink" title="pc端常见的搜索框组件"></a>pc端常见的搜索框组件</h2><ul><li>这里结合element ui来学习</li><li>以下是我写的search.vue组件</li><li>当输入框获得焦点而未输入内容时，展示热门搜索</li><li>当输入框获得焦点且输入内容时，展示相关的内容(请求数据并展示)</li><li>以上两者dom结构为并列结构即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-panel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"m-header-searchbar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"6"</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//s0.meituan.net/bs/fe-web-meituan/fa5f0f0/img/logo.png"</span> <span class="attr">alt</span>=<span class="string">"美团"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">"搜索商家或地点"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">focus</span>=<span class="string">"foucs"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">blur</span>=<span class="string">"blur"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"el-button el-button--primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"hotPlace"</span> <span class="attr">v-if</span>=<span class="string">"isHotList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>热门搜索<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>火锅<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>火锅<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>火锅<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"searchList"</span> <span class="attr">v-if</span>=<span class="string">"isSearchList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>小龙虾<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>小龙虾<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>小龙虾<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"suggset"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>故宫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>故宫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>故宫<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"takeout"</span>&gt;</span>美团外卖<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"movie"</span>&gt;</span>猫眼电影<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"hotel"</span>&gt;</span>美团酒店<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"apartment"</span>&gt;</span>民宿／公寓<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"business"</span>&gt;</span>商家入驻<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"6"</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"security"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"refund"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>随时退<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"single"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>不满意免单<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"overdue"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>过期退<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      search: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      isFoucs: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    isSearchList () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.isFoucs &amp;&amp; <span class="keyword">this</span>.search</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    isHotList () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.isFoucs &amp;&amp; !<span class="keyword">this</span>.search</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    foucs () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.isFoucs = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    blur () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.isFoucs = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E4%B9%8Bsearch/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-render和jsx</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-render%E5%92%8Cjsx/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-render%E5%92%8Cjsx/</guid>
      <pubDate>Tue, 24 Sep 2019 05:57:16 GMT</pubDate>
      <description>
      
        vue技术栈-render和jsx基本用法
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="渲染函数和JSX快速掌握"><a href="#渲染函数和JSX快速掌握" class="headerlink" title="渲染函数和JSX快速掌握"></a>渲染函数和JSX快速掌握</h1><ul><li><a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">render-function</a></li></ul><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><ul><li>h函数 有三个参数：第一个参数为必选参数(要渲染的组件或一个标签的字符串)，后两个为可选参数,</li><li>第二个参数为一个配置对象</li><li><p>第三个参数为字符串或数组 即元素要显示的文本内容或子节点</p></li><li><p>在vue中就是通过render函数将组件挂载到页面上的</p></li><li><p>渲染根组件APP</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br></pre></td></tr></table></figure><ul><li>渲染一个元素div</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;</span><br><span class="line">    attrs: &#123; <span class="comment">// 写原生的属性attrs对象</span></span><br><span class="line">      id: <span class="string">'box'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    style: &#123; <span class="comment">// 写原生的样式style对象</span></span><br><span class="line">      color: <span class="string">'red'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">'love'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>渲染一个自己封装好的组件 CountTo</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> h(CountTo, &#123;</span><br><span class="line">    <span class="comment">// 向组件中最外层元素绑定一个类名</span></span><br><span class="line">    <span class="comment">// 'class': 'love sex', // 可以是字符串</span></span><br><span class="line">    <span class="comment">// 'class': ['count-to', true ? 'wrapper' : 'box'], // 可以是数组，里面可以用逻辑表达式绑定类名</span></span><br><span class="line">    <span class="string">'class'</span>: &#123;</span><br><span class="line">      <span class="string">'number'</span>: <span class="literal">true</span> <span class="comment">// 可以是对象 也可以用逻辑表达式 决定属性的有无</span></span><br><span class="line">    &#125;,</span><br><span class="line">    attrs: &#123;&#125;,</span><br><span class="line">    style: &#123;&#125;,</span><br><span class="line">    props: &#123; <span class="comment">// 向组件中传值props对象</span></span><br><span class="line">      endValue: <span class="number">99999999</span></span><br><span class="line">    &#125;,</span><br><span class="line">    domProps: &#123;&#125;,</span><br><span class="line">    on: &#123; <span class="comment">// 监听组件中抛出的事件</span></span><br><span class="line">      <span class="string">'组件中抛出的事件名'</span> : <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    nativeOn: &#123; <span class="comment">// 绑定监听原生的点击事件</span></span><br><span class="line">      <span class="string">'click'</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click :'</span>, <span class="string">'原生的点击事件'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives:[], <span class="comment">// 自定义指令</span></span><br><span class="line">    scopedSlots: &#123;&#125;, <span class="comment">// 作用域插槽</span></span><br><span class="line">    slot: <span class="string">''</span>, <span class="comment">// 插槽</span></span><br><span class="line">    key: <span class="string">''</span>, <span class="comment">// key</span></span><br><span class="line">    ref: <span class="string">''</span> <span class="comment">// ref</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子节点必须放到一个数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子节点的添加 */</span></span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, [</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'111'</span>),</span><br><span class="line">  h(<span class="string">'p'</span>, <span class="string">'222'</span>),</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 可以这样</span></span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, [</span><br><span class="line">  h(<span class="string">'ul'</span>, &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line">      <span class="string">'click'</span>: handleClick</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,[</span><br><span class="line">    h(<span class="string">'li'</span>, &#123;</span><br><span class="line">      on: &#123;</span><br><span class="line">        <span class="string">'click'</span>: handleClick</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>在render函数中模仿v-for循环产生元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrName = [&#123;<span class="attr">name</span>: <span class="string">'shulu'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'yachan'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'liuqiuyun'</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历调用h 函数</span></span><br><span class="line"><span class="keyword">const</span> getArrName = <span class="function">(<span class="params">h</span>) =&gt;</span></span><br><span class="line">  arrName.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'li'</span>, &#123;</span><br><span class="line">      on: &#123;</span><br><span class="line">        <span class="string">'click'</span>: handleClick</span><br><span class="line">      &#125;,</span><br><span class="line">      key: index</span><br><span class="line">    &#125;, item.name)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>,[</span><br><span class="line">  h(<span class="string">'ul'</span>, getArrName(h))</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="函数式组件和JSX"><a href="#函数式组件和JSX" class="headerlink" title="函数式组件和JSX"></a>函数式组件和JSX</h2><ul><li>views/render-page.vue中引入List列表组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// views/render-page.vue 中引入List列表组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span> <span class="attr">:items</span>=<span class="string">"items"</span> <span class="attr">:render</span>=<span class="string">"renderFunc"</span>&gt;</span><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'_c/list'</span> <span class="comment">// list文件夹下有 index.js 它引入并导出了List组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'RenderPage'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    List,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      items: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'yachan'</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'shulu'</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'qiuyun'</span>&#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    handleClick () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'click'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父组件使用时自己传入的标签例如i</span></span></span><br><span class="line"><span class="javascript">    renderFunc (h, name) &#123; <span class="comment">// JSX语法</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> ( <span class="comment">// 绑定事件 on- 前缀 nativeOn-click</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">on-click</span>=<span class="string">&#123;this.handleClick&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> '<span class="attr">pink</span>'&#125;&#125;&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      )</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>views/List.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// views/List.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"!render"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">render-dom</span> <span class="attr">v-else</span> <span class="attr">:render-func</span>=<span class="string">"render"</span> <span class="attr">:name</span>=<span class="string">"item.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">render-dom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> RenderDom <span class="keyword">from</span> <span class="string">'_c/render-dom'</span> <span class="comment">// 引入函数式组件 shit</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'List'</span>,</span></span><br><span class="line"><span class="javascript">  components: &#123; <span class="comment">// 注册函数式组件</span></span></span><br><span class="line"><span class="undefined">    RenderDom</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    items: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    render: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>函数式组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个普通的对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123; <span class="comment">// 接收的值</span></span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    renderFunc: <span class="built_in">Function</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> &#123; <span class="comment">// ctx 上下文环境</span></span><br><span class="line">    <span class="keyword">return</span> ctx.props.renderFunc(h, ctx.props.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><ul><li>属性slot-scope</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">count-to</span> <span class="attr">slot-scope</span>=<span class="string">"count"</span> <span class="attr">:end-value</span>=<span class="string">"count.number"</span>&gt;</span><span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-render%E5%92%8Cjsx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-第三方js库的使用</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%AC%AC%E4%B8%89%E6%96%B9js%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%AC%AC%E4%B8%89%E6%96%B9js%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Tue, 24 Sep 2019 04:20:21 GMT</pubDate>
      <description>
      
        vue技术栈-第三方js库的使用
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="第三方js库的使用"><a href="#第三方js库的使用" class="headerlink" title="第三方js库的使用"></a>第三方js库的使用</h1><ul><li>这里以数字渐变的一个第三方js库为依赖，学习简单的组件的封装</li><li><a href="https://github.com/inorganik/CountUp.js" target="_blank" rel="noopener">CountUp.js</a></li></ul><h2 id="组件中使用id值"><a href="#组件中使用id值" class="headerlink" title="组件中使用id值"></a>组件中使用id值</h2><ul><li>这个countup.js库的第一个参数为一个元素或组件的id值</li><li>我们知道id值在页面中是唯一的，所以我们的分装的组件要想复用就得使用不同的id</li><li>this._uid 每一个vue组件都有唯一的标识 _uid, 我们通过计算属性的getter方法就可以拿到他</li></ul><h2 id="组件中获取dom"><a href="#组件中获取dom" class="headerlink" title="组件中获取dom"></a>组件中获取dom</h2><ul><li>通过id值</li><li>通过ref属性</li><li>ref属性在元素上则拿到的是这个元素</li><li>ref属性在一个组件上则拿到的是这个组件</li></ul><h2 id="组件封装基础"><a href="#组件封装基础" class="headerlink" title="组件封装基础"></a>组件封装基础</h2><ul><li>新建components/count-to文件夹，存放我们创建的数字渐变的的组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/count-to/count-to.vue </span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span :id=<span class="string">"eleId"</span> ref=<span class="string">"number"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; CountUp &#125; <span class="keyword">from</span> <span class="string">'countup.js'</span> <span class="comment">// 引入countup.js库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'CountTo'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">/* 最终值 */</span></span><br><span class="line">    endValue: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    opations: &#123;</span><br><span class="line">      <span class="comment">// startVal?: number; // number to start at (0)</span></span><br><span class="line">      startVal: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// decimalPlaces?: number; // number of decimal places (0)</span></span><br><span class="line">      decimalPlaces: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// duration?: number; // animation duration in seconds (2)</span></span><br><span class="line">      duration: <span class="number">2</span>,</span><br><span class="line">      <span class="comment">// useGrouping?: boolean; // example: 1,000 vs 1000 (true)</span></span><br><span class="line">      useGrouping: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// useEasing?: boolean; // ease animation (true)</span></span><br><span class="line">      useEasing: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)</span></span><br><span class="line">      smartEasingThreshold: <span class="number">999</span>,</span><br><span class="line">      <span class="comment">// smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)</span></span><br><span class="line">      smartEasingAmount: <span class="number">333</span>,</span><br><span class="line">      <span class="comment">// separator?: string; // grouping separator (',')</span></span><br><span class="line">      separator: <span class="string">','</span>,</span><br><span class="line">      <span class="comment">// decimal?: string; // decimal ('.')</span></span><br><span class="line">      decimal: <span class="string">'.'</span>,</span><br><span class="line">      <span class="comment">// easingFn: easing function for animation (easeOutExpo)</span></span><br><span class="line">      <span class="comment">// easingFn?: (t: number, b: number, c: number, d: number) =&gt; number;</span></span><br><span class="line">      <span class="comment">// formattingFn?: (n: number) =&gt; string; // this function formats result</span></span><br><span class="line">      <span class="comment">// prefix?: string; // text prepended to result</span></span><br><span class="line">      prefix: <span class="string">''</span>,</span><br><span class="line">      <span class="comment">// suffix?: string; // text appended to result</span></span><br><span class="line">      suffix: <span class="string">''</span></span><br><span class="line">      <span class="comment">// numerals?: string[]; // numeral glyph substitution</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// dom渲染完成之后调用次回调函数</span></span><br><span class="line">      <span class="keyword">this</span>.counter = <span class="keyword">new</span> CountUp(<span class="keyword">this</span>.eleId, <span class="keyword">this</span>.endValue , <span class="keyword">this</span>.opations)</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 这个start一定要放在setTimeout等有延迟的方法之中调用</span></span><br><span class="line">      <span class="keyword">this</span>.counter.start()</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">/* 第一个参数 元素的id值 */</span></span><br><span class="line">    eleId () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`count_up_<span class="subst">$&#123;<span class="keyword">this</span>._uid&#125;</span>`</span> <span class="comment">// 每一个组件都有唯一的标识 _uid</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getNumber () &#123; <span class="comment">// 组件中的dom获取操作</span></span><br><span class="line">      <span class="keyword">const</span> text = <span class="keyword">this</span>.$refs.number.innerText</span><br><span class="line">      <span class="keyword">let</span> num = text.replace(<span class="regexp">/[\u4e00-\u9fa5]/g</span>, <span class="string">''</span>).substring(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/count-to/index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/count-to/index.js</span></span><br><span class="line"><span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'./count-to'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CountTo</span><br><span class="line"><span class="comment">// 这样们使用这个组件的时候只需要引入components/count-to即可</span></span><br></pre></td></tr></table></figure><ul><li>创建完了组件，下面我们来使用一下</li><li>只需要把以下的组件在页面中展示一下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 新建一个组件 </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">count-to</span> <span class="attr">class</span>=<span class="string">"numto"</span> <span class="attr">ref</span>=<span class="string">"countTo"</span> <span class="attr">:end-value</span>=<span class="string">"10000.34"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:opations</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      duration: 10,</span></span></span><br><span class="line"><span class="tag"><span class="string">      decimalPlaces: 2,</span></span></span><br><span class="line"><span class="tag"><span class="string">      prefix: '金额：',</span></span></span><br><span class="line"><span class="tag"><span class="string">      suffix: '元'</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">count-to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getNum"</span>&gt;</span>getNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> CountTo <span class="keyword">from</span> <span class="string">'_c/count-to'</span> </span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'count_to'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    CountTo</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    getNum () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.countTo.getNumber()) <span class="comment">// 调用子组件的方法</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.numto</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%AC%AC%E4%B8%89%E6%96%B9js%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-状态管理vuex进阶2</title>
      <link>https://shulu520.com/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/</link>
      <guid>https://shulu520.com/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/</guid>
      <pubDate>Tue, 24 Sep 2019 04:09:09 GMT</pubDate>
      <description>
      
        vue技术栈-状态管理vuex进阶2
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="Vuex插件"><a href="#Vuex插件" class="headerlink" title="Vuex插件"></a>Vuex插件</h2><ul><li>实现一个简单的本地化存储插件</li><li>即浏览器刷新之后状态不会变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/plugin/saveInlocal.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (store) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'store初始化了'</span>)</span><br><span class="line">  <span class="keyword">if</span> (localStorage.state) store.replaceState(<span class="built_in">JSON</span>.parse(localStorage.state))</span><br><span class="line">  store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每次 mutation 之后调用</span></span><br><span class="line">    <span class="comment">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'提交了mutation'</span>)</span><br><span class="line">    localStorage.state = <span class="built_in">JSON</span>.stringify(state) </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> saveInLocal <span class="keyword">from</span> <span class="string">'../store/plugin/saveInLocal'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [ saveInLocal ] <span class="comment">// 绑定插件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vuex严格模式"><a href="#Vuex严格模式" class="headerlink" title="Vuex严格模式"></a>Vuex严格模式</h2><ul><li><p><strong>不要在发布环境下启用严格模式！</strong>严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p></li><li><p>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会<strong>抛出错误</strong>。这能保证所有的状态变更都能被调试工具跟踪到。</p></li><li><p>类似于插件，我们可以让构建工具来处理这种情况：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  strict: process.env.NODE_ENV !== <span class="string">'production'</span>  <span class="comment">// 开发环境开启严格模式调试</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vuex双向绑定state的某一状态"><a href="#Vuex双向绑定state的某一状态" class="headerlink" title="Vuex双向绑定state的某一状态"></a>Vuex双向绑定state的某一状态</h2><ul><li>在计算属性的setter中调用mutation来改变state的状态</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"myNameFromState"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; myNameFromState &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  myNameFromState: &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.myName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> (value) &#123;</span><br><span class="line">      <span class="comment">// 在计算属性的setter中调用mutation 来改变state</span></span><br><span class="line">      <span class="keyword">this</span>.CHANGE_STATE_MYNAME(value) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/state.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  myName: <span class="string">'yachan'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/mutations.js</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  CHANGE_STATE_MYNAME (state, val) &#123;</span><br><span class="line">    state.myName = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B62/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-状态管理vuex进阶1</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B61/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B61/</guid>
      <pubDate>Tue, 24 Sep 2019 04:08:47 GMT</pubDate>
      <description>
      
        vue技术栈-状态管理vuex进阶1
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="vuex之module模块中参数详解"><a href="#vuex之module模块中参数详解" class="headerlink" title="vuex之module模块中参数详解"></a>vuex之module模块中参数详解</h2><ul><li>以下以store/module/user.js模块为例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/module/user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  sexName: <span class="string">'yachan mei mei'</span>,</span><br><span class="line">  phoneNumber: <span class="number">1123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  addlover: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.sexName + <span class="string">' I love you'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getCode: <span class="function">(<span class="params">state, getters, rootState, rootGetters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 前两个参数为当前模块的局部的对象，后两个参数为全局的对象</span></span><br><span class="line">    <span class="comment">// 通过全局的对象的点操作就可以得到下面每一层级的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'state :'</span>, state) <span class="comment">// 局部</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getters :'</span>, getters) <span class="comment">// 局部</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getters.addlover :'</span>, getters.addlover) <span class="comment">// 得到当前模块的getters的某一属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rootState :'</span>, rootState) <span class="comment">// 全局state</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rootGetters :'</span>, rootGetters) <span class="comment">// 全局getters</span></span><br><span class="line">    <span class="comment">// console.log('rootGetters.nameOnlyLastLetter :', rootGetters.nameOnlyLastLetter) // 得到rootGetters的某一个属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  CHANGE_PHONE_NUMBER (state, params) &#123;</span><br><span class="line">    state.phoneNumber += params</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 查看actions的各个参数</span></span><br><span class="line">  <span class="comment">// commit最常用 用于提交mutation</span></span><br><span class="line">  someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dispatch :'</span>, dispatch)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'commit :'</span>, commit)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getters :'</span>, getters)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rootGetters :'</span>, rootGetters)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组合 action 看看dispatch的用处</span></span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 参数dispatch可以在另外一个 action 中分发其他的action</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'someOtherMutation'</span>)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'err :'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用 async / await，我们可以如下组合 action</span></span><br><span class="line">  <span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line">  <span class="keyword">async</span> actionC (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> actionD (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionC'</span>) <span class="comment">// 等待 actionC 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">// 使用命名空间</span></span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    <span class="comment">// 还可以嵌套模块</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带命名空间的绑定函数"><a href="#带命名空间的绑定函数" class="headerlink" title="带命名空间的绑定函数"></a>带命名空间的绑定函数</h2><ul><li>1写起来可能比较繁琐</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([</span><br><span class="line">    <span class="string">'some/nested/module/foo'</span>, <span class="comment">// -&gt; this['some/nested/module/foo']()</span></span><br><span class="line">    <span class="string">'some/nested/module/bar'</span> <span class="comment">// -&gt; this['some/nested/module/bar']()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2简化写法 将模块的空间名称字符串作为第一个参数传递给上述函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">'some/nested/module'</span>, &#123;</span><br><span class="line">    a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions(<span class="string">'some/nested/module'</span>, [</span><br><span class="line">    <span class="string">'foo'</span>, <span class="comment">// -&gt; this.foo()</span></span><br><span class="line">    <span class="string">'bar'</span> <span class="comment">// -&gt; this.bar()</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3创建基于某个命名空间的辅助函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mport &#123; createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="string">'some/nested/module'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      a: <span class="function"><span class="params">state</span> =&gt;</span> state.a,</span><br><span class="line">      b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 在 `some/nested/module` 中查找</span></span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'foo'</span>,</span><br><span class="line">      <span class="string">'bar'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态模块注册"><a href="#动态模块注册" class="headerlink" title="动态模块注册"></a>动态模块注册</h2><ul><li>在 store 创建之后，你可以使用 store.registerModule 方法注册模块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"registerModule"</span>&gt;</span>动态注册模块<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; myMoney &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    myMoney: <span class="function"><span class="params">state</span> =&gt;</span> state.myModule ? state.myModule.myMoney : [] <span class="comment">// myModule模块创建完成后获取其状态</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  registerModule () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.registerModule(<span class="string">'myModule'</span>, &#123; <span class="comment">// 动态创建模块</span></span><br><span class="line">      state: &#123;</span><br><span class="line">        myMoney: <span class="number">999999999999</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册嵌套模块 `nested/myModule`</span></span><br><span class="line">store.registerModule([<span class="string">'nested'</span>, <span class="string">'myModule'</span>], &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E8%BF%9B%E9%98%B61/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-状态管理vuex基础</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Tue, 24 Sep 2019 04:00:36 GMT</pubDate>
      <description>
      
        vue技术栈-状态管理vuex基础
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;优美的代码要有好的状态管理，美好的人生也是如此。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="Vuex之state"><a href="#Vuex之state" class="headerlink" title="Vuex之state"></a>Vuex之state</h2><ul><li><strong>mapGetters,mapState是一些属性之类的 要放到computed里面</strong></li></ul><h3 id="全局state的使用"><a href="#全局state的使用" class="headerlink" title="全局state的使用"></a>全局state的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的state.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  myName: <span class="string">'yachan'</span> <span class="comment">// 记录一个值为myName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意一个组件</span></span><br><span class="line">&lt;p&gt;Vuex-state.maName:&#123;&#123; myName &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ 展示一下</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 获取myName</span></span><br><span class="line"><span class="regexp">computed: &#123;</span></span><br><span class="line"><span class="regexp">  myName () &#123;</span></span><br><span class="line"><span class="regexp">    return this.$store.state.myName</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="modules模块之内的state的使用"><a href="#modules模块之内的state的使用" class="headerlink" title="modules模块之内的state的使用"></a>modules模块之内的state的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  sexName: <span class="string">'女神'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123; &#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line">&lt;p&gt;Vuex-state.sexName:&#123;&#123; sexName &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ 展示一下</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import &#123; mapState &#125; from 'vuex' /</span><span class="regexp">/引入mapState</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">computed: &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ sexName () &#123; /</span><span class="regexp">/ 方式一</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/   return this.$store.state.user.sexName</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  ...mapState(&#123; /</span><span class="regexp">/ 方式二</span></span><br><span class="line"><span class="regexp">    myName: state =&gt; state.myName,</span></span><br><span class="line"><span class="regexp">    sexName: state =&gt; state.user.sexName</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="命名空间的使用"><a href="#命名空间的使用" class="headerlink" title="命名空间的使用"></a>命名空间的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名空间的使用</span></span><br><span class="line"><span class="comment">// module/user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  sexName: <span class="string">'女神'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123; &#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">// 命名空间的使用</span></span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">// import &#123; createNamespacedHelpers &#125; from 'vuex'</span></span><br><span class="line"><span class="comment">// const &#123; mapState &#125; = createNamespacedHelpers('user') // 使用命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// computed: &#123;</span></span><br><span class="line"><span class="comment">//   ...mapState(&#123;</span></span><br><span class="line"><span class="comment">//     sexName: state =&gt; state.sexName</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span> </span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">'user'</span>, &#123; <span class="comment">// 这里的第一个参数为模块名</span></span><br><span class="line">    sexName: <span class="function"><span class="params">state</span> =&gt;</span> state.sexName</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vuex之getters"><a href="#Vuex之getters" class="headerlink" title="Vuex之getters"></a>Vuex之getters</h2><ul><li>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如对列表进行过滤并计数</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done).length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>如果有多个组件需要用到此属性，我们要么复制这个函数，或者抽取到一个共享函数然后在多处导入它——无论哪种方式都不是很理想。</strong></p></li><li><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p></li><li><p>Getter 接受 state 作为其第一个参数：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/getters.js</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// 定义一个获取state中的myName的最后一个字母的属性</span></span><br><span class="line">  nameOnlyLastLetter: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123; <span class="comment">// 这里是全局可以使用的方法</span></span><br><span class="line">    <span class="keyword">return</span> state.myName.substr(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在store/index.js中需要引入，并注入Vuex 这里不再演示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line">&lt;p&gt;nameOnlyLastLetter: &#123;&#123; nameOnlyLastLetter &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ 展示</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">...mapGetters(['nameOnlyLastLetter']) /</span><span class="regexp">/ 获取</span></span><br></pre></td></tr></table></figure><h2 id="Vuex之mutations"><a href="#Vuex之mutations" class="headerlink" title="Vuex之mutations"></a>Vuex之mutations</h2><ul><li>mutation 必须同步执行。</li><li><strong>mapActions, mapMutations里面是一些方法 要放到methods里面</strong></li><li>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</li><li>以下为一个通过mutations改变state中的myName的小例子:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/mutations.js</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  CHANGE_STATE_MYNAME (state, val) &#123;</span><br><span class="line">    state.myName = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意的组件中</span></span><br><span class="line"><span class="comment">// 展示省略</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([<span class="string">'CHANGE_STATE_MYNAME'</span>]), <span class="comment">// 拿到CHANGE_STATE_MYNAME这个方法</span></span><br><span class="line">  changeName () &#123;</span><br><span class="line">    <span class="keyword">this</span>.CHANGE_STATE_MYNAME(<span class="string">'liu yachan'</span>) <span class="comment">// 调用这个方法并传值去直接改变state中的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>动态往state中添加一个状态</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  CHANGE_STATE_MYNAME (state, val) &#123;</span><br><span class="line">    state.myName = val</span><br><span class="line">  &#125;,</span><br><span class="line">  ADD_AGE (state) &#123;</span><br><span class="line">    vue.set(state, <span class="string">'age'</span>, <span class="string">'18'</span>) <span class="comment">// 使用vue.set(对象，'属性', '属性值')</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><h2 id="Vuex之Action"><a href="#Vuex之Action" class="headerlink" title="Vuex之Action"></a>Vuex之Action</h2><ul><li>提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/app.js</span></span><br><span class="line"><span class="comment">// 定义一个异步获取数据的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getHobby = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = <span class="literal">null</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!err) resolve(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">info</span>: &#123;<span class="attr">hobby</span>: <span class="string">'sleep'</span>&#125;&#125;)</span><br><span class="line">      <span class="keyword">else</span> reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/actions.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; getHobby &#125; <span class="keyword">from</span> <span class="string">'@/api/app'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// updateHobby (&#123; commit &#125;) &#123;</span></span><br><span class="line">  <span class="comment">//   getHobby().then(res =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     const &#123; info: &#123; hobby &#125; &#125; = res // 解构赋值</span></span><br><span class="line">  <span class="comment">//     commit('UPDATE_HOBBY', hobby) // 在这里提交mutation 并且传值过去</span></span><br><span class="line">  <span class="comment">//   &#125;).catch((err) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('err :', err)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> updateHobby (&#123; commit &#125;) &#123; <span class="comment">// ES7的async也行 更好</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">info</span>: &#123; hobby &#125; &#125; = <span class="keyword">await</span> getHobby()</span><br><span class="line">      commit(<span class="string">'UPDATE_HOBBY'</span>, hobby)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123; <span class="comment">// 一定要捕获错误</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error :'</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/actions.js</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  UPDATE_HOBBY (state, val) &#123;</span><br><span class="line">    state.hobby = val <span class="comment">// 在这里直接修改state的属性hobby</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"font-color"</span>&gt;hobby: &#123;&#123;hobby&#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ 展示</span></span><br><span class="line"><span class="regexp">&lt;button @click="changeHobby"&gt;changeHobby&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">imoprt &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([<span class="string">'hobby'</span>]) <span class="comment">// 获取hobby</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  changeHobby () &#123;</span><br><span class="line">    <span class="keyword">this</span>.updateHobby() <span class="comment">// 这里调用action里的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86vuex%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-状态管理Bus</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Bus/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Bus/</guid>
      <pubDate>Tue, 24 Sep 2019 03:53:10 GMT</pubDate>
      <description>
      
        vue技术栈-状态管理Bus
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;好想再见见你……</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="状态管理之bus总线"><a href="#状态管理之bus总线" class="headerlink" title="状态管理之bus总线"></a>状态管理之bus总线</h1><ul><li>bus即一个空的vue实例</li><li>一个中央事件总线bus,可以作为一个简单的组件传递数据,用于解决跨级和兄弟组件通信问题。</li><li>在要实现通信的组件间都引入bus，分别触发和监听事件并传递值。</li><li>下面是一个兄弟组件间传值的例子：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/bus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bus = <span class="keyword">new</span> Vue() <span class="comment">// 创建bus</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// views/Email.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    this is email 组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点点我"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; bus &#125; <span class="keyword">from</span> <span class="string">'@/lib/bus'</span> <span class="comment">// 引入bus</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    handleClick () &#123;</span></span><br><span class="line"><span class="javascript">      bus.$emit(<span class="string">'on-click'</span>, <span class="string">'hello-tel'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// views/Tel.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    this is tel 组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>value:&#123;&#123; valueFromEmail &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; bus &#125; <span class="keyword">from</span> <span class="string">'@/lib/bus'</span> <span class="comment">// 引入bus</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      valueFromEmail: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  created () &#123; </span></span><br><span class="line"><span class="javascript">    bus.$on(<span class="string">'on-click'</span>, val =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.valueFromEmail = val</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86Bus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-路由进阶2</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/</guid>
      <pubDate>Tue, 17 Sep 2019 06:51:21 GMT</pubDate>
      <description>
      
        vue技术栈-路由进阶2
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ul><li>来自官网</li></ul><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><ul><li>定义路由的时候可以配置 meta 字段：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/about'</span>,</span><br><span class="line">  name: <span class="string">'about'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/About'</span>),</span><br><span class="line">  meta: &#123; <span class="comment">// 路由元信息</span></span><br><span class="line">    title: <span class="string">'about'</span> <span class="comment">//页面的title</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setTitle = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.document.title = title || <span class="string">'admin'</span> <span class="comment">//默认title为admin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 路由元信息存在时调用设置title的方法</span></span><br><span class="line">  to.meta &amp;&amp; setTitle(to.meta.title) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h2><ul><li>单个路由的过渡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一组路由的过渡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 例如：App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'about' &#125;"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">:name</span>=<span class="string">"transitionName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      transitionName: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// watch $route 决定使用哪种过渡</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.name === <span class="string">'home'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'transitionName'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.transitionName = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 进入 */</span></span><br><span class="line"><span class="selector-class">.transitionName-enter</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-enter-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开 */</span></span><br><span class="line"><span class="selector-class">.transitionName-leave</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>&emsp;&emsp;当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。<br>&emsp;&emsp;如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><ul><li>一般用于不常用的页面 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如404页面</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'*'</span>, <span class="comment">// 所有匹配不到的路劲都会走到这里</span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Error_404.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><ul><li><a href="https://router.vuejs.org/zh/guide/advanced/data-fetching.html" target="_blank" rel="noopener">详情见官网</a></li></ul><p>&emsp;&emsp;有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：</p><p>&emsp;&emsp;导航完成之后获取：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示“加载中”之类的指示。</p><p>&emsp;&emsp;导航完成之前获取：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。</p><p>&emsp;&emsp;从技术角度讲，两种方式都不错 —— 就看你想要的用户体验是哪种。</p><h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><p>&emsp;&emsp;使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><p>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition <span class="comment">// 保持原先的滚动位置</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125; <span class="comment">// 想要页面滚到顶部</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-路由进阶1</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/</guid>
      <pubDate>Tue, 17 Sep 2019 06:49:22 GMT</pubDate>
      <description>
      
        vue技术栈-路由进阶1
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="路由进阶"><a href="#路由进阶" class="headerlink" title="路由进阶"></a>路由进阶</h1><h2 id="路由组件传参1"><a href="#路由组件传参1" class="headerlink" title="路由组件传参1"></a>路由组件传参1</h2><ul><li>动态路由</li><li>传入时props为布尔类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js 动态路由</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/argu/:name'</span>,</span><br><span class="line">  props: <span class="literal">true</span> <span class="comment">// 布尔形式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Argue.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'yachan'</span> <span class="comment">// 默认值不见效果</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由组件传参2"><a href="#路由组件传参2" class="headerlink" title="路由组件传参2"></a>路由组件传参2</h2><ul><li>普通路由</li><li>传入时props为对象形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/about'</span>,</span><br><span class="line">  props: &#123; <span class="comment">// 对象形式</span></span><br><span class="line">    food: <span class="string">'banana'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应About.vue的结构同Argu的一样</span></span><br><span class="line"><span class="comment">// props接收一下 模板中展示一下</span></span><br></pre></td></tr></table></figure><h2 id="路由组件传参3"><a href="#路由组件传参3" class="headerlink" title="路由组件传参3"></a>路由组件传参3</h2><ul><li>普通路由</li><li>传入时props为函数形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  props: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="comment">// 函数形式</span></span><br><span class="line">    food: route.query.food <span class="comment">// 例如 http://localhost:8080/#/?food=yachan</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应Home.vue的结构同Argu的一样</span></span><br><span class="line"><span class="comment">// props接收一下 模板中展示一下</span></span><br></pre></td></tr></table></figure><h2 id="H5之history模式"><a href="#H5之history模式" class="headerlink" title="H5之history模式"></a>H5之history模式</h2><ul><li>默认为哈希模式即路劲中有#号</li><li>H5之history模式好看没有#号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>, <span class="comment">// H5 history模式</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js的最后添加</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'*'</span>, <span class="comment">// 所有匹配不到的路劲都会走到这里</span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Error_404.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><ul><li>“导航”表示路由正在发生改变。</li><li>即通过跳转或取消的方式守卫导航。</li><li>例如：路由跳转前做一些验证，比如登录验证，是网站中的普遍需求。</li></ul><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><ul><li>确保要调用 next 方法，否则钩子就不会被 resolved。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HAS_LOGINED = <span class="literal">false</span> <span class="comment">// 模拟 假设还没有登录</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">'login'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (HAS_LOGINED) next()</span><br><span class="line">    <span class="keyword">else</span> next(&#123; <span class="attr">name</span>: <span class="string">'login'</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (HAS_LOGINED) next(&#123; <span class="attr">name</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line">    <span class="keyword">else</span> next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><ul><li>然而和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</li><li>一般用来改变一些跳转前后的样式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局后置钩子</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><ul><li>你可以在路由配置上直接定义 beforeEnter 守卫</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  component: Home,</span><br><span class="line">  beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">'about'</span>) alert(<span class="string">'这是从about页面来的'</span>)</span><br><span class="line">    <span class="keyword">else</span> alert(<span class="string">'这不是从about页面来的'</span>)</span><br><span class="line">    next() <span class="comment">// 一定要调用next 钩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><ul><li>可以在路由组件内直接定义以下路由导航守卫：</li><li>注意 beforeRouteEnter 是支持给 next 传递回调的唯一守卫</li><li>对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了</li><li>beforeRouteLeave这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件内部</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">  <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">  <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不过可以通过回调来解决</span></span><br><span class="line">  <span class="comment">// 次回调在页面被渲染完之后才被调用</span></span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123; <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(vm) <span class="comment">//vm即为当前组件实例 this</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">  <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="keyword">const</span> leave = confirm(<span class="string">'您确定要离开吗？当前编辑的内容还没有被保存'</span>)</span><br><span class="line">  <span class="keyword">if</span> (leave) next() <span class="comment">// 用户点击了确定 则跳转页面</span></span><br><span class="line">  <span class="keyword">else</span> next(<span class="literal">false</span>) <span class="comment">// 页面不会跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-路由基础</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Tue, 17 Sep 2019 06:45:24 GMT</pubDate>
      <description>
      
        vue技术栈-路由基础
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h1><h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link&gt;内部封装了a标签&lt;router-link/&gt; </span><br><span class="line">&lt;router-view/&gt; 该组件为当前路由跳转展示的区域</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/argu/:name'</span>, <span class="comment">//这里注意是 /: </span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Argu'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Argu.vue中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; $route.params.name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器窗口</span></span><br><span class="line">http:<span class="comment">//localhost:8083/#/argu/shulu</span></span><br><span class="line">即可在页面上看到 shulu</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/parent'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Parent'</span>),</span><br><span class="line">  children: [ <span class="comment">//children是一个数组 好久不写都忘记了</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'child'</span>, <span class="comment">//这里直接写路劲的名字即可不要‘/’</span></span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Child'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    i am parent</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    i am child</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue原来的样子注意router-link</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/router-link&gt; |</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/</span>about<span class="string">"&gt;About&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view/&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// App.vue使用命名路由的样子注意router-link</span><br><span class="line">// 首先router.js</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  path: '/',</span><br><span class="line">  name: 'home', //这里添加一个name属性</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'about' &#125;"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/named_view'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Child'</span>),</span><br><span class="line">    email: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Email'</span>),</span><br><span class="line">    tel: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Tel'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;Home&lt;<span class="regexp">/router-link&gt; |</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="&#123; name: 'about' &#125;"&gt;About&lt;/</span>router-link&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-view/</span>&gt; <span class="comment">//渲染默认路由</span></span><br><span class="line">    &lt;router-view name=<span class="string">"email"</span>/&gt; <span class="comment">//渲染指定路由</span></span><br><span class="line">    &lt;router-view name=<span class="string">"tel"</span>/&gt; <span class="comment">//渲染制定路由</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h2 id="编程导航路由"><a href="#编程导航路由" class="headerlink" title="编程导航路由"></a>编程导航路由</h2><ul><li>即js操作路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleClick"</span>&gt;返回上一级&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ @ is an alias to /</span>src</span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.go(<span class="number">-1</span>) <span class="comment">//回退</span></span><br><span class="line">      <span class="comment">// this.$router.back() 回退</span></span><br><span class="line">      <span class="comment">// this.$router.replace() //替换</span></span><br><span class="line">      <span class="comment">// this.$router.push() //往历史记录里面添加一条记录</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><ul><li>重定向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/yachan'</span>,</span><br><span class="line">  <span class="comment">//重定向</span></span><br><span class="line">  redirect: <span class="string">'/'</span> 方式一</span><br><span class="line"></span><br><span class="line">  <span class="comment">// redirect: &#123;</span></span><br><span class="line">  <span class="comment">//   name: 'home' 方式二</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// redirect: to =&gt; '/'  方式三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>别名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  alias: <span class="string">'/home_page'</span>, <span class="comment">//起一个别名 注意前面有 '/'</span></span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-配置篇</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/</guid>
      <pubDate>Tue, 17 Sep 2019 06:39:29 GMT</pubDate>
      <description>
      
        vue技术栈-配置篇
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h1><h2 id="项目最外层文件的配置"><a href="#项目最外层文件的配置" class="headerlink" title="项目最外层文件的配置"></a>项目最外层文件的配置</h2><ul><li>在项目目录下添加 <code>vue.config.js</code>文件并配置为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.join(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BASE_URL = process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"/iview-admin"</span> : <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: BASE_URL,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))<span class="comment">//别名，以后使用时@就代替src目录路劲</span></span><br><span class="line">      .set(<span class="string">"_c"</span>, resolve(<span class="string">"src/components"</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">//打不生成.map文件 速度块一些'</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: <span class="string">'http://localhost:4000'</span> <span class="comment">//跨域配置，</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src目录的文件配置"><a href="#src目录的文件配置" class="headerlink" title="src目录的文件配置"></a>src目录的文件配置</h2><ul><li><p>添加api文件夹</p></li><li><p>添加config文件夹里面为index.js</p></li><li><p>添加directive文件夹里面为index.js</p></li><li><p>添加lib文件夹里面为tool.js(纯工具文件), util.js</p></li><li><p>添加mock文件夹里面为index.js配置如下：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先 npm install mockjs -D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Mock</span><br></pre></td></tr></table></figure><ul><li>添加router文件夹里面为index.js, router.js配置为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'@/views/About'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>添加store文件夹里面为index.js, state.js, actions.js, mutations.js, module文件夹(里面为user.js等)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./module/user'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  modules: &#123; <span class="comment">// 注意这里是modules复数</span></span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-创建篇</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/</guid>
      <pubDate>Tue, 17 Sep 2019 06:33:37 GMT</pubDate>
      <description>
      
        vue技术栈-创建篇
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;vue技术栈开发实战tallkingData数据可视化前端工程师lison课程学习笔记</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="项目初始化创建"><a href="#项目初始化创建" class="headerlink" title="项目初始化创建"></a>项目初始化创建</h2><ul><li><p>经过测试在git bash里面有问题，<code>&gt;</code>这个符号选择配置时切换不起作用，换为cmd窗口之则可以</p></li><li><p>在一个空的文件夹里面执行 <code>vue create 项目名称</code></p></li><li><p>选择手动配置</p></li><li><p>根据提示选择配置比如vuex等</p></li><li><p>配置完成后 回车 即可开始创建一个新的项目</p></li><li><p>下载好依赖之后，根据提示，<code>cd 到项目文件夹</code>，<code>npm run serve</code></p></li><li><p>即可开启一个本地服务，和一个线上服务(局域网内可以访问的)</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue官方编码规范指南</title>
      <link>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/</link>
      <guid>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Tue, 17 Sep 2019 06:27:26 GMT</pubDate>
      <description>
      
        vue官方编码规范指南
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="vue-官方编码风格指南-总结"><a href="#vue-官方编码风格指南-总结" class="headerlink" title="vue 官方编码风格指南  总结"></a>vue 官方编码风格指南  总结</h1><ol><li><p>组件名应多个单词命名避免单个单词名词</p></li><li><p>组件数据 组件的 data 必须是一个函数</p></li><li><p>Prop 定义 Prop 定义应该尽量详细</p></li><li><p>避免 v-if 和 v-for 用在一起在同一个元素</p></li><li><p>组件名中的单词顺序组件名应该以高级别的单词开头，以描述性的修饰词结尾。多级目录的方式在100+组件时才考虑。</p></li><li><p>完整单词的组件名</p></li><li><p>Prop 名大小写 驼峰命名</p></li><li><p>模板中使用中划线的方式</p></li><li><p>多个特性的元素应该分多行撰写，每个特性一行</p></li><li><p>应该把复杂计算属性分割为尽可能多的更简单的属性</p></li><li><p>样式中慎用元素选择器  多用类名</p></li></ol><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>bootstrap</title>
      <link>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/</link>
      <guid>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/</guid>
      <pubDate>Thu, 29 Aug 2019 16:32:57 GMT</pubDate>
      <description>
      
        响应式css框架bootstrap的简单使用
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;努力之后，至少不会留下遗憾。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h1><ul><li>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷</li><li>Bootstrap是基于HTML5和CSS3开发的，它在jQuery的基础上进行了更为个性化和人性化的完善，形成一套自己独有的网站风格，并兼容大部分jQuery插件</li></ul><h2 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h2><ul><li>Bootstrap 不支持 IE 古老的兼容模式。为了让 IE 浏览器运行最新的渲染模式下，建议将此 <code>&lt;meta&gt;</code> 标签加入到你的页面中：</li></ul><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p><h2 id="国产浏览器高速模式"><a href="#国产浏览器高速模式" class="headerlink" title="国产浏览器高速模式"></a>国产浏览器高速模式</h2><ul><li><p>国内浏览器厂商一般都支持兼容模式（即 IE 内核）和高速模式（即 webkit 内核），不幸的是，所有国产浏览器都是默认使用兼容模式，这就造成由于低版本 IE （IE8 及以下）内核让基于 Bootstrap 构建的网站展现效果很糟糕的情况。幸运的是，国内浏览器厂商逐渐意识到了这一点，某些厂商已经开始有所作为了！</p></li><li><p>将下面的 <code>&lt;meta&gt;</code> 标签加入到页面中，可以让部分国产浏览器默认采用高速模式渲染页面：</p></li></ul><p><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code></p><h2 id="bootstrap全局css样式"><a href="#bootstrap全局css样式" class="headerlink" title="bootstrap全局css样式"></a>bootstrap全局css样式</h2><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><ul><li><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。我们提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种 容器类不能互相嵌套。</p></li><li><p><strong>.container</strong> 类用于固定宽度并支持响应式布局的容器。</p></li><li>即当屏幕宽度&lt;768px时使用100%布局，而在768px以上的几个区间，指定几个固定的宽度来布局。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>.container-fluid</strong> 类用于 100% 宽度，占据全部视口（viewport）的容器。</li><li>fluid即流式布局，即100%布局。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bootstrap-基本模板"><a href="#bootstrap-基本模板" class="headerlink" title="bootstrap-基本模板"></a>bootstrap-基本模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--说明页面是html5页面--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页面使用的语言环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定当前页面的字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果是IE，会使用最新的渲染引擎进行渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标准的视口设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap核心样式文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries: 这两个文件的引入是为了支持IE8下面的html5元素和媒体查询：因为在IE8下面默认不支持HTML5和媒体查询，所以需要引入两个插件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// 如果通过file://来查看文件，那么respond.js文件不能正常工作，说明必须在http://形式下访问才有用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html5shiv.min.js：为了在IE8下面支持HTML标签</span></span><br><span class="line"><span class="comment">    respond.min.js：为了在IE8下面支持媒体查询--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt; &lt;!--只有IE9之前才会加载这两个文件  lt:less than--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/html5shiv/html5shiv.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/respond.js/respond.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) bootstrap是依赖jquery的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed  bootstarp核心js文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bootstrap栅格"><a href="#Bootstrap栅格" class="headerlink" title="Bootstrap栅格"></a>Bootstrap栅格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container-fluid</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    background-color: rgb(206, 49, 49);</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bootstrap栅格-列排序"><a href="#bootstrap栅格-列排序" class="headerlink" title="bootstrap栅格-列排序"></a>bootstrap栅格-列排序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-offset-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: yellow;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-push-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-pull-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: purple;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-offset-3"</span>&gt;</span>col-xs-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-push-3"</span>&gt;</span>col-xs-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-pull-3"</span>&gt;</span>col-xs-pull-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">列排序：</span><br><span class="line">这里以超小屏幕为例：</span><br><span class="line">col-xs-offset-3 即争对超小屏幕，元素向右偏移3格，可能会造成后面的元素换行显示，其内部使用margin-left属性实现</span><br><span class="line">col-xs-push-3 即争对超小屏幕，元素向右偏移3格，不会造成后面的元素换行显示，其内部使用position属性实现</span><br><span class="line">col-xs-pull-3 即争对超小屏幕，元素向左偏移3格，不会造成后面的元素换行显示，其内部使用position属性实现</span><br></pre></td></tr></table></figure><h2 id="bootstrap栅格-嵌套列"><a href="#bootstrap栅格-嵌套列" class="headerlink" title="bootstrap栅格-嵌套列"></a>bootstrap栅格-嵌套列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: pink;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-10 "</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>嵌套列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>嵌套列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">嵌套列：一般只需要在某一列中加一个row并添加里面的col, 这时新的列的宽度参照所在row的外面包裹的col</span><br></pre></td></tr></table></figure><h2 id="Bootstrap栅格-响应式"><a href="#Bootstrap栅格-响应式" class="headerlink" title="Bootstrap栅格-响应式"></a>Bootstrap栅格-响应式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container-fluid</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    background-color: rgb(206, 49, 49);</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden-xs col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>hidden-xs<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// .hidden-xs</span><br><span class="line">// .hidden-sm</span><br><span class="line">// .hidden-md</span><br><span class="line">// .hidden-lg</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>响应式基础</title>
      <link>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Thu, 29 Aug 2019 16:32:30 GMT</pubDate>
      <description>
      
        响应式基础知识媒体查询
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;你过得好，那就是我最大的幸福。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h1><h2 id="网页布局方式"><a href="#网页布局方式" class="headerlink" title="网页布局方式"></a>网页布局方式</h2><ol><li>固定宽度布局：为网页设置一个固定的宽度，通常以px做为长度单位，常见于PC端网页。</li><li>流式布局：为网页设置一个相对的宽度，通常以百分比做为长度单位。</li><li>栅格化布局：将网页宽度人为的划分成均等的长度，然后排版布局时则以这些均等的长度做为度量单位，通常利用百分比做为长度单位来划分成均等的长度。</li><li>响应式布局：通过检测设备信息，决定网页布局方式，即用户如果采用不同的设备访问同一个网页，有可能会看到不一样的内容，一般情况下是检测设备屏幕的宽度来实现。</li></ol><ul><li>注：以上几种布局方式并不是独立存在的，实际开发过程中往往是相互结合使用的。</li></ul><p><img src="https://www.z4a.net/images/2019/08/30/responsive.md.png" alt="responsive.md.png"></p><h2 id="响应式布局-媒体查询"><a href="#响应式布局-媒体查询" class="headerlink" title="响应式布局-媒体查询"></a>响应式布局-媒体查询</h2><ul><li>利用媒体查询可以检测到屏幕的尺寸（主要检测宽度），并设置不同的CSS样式，就可以实现响应式的布局。</li><li>响应式布局常用于企业的官网、博客、新闻资讯类型网站，这些网站以浏览内容为主，没有复杂的交互。</li><li>响应式开发的目的就是:一个网站能够兼容多种终端</li><li>响应式开发的原理：媒体查询</li></ul><h3 id="常见媒体类型"><a href="#常见媒体类型" class="headerlink" title="常见媒体类型"></a>常见媒体类型</h3><ul><li>通过查询screen的宽度来指定某个宽度区间的网页布局。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">超小屏幕 (移动设备) w&lt;768px </span><br><span class="line">小屏设备  768 &lt;= w &lt;992</span><br><span class="line">中等屏幕  992 =&lt; w &lt;1200</span><br><span class="line">宽屏设备  1200px以上    w&gt;=1200</span><br></pre></td></tr></table></figure><h3 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h3><ul><li>一般判断最小宽度</li><li>并且由小到大</li><li>后面的样式覆盖前面的样式</li><li>注意and后面空格的添加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果按<span class="selector-tag">max-width</span>来算的话 </span><br><span class="line">就将值从大往小写</span><br></pre></td></tr></table></figure><h3 id="另一种书写方式-更好一些"><a href="#另一种书写方式-更好一些" class="headerlink" title="另一种书写方式-更好一些"></a>另一种书写方式-更好一些</h3><ul><li>判断引入满足媒体条件的css样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"a.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"a.css"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width: 992px) and (max-width: 1200px)"</span> <span class="attr">href</span>=<span class="string">"b.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>m-移动端-插件</title>
      <link>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/</link>
      <guid>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Wed, 28 Aug 2019 06:50:19 GMT</pubDate>
      <description>
      
        移动端-常见插件的使用
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="移动端插件的使用"><a href="#移动端插件的使用" class="headerlink" title="移动端插件的使用"></a>移动端插件的使用</h1><h2 id="swiper-js"><a href="#swiper-js" class="headerlink" title="swiper.js"></a>swiper.js</h2><ul><li>html 结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./uploads/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./uploads/l5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--分页器。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--左箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--右箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常用的配置如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">".swiper-container"</span>, &#123;</span><br><span class="line">  <span class="comment">// autoplay: true,</span></span><br><span class="line">  speed: <span class="number">1000</span>, <span class="comment">//轮播速度</span></span><br><span class="line">  autoplay: &#123;</span><br><span class="line">    disableOnInteraction: <span class="literal">false</span> <span class="comment">//鼠标操作后重新开启自动轮播</span></span><br><span class="line">  &#125;,</span><br><span class="line">  loop: <span class="literal">true</span>, <span class="comment">//轮播图片循环</span></span><br><span class="line">  grabCursor: <span class="literal">true</span>, <span class="comment">//鼠标操作形状</span></span><br><span class="line">  effect: <span class="string">"cube"</span>, <span class="comment">//3D旋转效果</span></span><br><span class="line">  cubeEffect: &#123;</span><br><span class="line">    slideShadows: <span class="literal">true</span>,</span><br><span class="line">    shadow: <span class="literal">true</span>,</span><br><span class="line">    shadowOffset: <span class="number">50</span>, <span class="comment">//阴影距离</span></span><br><span class="line">    shadowScale: <span class="number">0.8</span> <span class="comment">//阴影缩放比例</span></span><br><span class="line">  &#125;,</span><br><span class="line">  pagination: &#123;</span><br><span class="line">    <span class="comment">//分页 即小点点</span></span><br><span class="line">    el: <span class="string">".swiper-pagination"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  navigation: &#123;</span><br><span class="line">    <span class="comment">//左右按钮</span></span><br><span class="line">    nextEl: <span class="string">".swiper-button-next"</span>,</span><br><span class="line">    prevEl: <span class="string">".swiper-button-prev"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="iscroll-js"><a href="#iscroll-js" class="headerlink" title="iscroll.js"></a>iscroll.js</h2><ul><li>为滚动起容器增加 position:relative 或者 absolute 样式。</li><li>容器需要超出隐藏</li><li>html 结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常见配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在文档加载完成之后</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#wrapper"</span>, &#123;</span><br><span class="line">    mouseWheel: <span class="literal">true</span>, <span class="comment">// 响应鼠标中建</span></span><br><span class="line">    scrollbars: <span class="literal">true</span>, <span class="comment">// 显示滚动条</span></span><br><span class="line">    interactiveScrollbars: <span class="literal">true</span> <span class="comment">// 可拖动的滚动条</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollTo(x, y, time, easing) 滚动到指定的位置</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollTo(<span class="number">0</span>, <span class="number">-100</span>, <span class="number">500</span>, IScroll.utils.ease.elastic);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollBy(x, y, time, easing) 可以传递X和Y的值从当前位置进行滚动</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollBy(<span class="number">0</span>, <span class="number">-200</span>, <span class="number">1000</span>, IScroll.utils.ease.bounce);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollToElement(el, time, offsetX, offsetY, easing) //滚动到指定元素的左上角位置。</span></span><br><span class="line">  <span class="comment">// 测试时 无效果啊</span></span><br><span class="line">  <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.querySelector(<span class="string">"#wrapper"</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollToElement(wrapper, <span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>, IScroll.utils.ease.bounce);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1 :"</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="better-scroll-js"><a href="#better-scroll-js" class="headerlink" title="better-scroll.js"></a>better-scroll.js</h2><ul><li>基于iscroll.js</li></ul><h2 id="fastclick-js"><a href="#fastclick-js" class="headerlink" title="fastclick.js"></a>fastclick.js</h2><ul><li>直接拿来用就行了</li><li>touch 有点透效果 click 有延迟效果</li><li>fastclick 则无点透 无延迟</li><li>适用于 PC 和移动端</li><li>这一段代码是从 github 官网上复制来的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"addEventListener"</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">"DOMContentLoaded"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mobile-基础</title>
      <link>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Wed, 21 Aug 2019 04:37:35 GMT</pubDate>
      <description>
      
        移动端基础知识
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;情感宣言——世界上最好的事，莫过于一句欣赏，一句懂得。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><ul><li>移动设备与 PC 设备最大的差异在于屏幕，这主要体现在屏幕尺寸和屏幕分辨率两个方面。</li></ul><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><ul><li>通常我们所指的屏幕尺寸，实际上指的是屏幕对角线的长度（一般用英寸来度量）</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-31-36.png" alt="屏幕尺寸"></p><h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><ul><li>分辨率则一般用像素来度量 px，表示屏幕水平和垂直方向的像素数，例如 1920*1080 指的是屏幕垂直方向和水平方向分别有 1920 和 1080 个像素点而构成。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-33-44.png" alt="屏幕分辨率"></p><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><ul><li>在 Web 开发中可以使用 px（像素）、em、pt（点）、in（英寸）、cm（厘米）做为长度单位，我们最常用 px（像素）做为长度单位。</li><li>我们可以将上述的几种长度单位划分成相对长度单位和绝对长度单位。</li><li>例如：iPhone3G/S 和 iPhone4/S 的屏幕尺寸都为 3.5 英寸（in）但是屏幕分辨率却分别为 480<em>320px、960</em>480px，由此我们可以得出英寸是一个绝对长度单位，而<strong>像素是一个相对长度</strong>单位（像素并没有固定的长度）。</li></ul><h2 id="像素密度-PPI"><a href="#像素密度-PPI" class="headerlink" title="像素密度 PPI"></a>像素密度 PPI</h2><ul><li>利用勾股定理我们可以计算得出 PPI。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/PPI.md.png" alt="像素密度PPI"></p><ul><li>PPI 值的越大说明单位尺寸里所能容纳的像素数量就越多，所能展现画面的品质也就越精细，反之就越粗糙。</li><li>Retina 即视网膜屏幕，苹果注册的命名方式，意指具有较高 PPI（大于 320）的屏幕。</li><li>思考：在屏幕尺寸（英寸）固定时，PPI 和像素大小的关系？</li><li>结论：屏幕尺寸固定时，当 PPI 越大，像素的实际大小就会越小，当 PPI 越小，像素实际大小就越大。(像素是一个相对长度单位)</li></ul><h2 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h2><ul><li><p>随着技术发展，设备不断更新，出现了不同 PPI 的屏幕共存的状态（如 iPhone3G/S 为 163PPI，iPhone4/S 为 326PPI），像素不再是统一的度量单位，这会造成同样尺寸的图像在不同 PPI 设备上的显示大小不一样。</p></li><li><p>假设你设计了一个 163·163 的蓝色方块，在 PPI 为 163 的屏幕上，那这个方块看起来正好就是 1·1 寸大小，在 PPI 为 326 的屏幕上，这个方块看起来就只有 0.5*0.5 寸大小了。</p></li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-37-29.md.png" alt="设备独立像素"></p><ul><li><p>做为用户是不会关心这些细节的，他们只是希望在不同 PPI 的设备上看到的图像内容差不多大小，所以这时我们需要一个新的单位，这个新的单位能够保证图像内容在不同的 PPI 设备看上去大小应该差不多，这就是<strong>独立像素</strong>，在 IOS 设备上叫 PT(Point)，Android 设备上叫 DIP(Device independent Pixel)或 DP。</p></li><li><p>举例说明就是 iPhone 3G（PPI 为 163）1dp = 1px，iPhone 4（PPI 为 326）1dp = 2px。</p></li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-12-26.md.png" alt="Snipaste_2019-08-20_16-12-26.md.png"></p><ul><li><p>我们也不难发现，如果想要 iPhone 3G/S 和 iPhone 4/S 图像内容显示一致，可以把 iPhone 4/S 的尺寸放大一倍（<strong>它们是一个 2 倍(@2x)的关系</strong>），即在 iPhone3G/S 的上尺寸为 44·44px，在 iPhone4/S 上为 88·88px，我们要想实现这样的结果可以设置 44·44dp，这时在 iPhone3G/S 上代表 44·44px，在 iPhone4/S 上代表 88*88px，最终用可以看到的图像差不多大小。</p></li><li><p>dp 同 px 是有一个对应（比例）关系的，这个对应（比例）关系是操作系统确定并处理，目的是确保不同 PPI 屏幕所能显示的图像大小是一致的，通过 window.devicePixelRatio 可以获得该比例值。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取设备独立像素 (像素比)</span></span><br><span class="line"><span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure><ul><li>dp（或 pt）和 px 并不总是绝对的倍数关系（并不总能保证能够整除），而是 window.devicePixelRatio ~= 物理像素/独立像素，然而这其中的细节我们不必关心，因为操作系统会自动帮我们处理好（保证 1dp 在不同的设备上看上去大小差不多）。</li></ul><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><ol><li>物理像素指的是屏幕渲染图像的最小单位，属于屏幕的物理属性，不可人为进行改变，其值大小决定了屏幕渲染图像的品质，我们以上所讨论的都指的是物理像素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕的物理像素尺寸</span></span><br><span class="line"><span class="built_in">window</span>.screen.width;</span><br><span class="line"><span class="built_in">window</span>.screen.height;</span><br></pre></td></tr></table></figure><ol start="2"><li>CSS 像素，与设备无关像素，指的是通过 CSS 进行网页布局时用到的单位，其默认值(PC 端)是和物理像素保持一致的（1 个单位的 CSS 像素等于 1 个单位的物理像素），但是我们可通缩放来改变其大小。</li></ol><ul><li>我们需要理解的是物理像素和 CSS 像素的一个关系，1 个物理像素并不总是等于一个 CSS 像素，通过调整浏览器缩放比例来改变。</li></ul><h2 id="2、3-倍图"><a href="#2、3-倍图" class="headerlink" title="2、3 倍图"></a>2、3 倍图</h2><ul><li>为了在像素密度高的设备上图片能够清晰显示，而不是被放大显示(会模糊)，设计师要针对不同的像素比设计不同像素的图片。</li><li>在设备独立像素为 2 的设备上使用设计师专门为其设计的图片即可。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-39-38.png" alt="2倍图"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li>模拟调试</li><li>真机调试</li></ul><h1 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口 viewport"></a>视口 viewport</h1><ul><li>视口（viewport）是用来约束网站中最顶级块元素 html 的，即它决定了<code>&lt;html&gt;</code>的大小。</li></ul><h3 id="PC-设备-viewport"><a href="#PC-设备-viewport" class="headerlink" title="PC 设备 viewport"></a>PC 设备 viewport</h3><ul><li>在 PC 设备上 viewport 的大小取决于浏览器窗口的大小，以 CSS 像素做为度量单位。</li><li>通过以往 CSS 的知识，我们都能理解<code>&lt;html&gt;</code>的大小是会影响到我们的网页布局的，而 viewport 又决定了<code>&lt;html&gt;</code>的大小，所以 viewport 间接的决定并影响了我们网页的布局。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取viewport的大小</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>在 PC 端，我们通过调整浏览器窗口可以改变 viewport 的大小，为了保证网页布局不发生错乱，需要给元素设定较大固定宽度。</li></ul><h3 id="移动端-viewport"><a href="#移动端-viewport" class="headerlink" title="移动端 viewport"></a>移动端 viewport</h3><ul><li><p>移动设备屏幕普遍都是比较小的，但是大部分的网站又都是为 PC 设备来设计的，要想让移动设备也可以正常显示网页，移动设备不得不做一些处理，通过上面的例子我们可以知道只要 viewport 足够大，就能保证原本为 PC 设备设计的网页也能在移动设备上正常显示，移动设备厂商也的确是这样来处理的。</p></li><li><p>在移动设备上 viewport 不再受限于浏览器的窗口，而是允许开发人员自由设置 viewport 的大小，通常浏览 器会设置一个默认大小的 viewport，为了能够正常显示那些专为 PC 设计的网页，一般这个值的大小会大于屏幕的尺寸。</p></li><li>如下图为常见默认 viewport 大小（仅供参考）</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_17-45-07.md.png" alt="移动端viewport默认"></p><ul><li><p>从图中统计我们得知不同的移动厂商分别设置了一个默认的 viewport 的值，这个值保证大部分网页可以正常在移动设备下浏览。<strong>但是通常会产生缩放和滚动条。</strong></p></li><li><p>产生缩放和滚动条的原因是什么呢？</p></li><li><p>进一步对移动设备的 viewport 进行分析，移动设备上有 2 个 viewport（为了方便讲解人为定义的），分别是 layout viewport 和 ideal viewport。</p></li></ul><h4 id="layout-viewport-布局视口"><a href="#layout-viewport-布局视口" class="headerlink" title="layout viewport 布局视口"></a>layout viewport 布局视口</h4><ul><li>指的是我们可以进行网页布局区域的大小，同样是以 CSS 像素做为计量单位，可以通过下面方式获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取layout viewport</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>通过前面介绍我们知道，如果要保证为 PC 设计的网页在移动设备上布局不发生错乱，移动设备会默认设置一个较大的 viewport（如 IOS 为 980px），这个 viewport 实际指的是 layout viewport。</li></ul><h4 id="ideal-viewport-理想视口"><a href="#ideal-viewport-理想视口" class="headerlink" title="ideal viewport 理想视口"></a>ideal viewport 理想视口</h4><ul><li>设备屏幕区域，（以设备独立像素 PT、DP 做为单位）以 CSS 像素做为计量单位，其大小是不可能被改变，通过下面方式可以获取。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取ideal viewport有两种情形</span></span><br><span class="line"><span class="comment">// 新设备</span></span><br><span class="line"><span class="built_in">window</span>.screen.width;</span><br><span class="line"><span class="built_in">window</span>.screen.height;</span><br><span class="line"><span class="comment">// 老设备</span></span><br><span class="line"><span class="built_in">window</span>.screen.width / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="built_in">window</span>.screen.height / <span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure><ul><li>理解两个 viewport 后, 我们来解释为什么网页会被缩放或出现水平滚动条，其原因在于移动设备浏览器会默认设置一个 layout viewport，并且这个值会大于 ideal viewport，那么我们也知道<strong>ideal viewport 就是屏幕区域</strong>, layout viewport 是我们布局网页的区域，那么最终 layout viewport 是要显示在 ideal viewport 里的，而 layout viewport 大于 ideal viewport 时，于是就出现滚动条了，那么为什么有的移动设备网页内容被缩放了呢？移动设备厂商认为将网页完整显示给用户才最合理，而不该出现滚动条，所以就将 layout viewport 进行了缩放，使其恰好完整显示在 ideal viewport（屏幕）里，其缩放比例为 ideal viewport / layout viewport。</li></ul><h2 id="移动浏览器"><a href="#移动浏览器" class="headerlink" title="移动浏览器"></a>移动浏览器</h2><ul><li>移动端开发主要是针对 IOS 和 Android 两个操作系统平台的，除此之外还有 Windows Phone。</li><li>移动端主要可以分成三大类，系统自带浏览器、应用内置浏览器、第三方浏览器</li></ul><h3 id="系统浏览器："><a href="#系统浏览器：" class="headerlink" title="系统浏览器："></a>系统浏览器：</h3><ul><li>指跟随移动设备操作系统一起安装的浏览器。</li></ul><h3 id="应用内置浏览器："><a href="#应用内置浏览器：" class="headerlink" title="应用内置浏览器："></a>应用内置浏览器：</h3><ul><li>通常在移动设备上都会安装一些 APP 例如 QQ、微信、微博、淘宝等，这些 APP 里往往会内置一个浏览器，我们称这个浏览器为应用内置浏览器（也叫 WebView），这个内置的浏览器一般功能比较简单，并且客户端开发人员可以更改这个浏览器的某些设置，在我们理实的开发里这个浏览器很重要。</li></ul><h3 id="第三方浏览器："><a href="#第三方浏览器：" class="headerlink" title="第三方浏览器："></a>第三方浏览器：</h3><ul><li><p>指安装在手机的浏览器如 FireFox、Chrome、360 等等。</p></li><li><p>在 IOS 和 Android 操作系统上自带浏览器、应用内置浏览器都是基于 Webkit 内核的。</p></li></ul><h1 id="屏幕适配-Viewport-详解"><a href="#屏幕适配-Viewport-详解" class="headerlink" title="屏幕适配 Viewport 详解"></a>屏幕适配 Viewport 详解</h1><ul><li>经过分析我们得到，移动页面最理想的状态是，避免滚动条且不被默认缩放处理，我们可以通过设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;&quot;&gt;</code>来进行控制，并改变浏览器默认的 layout viewport 的宽度。</li></ul><h2 id="viewport-介绍"><a href="#viewport-介绍" class="headerlink" title="viewport 介绍"></a>viewport 介绍</h2><ul><li>是由苹果公司为了解决移动设备浏览器渲染页面而提出的解决方案，后来被其它移动设备厂商采纳，其使用参数如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过设置属性content=""实现，中间以逗号分隔</span></span><br><span class="line"><span class="comment">// 例如&lt;meta name="viewport" content="width=device-width"&gt;</span></span><br><span class="line">width 设置layout viewport 宽度，其取值可为数值或者device-width。</span><br><span class="line"></span><br><span class="line">height 设置layout viewport 高度，其取值可为数值或者device-height</span><br><span class="line"></span><br><span class="line">initital-scale设置页面的初始缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">maximum-scale允许用户的最大缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">minimum-scale允许用户的最小缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">user-scalable是否允许用户进行缩放，值为<span class="string">"no"</span>或<span class="string">"yes"</span>。</span><br><span class="line"></span><br><span class="line">注：device-width 和 device-height就是ideal viewport的宽高</span><br></pre></td></tr></table></figure><h2 id="viewport-控制缩放"><a href="#viewport-控制缩放" class="headerlink" title="viewport 控制缩放"></a>viewport 控制缩放</h2><ol><li>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code>，这时我们发现网页没有被浏览器设置缩放。</li><li>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>，这时我们发现网页也没有被浏览器设设置缩放。</li></ol><ul><li><p>当我们设置 width=device-width，也达到了 initial-scale=1 的效果，得知其实  initial-scale = ideal viewport / layout viewport。</p></li><li><p>两种方式都可以控制缩放，开发中一般同时设置 width=device-width 和 initial-scale=1.0（为了解决一些兼容问题）参见移动前端开发之 viewport 深入理解，即<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p></li></ul><h2 id="viewport-避免滚动"><a href="#viewport-避免滚动" class="headerlink" title="viewport 避免滚动"></a>viewport 避免滚动</h2><ul><li>我们知道，滚动条是  layout viewport  相对于  ideal viewport  的，所以只要设置  layout viewport  小于或等于  ideal viewport，即<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></li><li>盒子宽度设置为百分比的宽度</li></ul><h2 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h2><h3 id="百分比宽度"><a href="#百分比宽度" class="headerlink" title="百分比宽度"></a>百分比宽度</h3><ol><li><p>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p></li><li><p>设置页面宽度为百分比</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">width参照父元素的宽度</span><br><span class="line">height参照父元素的高度</span><br><span class="line">padding参照父元素的宽度</span><br><span class="line">border不支持百分比设置</span><br><span class="line">margin参照父元素的宽度</span><br></pre></td></tr></table></figure><ul><li>我们发现这种方案最容易理解，但是在设置元素高度时有非常大的局限性。</li><li>因为页面的高度是不固定的。</li></ul><h3 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h3><h1 id="移动端触屏事件"><a href="#移动端触屏事件" class="headerlink" title="移动端触屏事件"></a>移动端触屏事件</h1><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touchstart: 手指触摸屏幕时触发;</span><br><span class="line">touchmove: 手指在屏幕上移动时触发;</span><br><span class="line">touchend: 手指离开屏幕时触发;</span><br></pre></td></tr></table></figure><h2 id="TouchEvent-对象"><a href="#TouchEvent-对象" class="headerlink" title="TouchEvent 对象"></a>TouchEvent 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touches: 位于屏幕上的所有手指的列表</span><br><span class="line">targetTouches: 位于该元素上的所有手指的列表</span><br><span class="line">changedTouches：touchstart时包含刚与触摸屏接触的触点，touchend时包含离开触摸屏的触点</span><br><span class="line">注：没有对比出touches同targetTouches的差异，推荐使用targetTouches</span><br></pre></td></tr></table></figure><h2 id="Touch-对象"><a href="#Touch-对象" class="headerlink" title="Touch 对象"></a>Touch 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clientX/Y手指相对于layout viewport的水平/垂直像素距离</span><br><span class="line">pageX/Y手指相对于layout viewport的水平/垂直像素距离（含滚动）</span><br><span class="line">screenX/Y手指相对于layout viewport的水平/垂直像素距离（含滚动）</span><br><span class="line">（未设置viewport时，screenX/Y在Webview中不正确）</span><br><span class="line">target手指最初与屏幕接触时的元素</span><br><span class="line">移动开发通常会设置<span class="string">`&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;`</span>，这时这三对坐标值是完全一样的。</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ES7</title>
      <link>https://shulu520.com/js-ES7/js-ES7/</link>
      <guid>https://shulu520.com/js-ES7/js-ES7/</guid>
      <pubDate>Sat, 17 Aug 2019 08:38:18 GMT</pubDate>
      <description>
      
        ES7重点知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;大家都有不一样的难过和快乐 只是我们总是下意识 拿自己的劣势去和别人的优势来比</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><h2 id="ES7之异步async-await函数"><a href="#ES7之异步async-await函数" class="headerlink" title="ES7之异步async/await函数"></a>ES7之异步async/await函数</h2><ul><li>概念：真正意义上去解决异步回调的问题，同步流程表达异步操作</li><li>本质：Generator的语法糖</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> 异步操作;</span><br><span class="line">  <span class="keyword">await</span> 异步操作；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"><span class="number">1</span>、不需要像Generator去调用next方法，遇到<span class="keyword">await</span>等待，当前的异步操作完成就往下执行</span><br><span class="line"><span class="number">2</span>、返回的总是<span class="built_in">Promise</span>对象，可以用then方法进行下一步操作</span><br><span class="line"><span class="number">3</span>、<span class="keyword">async</span>取代Generator函数的星号*，<span class="keyword">await</span>取代Generator的<span class="keyword">yield</span></span><br><span class="line"><span class="number">4</span>、语意上更为明确，使用简单，经临床验证，暂时没有任何副作用</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendXhr</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url,</span><br><span class="line">      type: <span class="string">'GET'</span>,</span><br><span class="line">      success: <span class="function"><span class="params">data</span> =&gt;</span> resolve(data),</span><br><span class="line">      error: <span class="function"><span class="params">error</span> =&gt;</span> resolve(<span class="literal">false</span>) <span class="comment">//技巧 小聪明 </span></span><br><span class="line">      <span class="comment">// 若调用reject的话 报错用户看不到</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getNews</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> sendXhr(url);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    alert(<span class="string">'暂时没有新闻推送...'</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> sendXhr(url);</span><br><span class="line">  <span class="built_in">console</span>.log(result, result2);</span><br><span class="line">&#125;</span><br><span class="line">getNews(<span class="string">'http://localhost:3000/news?id=2'</span>)</span><br></pre></td></tr></table></figure><h2 id="ES7扩展指数运算符"><a href="#ES7扩展指数运算符" class="headerlink" title="ES7扩展指数运算符**"></a>ES7扩展指数运算符**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指数运算符: **</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num :'</span>, num);<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h2 id="ES7数组扩展includes"><a href="#ES7数组扩展includes" class="headerlink" title="ES7数组扩展includes"></a>ES7数组扩展includes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.includes(value) : 判断数组中是否包含指定value</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'abc'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'a'</span>))<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'abc'</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-ES7/js-ES7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ES6</title>
      <link>https://shulu520.com/js-ES6/js-ES6/</link>
      <guid>https://shulu520.com/js-ES6/js-ES6/</guid>
      <pubDate>Sat, 17 Aug 2019 08:38:04 GMT</pubDate>
      <description>
      
        ES6重点知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;我想任何人 在经历时 都不会知道自己正在经历 生平中最幸福的时刻 我们生活中那些被遗漏的美好时光</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="ES6-2个新的关键字"><a href="#ES6-2个新的关键字" class="headerlink" title="ES6-2个新的关键字"></a>ES6-2个新的关键字</h2><ul><li>let/const</li><li>块作用域</li><li>没有变量提升</li><li>不能重复定义</li><li>值不可变 const</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a :'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="number">4</span></span><br><span class="line">B = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'B :'</span>, B) <span class="comment">//报错 常量值不可变</span></span><br></pre></td></tr></table></figure><h2 id="ES6-变量的解构赋值"><a href="#ES6-变量的解构赋值" class="headerlink" title="ES6-变量的解构赋值"></a>ES6-变量的解构赋值</h2><ul><li>将包含多个数据的对象(数组)一次赋值给多个变量</li><li>数据源: 对象/数组</li><li>目标: {a, b}/[a, b]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解构 左右两边的数据结构必须一致</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'yachan'</span>,</span><br><span class="line">  sex: <span class="string">'女神'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, sex&#125; = obj  </span><br><span class="line"><span class="comment">// 对象的解构赋值是按照属性名查找并赋值的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name, sex :'</span>, name, sex);<span class="comment">//name, sex : yachan 女神</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">&#123; name, sex &#125;</span>) </span>&#123;<span class="comment">//参数为对象时 形参也可以解构赋值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name, sex :'</span>, name, sex)</span><br><span class="line">&#125;</span><br><span class="line">foo(obj)<span class="comment">//name, sex : yachan 女神</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b] = arr</span><br><span class="line"><span class="keyword">let</span> [,, c, d] = arr <span class="comment">//可以用 ','占位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的解构赋值是按下标进行匹配的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a, b :'</span>, a, b)<span class="comment">//a, b : 1 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c, d :'</span>, c, d);<span class="comment">//c, d : 34 4</span></span><br></pre></td></tr></table></figure><h2 id="ES6-各种数据类型的扩展"><a href="#ES6-各种数据类型的扩展" class="headerlink" title="ES6-各种数据类型的扩展"></a>ES6-各种数据类型的扩展</h2><h3 id="ES6-数值Number的扩展"><a href="#ES6-数值Number的扩展" class="headerlink" title="ES6-数值Number的扩展"></a>ES6-数值Number的扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 二进制与八进制数值表示法: 二进制用<span class="number">0</span>b, 八进制用<span class="number">0</span>o</span><br><span class="line"><span class="number">2.</span> <span class="built_in">Number</span>.isFinite(i) : 判断是否是有限大的数</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Number</span>.isNaN(i) : 判断是否是<span class="literal">NaN</span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Number</span>.isInteger(i) : 判断是否是整数</span><br><span class="line"><span class="number">5.</span> <span class="built_in">Number</span>.parseInt(str) : 将字符串转换为对应的数值</span><br><span class="line"><span class="number">6.</span> <span class="built_in">Math</span>.trunc(i) : 直接去除小数部分</span><br></pre></td></tr></table></figure><h3 id="ES6-字符串String的扩展"><a href="#ES6-字符串String的扩展" class="headerlink" title="ES6-字符串String的扩展"></a>ES6-字符串String的扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">模板字符串</span><br><span class="line">  作用: 简化字符串的拼接</span><br><span class="line">  变化的部分使用$&#123;xxx&#125;定义</span><br><span class="line"></span><br><span class="line">includes(str) : 判断是否包含指定的字符串</span><br><span class="line">startsWith(str) : 判断是否以指定字符串开头</span><br><span class="line">endsWith(str) : 判断是否以指定字符串结尾</span><br><span class="line">repeat(count) : 重复指定次数</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'yachanshulu'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'shu'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'ya'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'lu'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> str2 = str.repeat(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str2)<span class="comment">//yachanshuluyachanshulu</span></span><br></pre></td></tr></table></figure><h3 id="ES6-对象Object的扩展"><a href="#ES6-对象Object的扩展" class="headerlink" title="ES6-对象Object的扩展"></a>ES6-对象Object的扩展</h3><ul><li>简化的对象写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    getName () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;,</span><br><span class="line">    setName (name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将源对象的属性复制到目标对象上 混入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2..)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'shulu'</span>,</span><br><span class="line">  sex: <span class="string">'女神'</span>, </span><br><span class="line">  getName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">age</span>: <span class="string">'shulu'</span>, <span class="attr">love</span>: <span class="string">'男神'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(o, obj1, obj2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o :'</span>, o)</span><br><span class="line"><span class="comment">//o : &#123;name: "shulu", sex: "女神", getName: ƒ, age: "shulu", love: "男神"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>判断2个数据 是否完全相等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(v1, v2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.is()方法底层是按照字符串去判断的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Object.is(NaN, NaN) :'</span>, <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));</span><br><span class="line"><span class="comment">// Object.is(NaN, NaN) : true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Object.is(0, -0) :'</span>, <span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>));</span><br><span class="line"><span class="comment">// Object.is(0, -0) : false</span></span><br></pre></td></tr></table></figure><ul><li>隐式原型属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__proto__ 属性 ES6规定可以直接修改这个属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;,</span><br><span class="line">    obj2 = &#123;<span class="attr">money</span>: <span class="number">99999999</span>&#125;</span><br><span class="line"></span><br><span class="line">obj1.__proto__ = obj2 让obj2做obj1的原型对象</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1 :'</span>, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1.money :'</span>, obj1.money);</span><br><span class="line"><span class="comment">// obj1 : &#123;&#125;</span></span><br><span class="line"><span class="comment">// obj1.money : 99999999</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### ES6-数组的扩展</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">将伪数组对象或可遍历对象转换为真数组</span><br><span class="line"><span class="built_in">Array</span>.from(v) </span><br><span class="line"></span><br><span class="line">将一系列值转换成数组</span><br><span class="line"><span class="built_in">Array</span>.of(v1, v2, v3) </span><br><span class="line"></span><br><span class="line">找出第一个满足条件返回<span class="literal">true</span>的元素</span><br><span class="line">find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line">找出第一个满足条件返回<span class="literal">true</span>的元素下标</span><br><span class="line">findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="ES6-函数的扩展"><a href="#ES6-函数的扩展" class="headerlink" title="ES6-函数的扩展"></a>ES6-函数的扩展</h3><ul><li>箭头函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用来定义匿名函数</span><br><span class="line"></span><br><span class="line">基本语法:</span><br><span class="line">  没有参数: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'xxxx'</span>)</span><br><span class="line">  一个参数: <span class="function"><span class="params">i</span> =&gt;</span> i+<span class="number">2</span></span><br><span class="line">  大于一个参数: <span class="function">(<span class="params">i,j</span>) =&gt;</span> i+j</span><br><span class="line">  函数体不用大括号: 函数体只有一条语句或表达式时 默认返回结果</span><br><span class="line">  函数体如果有多个语句, 需要用&#123;&#125;包围</span><br><span class="line"></span><br><span class="line">使用场景: 多用来定义回调函数</span><br></pre></td></tr></table></figure><p><strong>箭头函数的this：</strong><br>箭头函数没有自己的this<br>箭头函数的this是定义的时候决定的</p><p>如何判断箭头函数this是谁：看外层是否有函数<br> 有的话就 是外层函数的this 而外层函数的this由调用者决定<br> 没有的话 就是window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'yachan'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  getName: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//箭头函数</span></span><br><span class="line">    btn1.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//箭头函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName()<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">obj.getAge = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//与getName的定义一样</span></span><br><span class="line">  btn2.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge()<span class="comment">//window</span></span><br></pre></td></tr></table></figure><ul><li>形参的默认值 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义形参时指定其默认的值</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span> (<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'x, y :'</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line">getPoint()<span class="comment">//x, y : 0 0</span></span><br><span class="line">getPoint(<span class="number">22</span>, <span class="number">33</span>) <span class="comment">//x, y : 22 33</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rest(可变)参数</span></span><br><span class="line"><span class="comment">//通过形参左侧的...来表达, 取代arguments的使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span> (<span class="params">a, ...value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumber(<span class="number">1</span>, <span class="number">2</span>, <span class="number">67</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符(...) 可以分解出数组或对象中的数据</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2]</span><br><span class="line"></span><br><span class="line">arr3.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x - y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3);<span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="ES6深度克隆deepClone"><a href="#ES6深度克隆deepClone" class="headerlink" title="ES6深度克隆deepClone"></a>ES6深度克隆deepClone</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkedType</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">  <span class="comment">// Object.prototype.toString.call() 返回值[Object xxx]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度克隆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result, <span class="comment">//最终返回值 </span></span><br><span class="line">  targetType = checkedType(target) <span class="comment">//要克隆的目标对象的数据类型</span></span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="string">'Object'</span>) &#123;</span><br><span class="line">    result = &#123;&#125; <span class="comment">//初始化为一个空对象</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">'Array'</span>) &#123;</span><br><span class="line">    result = [] <span class="comment">//初始化为一个空数组</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 能走到这里说明要克隆的对象的数据类型为对象或者数组</span></span><br><span class="line">  <span class="comment">// 遍历目标对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="comment">// 枚举对象则i为key</span></span><br><span class="line">    <span class="comment">// 枚举数组则i为index</span></span><br><span class="line">    <span class="keyword">if</span> (target.hasOwnProperty(i)) &#123;<span class="comment">//目标对象自身的属性 不要原型对象上的属性</span></span><br><span class="line">      <span class="keyword">let</span> value = target[i]</span><br><span class="line">      <span class="keyword">if</span> (checkedType(value) === <span class="string">'Object'</span> || <span class="string">'Array'</span>) &#123;</span><br><span class="line">        result[i] = deepClone(value)<span class="comment">//递归方法</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, &#123;<span class="attr">name</span>: <span class="string">'shulu'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, [<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">sex</span>: <span class="string">'女神'</span>&#125;]]</span><br><span class="line"><span class="keyword">let</span> cloneArr = deepClone(arr)</span><br><span class="line"></span><br><span class="line">cloneArr[<span class="number">1</span>].name = <span class="string">'yachan'</span></span><br><span class="line">cloneArr[<span class="number">2</span>][<span class="number">2</span>].sex = <span class="string">'男生'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'cloneArr :'</span>, cloneArr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr :'</span>, arr);</span><br><span class="line"><span class="comment">// 结果互不干扰</span></span><br></pre></td></tr></table></figure><h2 id="ES6之Symbol一种新的原始数据类型"><a href="#ES6之Symbol一种新的原始数据类型" class="headerlink" title="ES6之Symbol一种新的原始数据类型"></a>ES6之Symbol一种新的原始数据类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ES5中对象的属性名都是字符串，容易造成重名，污染环境</span><br><span class="line"><span class="built_in">Symbol</span>：</span><br><span class="line">概念：ES6中的添加了一种原始数据类型symbol(已有的原始数据类型：<span class="built_in">String</span>, <span class="built_in">Number</span>, boolean, <span class="literal">null</span>, <span class="literal">undefined</span>, 对象)</span><br><span class="line">特点：</span><br><span class="line">  <span class="number">1</span>、<span class="built_in">Symbol</span>属性对应的值是唯一的，解决命名冲突问题</span><br><span class="line">  <span class="number">2</span>、<span class="built_in">Symbol</span>值不能与其他数据进行计算，包括同字符串拼串</span><br><span class="line">  <span class="number">3</span>、<span class="keyword">for</span> <span class="keyword">in</span>, <span class="keyword">for</span> <span class="keyword">of</span>遍历时不会遍历symbol属性。</span><br><span class="line">使用：</span><br><span class="line">  <span class="number">1</span>、调用<span class="built_in">Symbol</span>函数得到symbol值</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[symbol] = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>、传参标识</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="built_in">Symbol</span>(<span class="string">'one'</span>);</span><br><span class="line">    <span class="keyword">let</span> symbol2 = <span class="built_in">Symbol</span>(<span class="string">'two'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(symbol);<span class="comment">// Symbol('one')</span></span><br><span class="line">    <span class="built_in">console</span>.log(symbol2);<span class="comment">// Symbol('two')</span></span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>、内置<span class="built_in">Symbol</span>值</span><br><span class="line">    * 除了定义自己使用的<span class="built_in">Symbol</span>值以外，ES6还提供了<span class="number">11</span>个内置的<span class="built_in">Symbol</span>值，指向语言内部使用的方法。</span><br><span class="line">    - <span class="built_in">Symbol</span>.iterator</span><br><span class="line">      * 对象的<span class="built_in">Symbol</span>.iterator属性，指向该对象的默认遍历器方法(后边讲)</span><br></pre></td></tr></table></figure><h2 id="ES6之set-Map容器结构"><a href="#ES6之set-Map容器结构" class="headerlink" title="ES6之set/Map容器结构"></a>ES6之set/Map容器结构</h2><ul><li>容器: 能保存多个数据的对象, 同时必须具备操作内部数据的方法</li><li><p>任意对象都可以作为容器使用, 但有的对象不太适合作为容器使用(如函数)</p></li><li><p><strong>Set的特点</strong>: 保存多个value, value是不重复 ====&gt;数组元素去重</p></li><li><strong>Map的特点</strong>: 保存多个key–value, key是不重复, value是可以重复的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">API</span><br><span class="line">  <span class="built_in">Set</span>()/<span class="built_in">Set</span>(arr) <span class="comment">//arr是一维数组</span></span><br><span class="line">  add(value)</span><br><span class="line">  <span class="keyword">delete</span>(value)</span><br><span class="line">  clear();</span><br><span class="line">  has(value)</span><br><span class="line">  size</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Map</span>()/<span class="built_in">Map</span>(arr) <span class="comment">//arr是二维数组</span></span><br><span class="line">  <span class="keyword">set</span>(key, value)</span><br><span class="line">  delete(key)</span><br><span class="line">  clear()</span><br><span class="line">  has(key)</span><br><span class="line">  size</span><br></pre></td></tr></table></figure><ul><li>set</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 2, 1, 3])</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>) //Set(3) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set.size :'</span>, <span class="keyword">set</span>.size);</span><br><span class="line">console.log('<span class="keyword">set</span>.has(2) :', <span class="keyword">set</span>.has(2));//true</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.add(8)</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//Set(4) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.delete(1)</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.clear()</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>map </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//map里面放二维数组 内数组的第一项为key 第二项为value</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>, <span class="string">'shulu'</span>], [<span class="string">'age'</span>, <span class="number">18</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map)<span class="comment">//Map(2) &#123;"name" =&gt; "shulu", "age" =&gt; 18&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map.size :'</span>, map.size); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="string">'sex'</span>, <span class="string">'女神'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//Map(3) &#123;"name" =&gt; "shulu", "age" =&gt; 18, "sex" =&gt; "女神"&#125;</span></span><br><span class="line"></span><br><span class="line">map.delete(<span class="string">'age'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//&#123;"name" =&gt; "shulu", "sex" =&gt; "女神"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">'name'</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">map.clear()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6异步1之Promise"><a href="#ES6异步1之Promise" class="headerlink" title="ES6异步1之Promise"></a>ES6异步1之Promise</h2><ul><li>解决<code>回调地狱</code>(回调函数的层层嵌套, 编码是不断向右扩展, 阅读性很差)</li><li>能以同步编码的方式实现异步调用</li><li>在es6之前原生的js中是没这种实现的, 一些第三方框架(jQuery)实现了promise</li><li>ES6中定义实现API: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建promise对象</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="comment">// 做异步的操作 </span></span><br><span class="line">  <span class="keyword">if</span>(成功) &#123; <span class="comment">// 调用成功的回调</span></span><br><span class="line">    resolve(result); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调用失败的回调</span></span><br><span class="line">    reject(errorMsg); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 2. 调用promise对象的then()</span></span><br><span class="line">promise.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;, (errorMsg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(errorMsg)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ES6之iterator遍历器指针对象"><a href="#ES6之iterator遍历器指针对象" class="headerlink" title="ES6之iterator遍历器指针对象"></a>ES6之iterator遍历器指针对象</h2><ul><li><p>概念： iterator是一种接口机制，为各种不同的数据结构提供统一的访问机制</p></li><li><p>作用：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为各种数据结构，提供一个统一的、简便的访问接口；</span><br><span class="line">使得数据结构的成员能够按某种次序排列</span><br><span class="line">ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。</span><br></pre></td></tr></table></figure><ul><li>工作原理：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建一个指针对象，指向数据结构的起始位置。</span><br><span class="line">第一次调用next方法，指针自动指向数据结构的第一个成员</span><br><span class="line">接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员</span><br><span class="line">每调用next方法返回的是一个包含value和done的对象，&#123;value: 当前成员的值,done: 布尔值&#125;</span><br><span class="line">  value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。</span><br><span class="line">  当遍历结束的时候返回的value值是undefined，done值为true</span><br></pre></td></tr></table></figure><ul><li>原生具备iterator接口的数据(可用for of遍历)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Array</span></span><br><span class="line"><span class="number">2</span>、<span class="built_in">arguments</span></span><br><span class="line"><span class="number">3</span>、<span class="keyword">set</span>容器</span><br><span class="line">4、map容器</span><br><span class="line">5、String</span><br><span class="line">……</span><br></pre></td></tr></table></figure><ul><li>值得注意的是普通对象{}是不具有iterator接口的 即无法用for..of 来遍历</li></ul><ul><li>模拟实现iterator指针对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">自定义iterator生成指针对象</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex&lt;arr.length?&#123;<span class="attr">value</span>: arr[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125;:&#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iteratorObj = mockIterator(arr);</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 4, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6之for–of循环"><a href="#ES6之for–of循环" class="headerlink" title="ES6之for–of循环"></a>ES6之for–of循环</h2><ul><li>可以遍历任何容器 set/map等</li><li>数组/类数组</li><li>对象 (这个有点不太会)</li><li>伪/类对象</li><li>字符串</li><li>可迭代的对象</li><li>arguments</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'s2wn'</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'ss'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历arguments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forArguments</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">forArguments(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2 </span></span><br><span class="line"><span class="comment">//3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历类数组</span></span><br><span class="line"><span class="keyword">let</span> btns = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'btn'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> btns) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'btns :'</span>, btns);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历set容器</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 3])</span><br><span class="line">for (const i of <span class="keyword">set</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i :'</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历map容器</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>, <span class="string">'shulu'</span>], [<span class="string">'age'</span>, <span class="number">18</span>], [<span class="string">'sex'</span>, <span class="string">'女神'</span>]])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i :'</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["name", "shulu"]</span></span><br><span class="line"><span class="comment">// ["age", 18]</span></span><br><span class="line"><span class="comment">// ["sex", "女神"]</span></span><br></pre></td></tr></table></figure><h2 id="ES6异步2之Generator函数"><a href="#ES6异步2之Generator函数" class="headerlink" title="ES6异步2之Generator函数"></a>ES6异步2之Generator函数</h2><ul><li>相比promise函数解决回调地狱的方法要好一些 </li><li>调用Generator函数会返回一个遍历器对象即iterator</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">  <span class="number">1</span>、ES6提供的解决异步编程的方案之一</span><br><span class="line">  <span class="number">2</span>、Generator函数是一个状态机，内部封装了不同状态的数据，</span><br><span class="line">  <span class="number">3</span>、用来生成遍历器对象</span><br><span class="line">  <span class="number">4</span>、可暂停函数(惰性求值), <span class="keyword">yield</span>可暂停，next方法可启动。每次返回的是<span class="keyword">yield</span>后的表达式结果</span><br><span class="line">特点：</span><br><span class="line">  <span class="number">1</span>、<span class="function"><span class="keyword">function</span> 与函数名之间有一个星号</span></span><br><span class="line"><span class="function">  2、内部用<span class="title">yield</span>表达式来定义不同的状态</span></span><br><span class="line"><span class="function">  例如：</span></span><br><span class="line"><span class="function">    <span class="title">function</span>* <span class="title">generatorExample</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">yield</span> <span class="string">'hello'</span>;  <span class="comment">// 状态值为hello</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="string">'generator'</span>; <span class="comment">// 状态值为generator</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>、generator函数返回的是指针对象(即前面讲的iterator)，而不会执行函数内部逻辑</span><br><span class="line">  <span class="number">4</span>、调用next方法函数内部逻辑开始执行，遇到<span class="keyword">yield</span>表达式停止，返回&#123;<span class="attr">value</span>: <span class="keyword">yield</span>后的表达式结果/<span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">false</span>/<span class="literal">true</span>&#125;</span><br><span class="line">  <span class="number">5</span>、再次调用next方法会从上一次停止时的<span class="keyword">yield</span>处开始，直到最后</span><br><span class="line">  <span class="number">6</span>、<span class="keyword">yield</span>语句返回结果通常为<span class="literal">undefined</span>， 当调用next方法时传参内容会作为启动时<span class="keyword">yield</span>语句的返回值。</span><br></pre></td></tr></table></figure><h2 id="ES6之class类"><a href="#ES6之class类" class="headerlink" title="ES6之class类"></a>ES6之class类</h2><ul><li>用 class 定义类</li><li>用 constructor() 定义构造方法(相当于构造函数)</li><li>一般方法: xxx () {} 必须这么写 </li><li>用extends来定义子类 继承父类</li><li>用super()来调用父类的构造方法</li><li>子类方法自定义: 将从父类中继承来的方法重新实现一遍</li><li>js中没有方法重载(方法名相同, 但参数不同)的语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类的构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name </span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类的一般方法</span></span><br><span class="line">  showInfo () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">starPerson</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name, age, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age)<span class="comment">//调用父类的构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.salary = salary</span><br><span class="line">  &#125;</span><br><span class="line">  showSalary () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my salary is <span class="subst">$&#123;<span class="keyword">this</span>.salary&#125;</span> ￥`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> starPerson(<span class="string">'yachan'</span>, <span class="number">18</span>, <span class="number">9999999999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'star :'</span>, star);</span><br><span class="line">star.showInfo()</span><br><span class="line">star.showSalary()</span><br></pre></td></tr></table></figure><h2 id="ES6之模块化"><a href="#ES6之模块化" class="headerlink" title="ES6之模块化"></a>ES6之模块化</h2><ul><li>看js模块化部分</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-ES6/js-ES6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

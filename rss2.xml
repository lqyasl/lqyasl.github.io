<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Tue, 16 Jul 2019 15:00:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>css3-new-ui</title>
      <link>https://shulu520.com/css3/css3-new-ui/</link>
      <guid>https://shulu520.com/css3/css3-new-ui/</guid>
      <pubDate>Tue, 16 Jul 2019 14:46:52 GMT</pubDate>
      <description>
      
        硅谷css3-新的UI方案-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="新增文本样式"><a href="#新增文本样式" class="headerlink" title="新增文本样式"></a>新增文本样式</h2><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><ul><li>透明度，性能高</li><li>值为0~1</li></ul><h3 id="rgba"><a href="#rgba" class="headerlink" title="rgba"></a>rgba</h3><ul><li>rgba(0, 0, 0, .5)</li><li>颜色表示，a表示透明度</li><li>可以实现以前不能实现的样式—背景透明文字不透明</li></ul><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><ul><li>text-shadow: 1px 1px 1px pink, 1px 1px 1px orange;</li><li>参数为 x、y轴方向偏移阴影，以及模糊值，颜色</li><li>可以叠加阴影，第一个在最上面</li><li>浮雕文字</li></ul><h3 id="元素模糊"><a href="#元素模糊" class="headerlink" title="元素模糊"></a>元素模糊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">  filter: blur(5px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模糊背景</li></ul><h3 id="文字描边"><a href="#文字描边" class="headerlink" title="文字描边"></a>文字描边</h3><ul><li>只有webkit内核才支持：-webkit-text-stroke（准确的来说不能算是css3的东西，但需要大家知道）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  -webkit-text-stroke: pink 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h3><ul><li>direction:控制文字的方向</li><li>一定要配合unicode-bidi:bidi-override;来使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  direction: rtl; 从右向左</span><br><span class="line">  unicode-bidi: bidi-override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="溢出显示一个省略号…"><a href="#溢出显示一个省略号…" class="headerlink" title="溢出显示一个省略号…"></a>溢出显示一个省略号…</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 前提是这个元素不是靠内容撑开的</span><br><span class="line">div&#123;</span><br><span class="line">  white-space: nowrap; 首先不换行</span><br><span class="line">  overflow: hidden; 溢出隐藏</span><br><span class="line">  text-overflow: ellipsis; 文本显示省略号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="盒模型新增样式"><a href="#盒模型新增样式" class="headerlink" title="盒模型新增样式"></a>盒模型新增样式</h2><ul><li>img、input属于行内替换元素。</li><li>替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容</li><li><p>替换元素一般有内在尺寸，所以具有width和height，可以设定。</p></li><li><p>图片居中demo用容器的伪元素给图片做一个兄弟元素(高度=容器的高度，inline-block)，并让他两个基线对齐，就实现了图片的垂直居中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">#app&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">#app::after&#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 100%;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;./love.gif&quot; alt=&quot;shulu&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="盒模型阴影-box-shadow"><a href="#盒模型阴影-box-shadow" class="headerlink" title="盒模型阴影 box-shadow"></a>盒模型阴影 box-shadow</h3><ul><li>box-shadow: 5px 5px 5px 5px pink</li></ul><h3 id="倒影-webkit-box-reflect"><a href="#倒影-webkit-box-reflect" class="headerlink" title="倒影 -webkit-box-reflect"></a>倒影 -webkit-box-reflect</h3><ul><li>设置元素的倒影（准确的来说不能算是css3的东西，但需要大家知道）</li><li>倒影的方向<br>  第一个值，above, below, right, left</li><li>倒影的距离<br>  第二个值，长度单位</li><li>渐变<br>  第三个值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">  -webkit-box-reflect: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><ul><li>该属性允许你控制一个元素的可调整大小性。</li><li><p>一定要配合overflow：auto使用</p></li><li><p>both 允许用户在水平和垂直方向上调整元素的大小。</p></li><li>horizontal 水平方向</li><li>vertical 垂直方向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#text&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  resize: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><ul><li>该属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</li><li><p>box-sizing 属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行/列为。</p></li><li><p>默认值：content-box  不可继承</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content-box</span><br><span class="line">默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距, 边框 &amp; 外边距 都在这个盒子的外部。 比如. 如果 .box &#123;width: 350px&#125;; 而且 &#123;border: 10px solid black;&#125; 那么在浏览器中的渲染的实际宽度将是370px;</span><br><span class="line"></span><br><span class="line">尺寸计算公式：</span><br><span class="line">  width = 内容的宽度，</span><br><span class="line">  height = 内容的高度。</span><br><span class="line">  宽度和高度都不包含内容的边框（border）和内边距（padding）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">border-box</span><br><span class="line">width 和 height 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于 Quirks模式 时Internet Explorer使用的盒模型。</span><br><span class="line"></span><br><span class="line">这里的维度计算为：</span><br><span class="line">  width = border + padding + 内容的 width，</span><br><span class="line">  height = border + padding + 内容的 height。</span><br></pre></td></tr></table></figure><h2 id="新增UI样式"><a href="#新增UI样式" class="headerlink" title="新增UI样式"></a>新增UI样式</h2><h3 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 border-radius"></a>圆角 border-radius</h3><ul><li>传统的圆角生成方案，必须使用多张图片作为背景图案</li><li>CSS3圆角的出现，使得我们再也不必浪费时间去制作这些图片了，而且还有其他多个优点：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* 减少维护的工作量。图片文件的生成、更新、编写网页代码，这些工作都不再需要了。</span><br><span class="line"></span><br><span class="line">* 提高网页性能。由于不必再发出多余的HTTP请求，网页的载入速度将变快。</span><br><span class="line"></span><br><span class="line">* 增加视觉可靠性。某些情况下（网络拥堵、服务器出错、网速过慢等等），背景图片会下载失败，导致视觉效果不佳。CSS3就不会发生这种情况.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">注意 百分比值</span><br><span class="line"></span><br><span class="line">在旧版本的 Chrome 和 Safari 中不支持。(fixed in Sepember 2010)</span><br><span class="line">在 11.50 版本以前的 Opera 中实现有问题。</span><br><span class="line">Gecko 2.0 (Firefox 4) 版本前实现不标准：水平半轴和垂直半轴都相对于盒子模型的宽度。</span><br><span class="line">在旧版本的 iOS (iOS 5 之前) 和 Android 中 (WebKit 532 之前) 不支持。</span><br></pre></td></tr></table></figure><h3 id="扩展-绝对定位模拟固定定位"><a href="#扩展-绝对定位模拟固定定位" class="headerlink" title="扩展-绝对定位模拟固定定位"></a>扩展-绝对定位模拟固定定位</h3><ul><li>固定定位在ie6以及移动端的兼容性不太好，故需要模拟实现</li><li>html,body,#wrap三者的高度都为100%，即都等于文档视口的高度。</li><li>默认滚动条在document上，可以设置在一个全局的容器#wrap(高度=视口的高度，overflow: auto)身上</li><li><strong>初始包含块</strong>：是一个与视窗等大小、等位置的矩形，滚动默认滚动条它会跟着动</li><li>body作为父级(没有定位)，绝对定位的元素是相对于这个初始包含块定位的</li><li>禁止系统滚动条后，初始包含块便不会再动了</li><li>这样绝对定位的元素也不会动了，即模拟了固定定位的效果</li><li>demo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">html,body&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  /* 禁止系统滚动条 */</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">#wrap&#123;</span><br><span class="line">  /* 将滚动条设置到我们的容器上 */</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">&#125;</span><br><span class="line">#app&#123;</span><br><span class="line">  /* 为了撑开容器看到滚动条 */</span><br><span class="line">  height: 3000px;</span><br><span class="line">&#125;</span><br><span class="line">#red&#123;</span><br><span class="line">  /* 绝对定位的元素，实现了固定定位的效果 */</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;wrap&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;red&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><ul><li>border-image 属性允许在元素的边框上绘制图像。这使得绘制复杂的外观组件更加简单，使用 border-image 时，其将会替换掉 border-style 属性所设置的边框样式如实线solid。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">border-image-source: url(./love.jpg) 图片</span><br><span class="line">border-image-slice:  百分比</span><br><span class="line">该属性会通过规范将图片明确的分割为9个区域：四个角，四边以及中心区域。图片见 MDN</span><br><span class="line">border-image-width: 定义图像边框宽度。 </span><br><span class="line">border-image-outset: 定义边框图像可超出边框盒的大小</span><br><span class="line">border-image-repeat:  定义图片如何填充边框。stretch(拉伸),repeat，round（平铺）</span><br></pre></td></tr></table></figure><h3 id="css2背景"><a href="#css2背景" class="headerlink" title="css2背景"></a>css2背景</h3><ul><li>background-color</li><li>background-image</li><li>background-position</li><li>background-repeat</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat-x  </span><br><span class="line">repeat-y  </span><br><span class="line">repeat    </span><br><span class="line">no-repeat</span><br></pre></td></tr></table></figure><h3 id="css3背景新增"><a href="#css3背景新增" class="headerlink" title="css3背景新增"></a>css3背景新增</h3><ul><li>background-origin设置背景渲染的起始位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border-box</span><br><span class="line">padding-box(默认)</span><br><span class="line">content-box</span><br></pre></td></tr></table></figure><ul><li>background-clip 设置背景裁剪位置</li><li>-webkit-background-clip 按文字剪贴背景(文字有透明才行)</li><li>background-size 设置背景图片大小</li><li>background 是CSS简写属性，用来集中设置各种背景属性。</li></ul><h3 id="线性渐变-背景图片渐变"><a href="#线性渐变-背景图片渐变" class="headerlink" title="线性渐变-背景图片渐变"></a>线性渐变-背景图片渐变</h3><ul><li><p>background-image: linear-gradient(red,blue);</p></li><li><p>为了创建一个线性渐变，你需要设置一个起始点和一个方向（指定为一个角度）。你还要定义终止色。终止色就是你想让浏览器去平滑的过渡过去，并且你必须指定至少两种，当然也会可以指定更多的颜色去创建更复杂的渐变效果。</p></li><li><p>默认从上到下发生渐变</p></li><li><p>linear-gradient(red,blue);</p></li><li><p>改变渐变方向：（top bottom left right）</p></li><li><p>linear-gradient(to 结束的方向,red,blue);</p></li><li><p>使用角度</p></li><li><p>linear-gradient(角度,red,blue);</p></li><li><p>颜色节点的分布（第一个不写为0%，最后一个不写为100%）</p></li><li><p>linear-gradient(red 长度或者百分比,blue 长度或者百分比);</p></li><li><p>重复渐变</p></li><li>repeating-linear-gradient(60deg,red 0,blue 30%);</li></ul><h3 id="径向渐变-背景图片渐变"><a href="#径向渐变-背景图片渐变" class="headerlink" title="径向渐变-背景图片渐变"></a>径向渐变-背景图片渐变</h3><ul><li>background-image: radial-gradient(red,blue);</li><li>radial-gradient() 函数创建一个<image>，用来展示由原点（渐变中心）辐射开的颜色渐变</image></li></ul><ul><li>默认均匀分布</li><li><p>radial-gradient(red,blue);</p></li><li><p>不均匀分布</p></li><li><p>radial-gradient(red 50%,blue 70%);</p></li><li><p>改变渐变的形状</p></li><li>radial-gradient(circle ,red,blue)</li><li>circle</li><li><p>ellipse（默认为椭圆）</p></li><li><p>渐变形状的大小</p></li><li>radial-gradient(closest-corner  circle ,red,blue)</li><li>closest-side   最近边</li><li>farthest-side  最远边</li><li>closest-corner 最近角</li><li><p>farthest-corner 最远角（默认值）</p></li><li><p>改变圆心</p></li><li>radial-gradient(closest-corner  circle at 10px 10px,red,blue);  </li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-new-ui/#disqus_thread</comments>
    </item>
    
    <item>
      <title>哲学</title>
      <link>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:42:24 GMT</pubDate>
      <description>
      
        茶余饭后，我们还可以思考更深奥的东东。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>电影学</title>
      <link>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:42:07 GMT</pubDate>
      <description>
      
        经典电影你值得一看
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;人生苦短，我只看经典电影。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>心理学</title>
      <link>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:41:18 GMT</pubDate>
      <description>
      
        学习心理学不为看透别人，只为理解自己的内心。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>生活中的经济学</title>
      <link>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:28:58 GMT</pubDate>
      <description>
      
        知识扩展之生活中的经济学
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;物以稀为贵。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-font</title>
      <link>https://shulu520.com/css3/css3-font/</link>
      <guid>https://shulu520.com/css3/css3-font/</guid>
      <pubDate>Sun, 14 Jul 2019 07:06:41 GMT</pubDate>
      <description>
      
        硅谷css3-自定义字体&amp;字体图标-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="位图vs矢量图"><a href="#位图vs矢量图" class="headerlink" title="位图vs矢量图"></a>位图vs矢量图</h2><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><ul><li>位图图像（bitmap），亦称为点阵图像或栅格图像，是由称作像素（图片元素）的单个点组成的。这些点可以进行不同的排列和染色以构成图样。当放大位图时，可以看见赖以构成整个图像的无数单个方块。扩大位图尺寸的效果是增大单个像素，从而使线条和形状显得参差不齐。然而，如果从稍远的位置观看它，位图图像的颜色和形状又显得是连续的。用数码相机拍摄的照片、扫描仪扫描的图片以及计算机截屏图等都属于位图。位图的特点是可以表现色彩的变化和颜色的细微过渡，产生逼真的效果，缺点是在保存时需要记录每一个像素的位置和颜色值，占用较大的存储空间。常用的位图处理软件有Photoshop（同时也包含矢量功能）</li></ul><h3 id="矢量图"><a href="#矢量图" class="headerlink" title="矢量图"></a>矢量图</h3><ul><li>矢量图[vector]，也叫做向量图，简单的说，就是缩放不失真的图像格式。矢量图是通过多个对象的组合生成的，对其中的每一个对象的纪录方式，都是以数学函数来实现的，也就是说，矢量图实际上并不是象位图那样纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一付矢量图的时候，软件对图形象对应的函数进行运算，将运算结果[图形的形状和颜色]显示给你看。无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同[不失真]。</li></ul><h3 id="位图与矢量图的区别"><a href="#位图与矢量图的区别" class="headerlink" title="位图与矢量图的区别"></a>位图与矢量图的区别</h3><ul><li>最大的区别，矢量图形与分辨率无关，可以将它缩放到任意大小和以任意分辨率在输出设备上打印出来，都不会影响清晰度，而位图是由一个一个像素点产生，当放大图像时，像素点也放大了，但每个像素点表示的颜色是单一的，所以在位图放大后就会出现咱们平时所见到的马赛克状。</li><li>位图表现的色彩比较丰富，可以表现出色彩丰富的图象，可逼真表现自然界各类实物；而矢量图形色彩不丰富，无法表现逼真的实物，矢量图常常用来表示标识、图标、Logo等简单直接的图像。</li><li>由于位图表现的色彩比较丰富，所以占用的空间会很大，颜色信息越多，占用空间越大，图像越清晰，占用空间越大；由于矢量图形表现的图像颜色比较单一，所以所占用的空间会很小。</li></ul><h3 id="字体图标的好处"><a href="#字体图标的好处" class="headerlink" title="字体图标的好处"></a>字体图标的好处</h3><ul><li><p>图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。图片还有一个缺点就是不能很好的进行“缩放”，因此，有时候在“响应式设计”中需要使用图像的最好解决方案就是不去使用图片。</p></li><li><p>很容易任意地缩放；</p></li><li>很容易地改变颜色；</li><li>很容易地产生阴影；</li><li>可以拥有透明效果；</li><li>一般来说，有先进的浏览器支持；</li><li>可以使用CSS来装饰（可以得到CSS很好支持）；</li><li>可以快速转化形态（做出一些变化，如 :hover等）；</li><li>可以做出跟图片一样可以做的事情（改变透明度、旋转度，等）；</li><li>本身体积更小，但携带的信息并没有削减。</li><li>不用每次修改都还得重新切图替换。</li></ul><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">@font-face&#123;</span><br><span class="line">  font-family: &apos;自定义的名字&apos;; </span><br><span class="line">  src: url(&apos;../font/字体名称.eot&apos;);</span><br><span class="line">  src:url(&apos;../font/字体名称.woff&apos;) format(&apos;woff&apos;),</span><br><span class="line">      url(&apos;../font/字体名称.ttf&apos;) format(&apos;truetype&apos;),</span><br><span class="line">      url(&apos;../font/字体名称.svg&apos;) format(&apos;svg&apos;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">h1&#123;</span><br><span class="line">  font-size:36px;</span><br><span class="line">  color:#ccc;</span><br><span class="line">  font-family: &quot;自定义的名字&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><ul><li>字体图标就是运用了css3的自定义字体</li><li>有专门的网站可以做字体</li><li>常使用阿里巴巴字体图标库</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-font/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-selectors</title>
      <link>https://shulu520.com/css3/css3-selectors/</link>
      <guid>https://shulu520.com/css3/css3-selectors/</guid>
      <pubDate>Sun, 14 Jul 2019 03:44:38 GMT</pubDate>
      <description>
      
        硅谷css3-选择器-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;走到世界尽头。那风从哪里吹来，云又将飘向哪儿，世界的尽头在何方，想知道答案，唯有往前走。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css的全称"><a href="#css的全称" class="headerlink" title="css的全称"></a>css的全称</h2><ul><li>Cascading Style Sheets </li><li>CSS3选择器规范地址：<a href="https://www.w3.org/TR/2011/REC-css3-selectors-20110929/" target="_blank" rel="noopener">https://www.w3.org/TR/2011/REC-css3-selectors-20110929/</a></li><li>CSS3选择最新选择器规范:  <a href="https://www.w3.org/TR/selectors" target="_blank" rel="noopener">https://www.w3.org/TR/selectors</a>  </li></ul><h2 id="样式表的组成"><a href="#样式表的组成" class="headerlink" title="样式表的组成"></a>样式表的组成</h2><ul><li>规则—&gt;选择器+声明块 —&gt;css属性+css属性值组成的键值对 </li></ul><h2 id="浏览器读取选择器的顺序"><a href="#浏览器读取选择器的顺序" class="headerlink" title="浏览器读取选择器的顺序"></a>浏览器读取选择器的顺序</h2><ul><li>从右往左 即从小范围开始找 </li></ul><h2 id="属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点"><a href="#属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点" class="headerlink" title="属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点"></a>属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点</h2><ul><li>继承：html元素可以从父元素那里继承一部分css属性，即使当前元素没有定义该属性。</li><li>比如：color有继承性 而border没有</li></ul><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul><li>通配符选择器        * { margin: 0; padding: 0; border: none; }</li><li>元素选择器        body { background: #eee; }</li><li>类选择器        .list { list-style: square; }</li><li>ID选择器        #list { width: 500px; margin: 0 auto; }</li><li>后代选择器        .list li { margin-top: 10px; background: #abcdef; }</li></ul><h2 id="基本选择器扩展"><a href="#基本选择器扩展" class="headerlink" title="基本选择器扩展"></a>基本选择器扩展</h2><ul><li>子元素选择器    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap &gt; .inner &#123;color: pink;&#125;</span><br><span class="line">也可称为直接后代选择器,此类选择器只能匹配到直接后代，不能匹配到深层次的后代元素</span><br></pre></td></tr></table></figure><ul><li>相邻兄弟选择器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap #first + .inner &#123;color: #f00;&#125;</span><br><span class="line">它只会匹配紧跟着的兄弟元素</span><br></pre></td></tr></table></figure><ul><li>通用兄弟选择器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap #first ~ div &#123; border: 1px solid;&#125;</span><br><span class="line">它会匹配所有的兄弟元素(不需要紧跟)</span><br></pre></td></tr></table></figure><ul><li>选择器分组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1,h2,h3&#123;color: pink;&#125;  </span><br><span class="line">此处的逗号我们称之为结合符</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="存在和值属性选择器"><a href="#存在和值属性选择器" class="headerlink" title="存在和值属性选择器"></a>存在和值属性选择器</h3><ul><li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li><li>[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li><li>[attr~=val]：表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。</li></ul><h3 id="子串值属性选择器"><a href="#子串值属性选择器" class="headerlink" title="子串值属性选择器"></a>子串值属性选择器</h3><ul><li>[attr|=val] : 选择attr属性的值是val（包括val）或以val-开头的元素。</li><li>[attr^=val] : 选择attr属性的值以val开头（包括val）的元素。</li><li>[attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。</li><li>[attr*=val] : 选择attr属性的值中包含字符串val的元素。</li></ul><h2 id="伪类与伪元素选择器"><a href="#伪类与伪元素选择器" class="headerlink" title="伪类与伪元素选择器"></a>伪类与伪元素选择器</h2><ul><li>伪类：其出现是为了拿到元素的一些状态</li><li>伪元素：其出现是为了拿到css tree以外的元素</li></ul><h3 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h3><ul><li><strong>注意</strong>:link，:visited，:target是作用于链接元素的！</li><li>:link          表示作为超链接，并指向一个未访问的地址的所有锚</li><li>:visited    表示作为超链接，并指向一个已访问的地址的所有锚</li><li>:target     代表一个特殊的元素，它的id是URI的片段标识符 </li></ul><h3 id="使用-target实现最简单的选项卡"><a href="#使用-target实现最简单的选项卡" class="headerlink" title="使用 :target实现最简单的选项卡"></a>使用 :target实现最简单的选项卡</h3><ul><li>demo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//样式：</span><br><span class="line">div&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  color: red;</span><br><span class="line">  background: #ccc;</span><br><span class="line">  font-size: 33px;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">:target&#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;a href=&quot;#div1&quot;&gt;div1&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#div2&quot;&gt;div2&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#div3&quot;&gt;div3&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;div3&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><ul><li><strong>注意</strong>:hover，:active基本可以作用于所有的元素！</li><li>:hover    表示悬浮到元素上</li><li><p>:active    表示匹配被用户激活的元素（点击按住时）</p></li><li><p>由于a标签的:link和:visited可以覆盖了所有a标签的状态，</p></li><li>所以当:link，:visited，:hover，:active同时出现在a标签</li><li><p>身上时 :link和:visited不能放在最后！！！</p></li><li><p>隐私与:visited选择器</p></li><li>只有下列的属性才能被应用到已访问链接：<ul><li>color</li><li>background-color</li><li>border-color </li></ul></li></ul><h3 id="表单相关伪类"><a href="#表单相关伪类" class="headerlink" title="表单相关伪类"></a>表单相关伪类</h3><ul><li>:enabled    匹配可编辑的表单</li><li>:disable    匹配被禁用的表单</li><li>:checked    匹配被选中的表单</li><li><p>:focus        匹配获焦的表单</p></li><li><p>demo单选按钮:checked</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//样式：</span><br><span class="line">label&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  border: 1px solid </span><br><span class="line">&#125;</span><br><span class="line">label &gt; span&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0</span><br><span class="line">&#125;</span><br><span class="line">input:checked + span&#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.float&#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><ul><li><strong>index的值从1开始计数！！！！</strong></li><li>index可以为变量n(只能是n)</li><li>index可以为even odd</li><li>.wrap ele:nth-child(index)        表示匹配#wrap中第index的子元素 这个子元素必须是ele</li><li>.wrap ele:nth-of-type(index)    表示匹配#wrap中第index的ele子元素</li><li><strong>除此之外:nth-child和:nth-of-type有一个很重要的区别！！</strong></li><li><strong>nth-of-type以元素为中心！！！</strong></li><li>:nth-child(index)系列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:nth-child(index)系列</span><br><span class="line">:first-child</span><br><span class="line">:last-child</span><br><span class="line">:nth-last-child(index)</span><br><span class="line">:only-child(相当于:first-child:last-child 或者 :nth-child(1):nth-last-child(1)</span><br></pre></td></tr></table></figure><ul><li>:nth-of-type(index)系列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:nth-of-type(index)系列</span><br><span class="line">:first-of-type</span><br><span class="line">:last-of-type</span><br><span class="line">:nth-last-type(index)</span><br><span class="line">:only-of-type(相当于:first-of-type:last-of-type 或者 :nth-of-type(1):nth-last-of-type(1)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- :not非</span><br></pre></td></tr></table></figure><p>:not    非<br>面试题：常用来做前后边框<br>div &gt; a:not(:last-of-type){<br>  border-right: 1px solid<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- :empty(内容必须是空的，有空格都不行，有attr没关系)</span><br><span class="line"></span><br><span class="line">- :nth-child选择要求相对严格些</span><br><span class="line">- :nth-of-type选择要求相对宽松些</span><br><span class="line">- 在一个容器中只有一种子元素则二者没什么区别</span><br><span class="line"></span><br><span class="line">## 伪元素</span><br><span class="line">- ::after 常用来清除浮动</span><br><span class="line">- ::before</span><br><span class="line">- ::firstLetter</span><br><span class="line">- ::firstLine</span><br><span class="line">- ::selection 鼠标选中后的自定义样式</span><br><span class="line"></span><br><span class="line">## css声明的优先级</span><br><span class="line">###选择器的特殊性</span><br><span class="line">- 选择器的特殊性由选择器本身的组件确定，特殊性值表述为4个部分，如    0,0,0,0</span><br><span class="line">- 一个选择器的具体特殊性如下确定：</span><br></pre></td></tr></table></figure><p>通配符选择器的特殊性为0,0,0,0<br>对于选择器中的给定的各个元素和伪元素，加0,0,0,1<br>对于选择器中给定的各个类属性，属性选择，或伪类，加 0,0,1,0<br>对于选择器中给定的ID属性值，加 0,1,0,0<br>内联声明的特殊性都是1,0,0,0</p><p>结合符对选择器特殊性没有一点贡献<br>继承没有特殊性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- 特殊性 1,0,0,0 大于所有以0开头的特殊性(不进位)</span><br><span class="line">- 选择器的特殊性最终都会授予给其对应的声明</span><br><span class="line">- 如果多个规则与同一个元素匹配，而且有些声明互相冲突时，特殊性越大的越占优势</span><br><span class="line"></span><br><span class="line">- **注意：id选择器和属性选择器**</span><br></pre></td></tr></table></figure><p>div[id=”test”]（0,0,1,1） 和 #test（0,1,0,0）  </p><p><code>`</code></p><h3 id="重要声明-important"><a href="#重要声明-important" class="headerlink" title="重要声明 !important"></a>重要声明 !important</h3><ul><li>有时某个声明比较重要，超过了所有其他声明，css2.1就称之为重要声明</li><li>并允许在这些声明的结束分号之前插入  !important  来标志</li><li>必须要准确的放置  !important 否则声明无效。 </li><li><p>!important 总是要放在声明的最后，即分号的前面</p></li><li><p>标志为 !important的声明并没有特殊的特殊性值，不过要与非重要声明分开考虑。</p></li><li>实际上所有的重要声明会被浏览器分为一组，重要声明的冲突会在其内部解决</li><li>非重要声明也会被分为一组，非重要声明的冲突也会在其内部解决</li><li>如果一个重要声明与非重要声明冲突，胜出的总是重要声明</li></ul><h3 id="样式继承"><a href="#样式继承" class="headerlink" title="样式继承"></a>样式继承</h3><ul><li>继承没有特殊性，甚至连0特殊性都没有</li><li>0特殊性要比无特殊性来的强</li><li>也就是说通配符选择器的样式比继承来的样式特殊性高</li></ul><h3 id="css样式来源"><a href="#css样式来源" class="headerlink" title="css样式来源"></a>css样式来源</h3><ul><li>css样式的来源大致有三种<ul><li>创作人员</li><li>读者</li><li>用户代理   </li></ul></li></ul><h3 id="css样式权重"><a href="#css样式权重" class="headerlink" title="css样式权重"></a>css样式权重</h3><ul><li>读者的重要声明 即用户的操作</li><li>创作人员的重要声明 即我猿</li><li>创作人员的正常声明</li><li>读者的正常声明</li><li>用户代理的声明 即浏览器</li></ul><h3 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h3><ul><li>找出所有相关的规则，这些规则都包含一个选择器</li><li>计算声明的优先级<ul><li>先按来源排序</li><li>在按选择器的特殊性排序</li><li>最终按顺序</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-selectors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>axios</title>
      <link>https://shulu520.com/axios/axios/</link>
      <guid>https://shulu520.com/axios/axios/</guid>
      <pubDate>Thu, 04 Jul 2019 09:57:25 GMT</pubDate>
      <description>
      
        axios的学习笔记。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;每一个不曾起舞的日子，都是对生命的一种辜负。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li>基于promise用于浏览器和node.js的http客户端   </li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 发起一个GET请求 */</span><br><span class="line"></span><br><span class="line">// 可以参数直接拼接</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">// 或者这样</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 发起一个POST请求 */</span><br><span class="line"></span><br><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">  name: &apos;shulu&apos;,</span><br><span class="line">  age: &apos;18&apos;</span><br><span class="line">&#125;)</span><br><span class="line">.then((result) =&gt; &#123;</span><br><span class="line">  console.log(result)</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 同时发起多个请求 */</span><br><span class="line"> </span><br><span class="line">let sendArr = [axios.get(&apos;/user/123&apos;), axios.get(&apos;/user/123/pions&apos;)]</span><br><span class="line">axios.all(sendArr) </span><br><span class="line">.then(axios.spread((resA, resB) =&gt; &#123;</span><br><span class="line">  // 这里就可以拿到响应resA, resB</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 一些最最常用的请求配置项 */</span><br><span class="line"></span><br><span class="line">// 公共 URL</span><br><span class="line">axios.defaults.baseURL = &apos;https://some-domain.com/api/&apos; </span><br><span class="line"></span><br><span class="line">// 定义POST请求中请求主体向服务器发送内容的格式，这里是项目中常用的格式</span><br><span class="line">// 这里似乎有点问题，得再看看</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line"></span><br><span class="line">// 添加一个响应拦截器</span><br><span class="line">// 直接将响应的结果过滤得到我们最想要的data即响应主体数据</span><br><span class="line">axios.interceptors.response.use(res =&gt; res.data)</span><br><span class="line"></span><br><span class="line">// 自定义对HTTP响应状态码的处理</span><br><span class="line">axios.defaults.validateStatus = (status =&gt; &#123;……&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/axios/axios/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tcp</title>
      <link>https://shulu520.com/tcp/tcp/</link>
      <guid>https://shulu520.com/tcp/tcp/</guid>
      <pubDate>Tue, 25 Jun 2019 15:37:04 GMT</pubDate>
      <description>
      
        经典tcp三次握手四次挥手简述。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;什么时候，我们之间才会握手呢。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="tcp-三次握手"><a href="#tcp-三次握手" class="headerlink" title="tcp 三次握手"></a>tcp 三次握手</h2><ul><li><p>我们来聊聊三次握手，我们看到这个问题的时候，第一个疑问是，啥叫握手？俩机器之间怎么还能握手呢？我怎么没发现我家电脑有手？</p></li><li><p>第二个疑问是，为啥要三次？两次不行吗？我觉得握一下就行了~为啥要握三次？流氓~<br>那么现在我们有没有清楚为什么不能是两次握手了呢？</p></li><li>我们假设现在有A 和 B 两个之间要进行通信往来。</li><li>第一次握手只能让B知道A能发，第二次握手让A知道了B能收能发，但是这个时候B还不知道A能收，所以A需要发出信息，证明自己收到了B的回复~所以必须要三次才能让两台机器都知道对方能收能发。</li></ul><h2 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h2><ul><li>以一句话来说明四次挥手的根本目的，四次挥手核心就在于四个时间节点，分别是：<ul><li>A告诉B发完了，</li><li>B告诉A知道发完了，(接收还需要一段时间的)</li><li>B告诉A收完了，</li><li>A告诉B知道收完了。</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/tcp/tcp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-others</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-others/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-others/</guid>
      <pubDate>Tue, 25 Jun 2019 03:52:31 GMT</pubDate>
      <description>
      
        mooc js设计模式--其他一些不常用的模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br>&lt;!–more–</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><ul><li>代码演示</li></ul><p><code></code></p><p>// 执行者(前线士兵)<br>class Receiver {<br>  exec() {<br>    console.log(‘前线士兵 执行命令’)<br>  }<br>} </p><p>// 命令对象(由鼓手传递 开打开打！！！)<br>class Command {<br>  constructor(receiver) {<br>    this.receiver = receiver<br>  }<br>  cmd() {<br>    console.log(‘命令对象开始传递 “开打开打！！！”‘)<br>    this.receiver.exec()<br>  }<br>}</p><p>// 发布命令者(将军)<br>class Invoker {<br>  constructor(command) {<br>    this.command = command<br>  }<br>  invoke() {<br>    console.log(‘发布命令: 开打开打！！！’)<br>    this.command.cmd()<br>  }<br>}<br>// 士兵<br>let soldier = new Receiver()<br>// 鼓手<br>let drummer = new Command(soldier)<br>// 将军<br>let general = new Invoker(drummer)<br>// 将军发布命令<br>general.invoke()</p><p><code>`</code></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-others/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-prototype</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-prototype/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-prototype/</guid>
      <pubDate>Mon, 24 Jun 2019 09:19:51 GMT</pubDate>
      <description>
      
        mooc js 设计模式之原型模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const prototype = &#123;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return `first-name: $&#123;this.firstName&#125;, last-name: $&#123;this.lastName&#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  say() &#123;</span><br><span class="line">    console.log(&apos;love you&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 克隆自己，生成一个新的对象</span><br><span class="line">// Object.create()用到了原型模式的思想</span><br><span class="line">// 基于一个原型创建一个对象</span><br><span class="line"></span><br><span class="line">let x = Object.create(prototype)</span><br><span class="line">x.lastName = &apos;shulu&apos;</span><br><span class="line">x.firstName = &apos;lqy love&apos;</span><br><span class="line"></span><br><span class="line">x.say() //love you</span><br><span class="line">console.log(&apos;x.getName() :&apos;, x.getName())</span><br><span class="line"></span><br><span class="line">//打印为 x.getName() : first-name: lqy love, last-name: shulu</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-prototype/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-state</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-state/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-state/</guid>
      <pubDate>Mon, 24 Jun 2019 02:24:23 GMT</pubDate>
      <description>
      
        mooc js设计模式之状态模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;莫辜负这仅有一次的人生。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="状态模式介绍"><a href="#状态模式介绍" class="headerlink" title="状态模式介绍"></a>状态模式介绍</h2><ul><li>一个对象有状态变化</li><li>每次状态变化都会触发一个逻辑</li><li><p>不能总是用if…else来控制</p></li><li><p>交通信号灯不同颜色的变化</p></li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li><p>有限状态机(finite)</p><ul><li>有限个状态，以及在这些个状态之间的变化</li><li>开源的库 javascript-state-machine</li></ul></li><li><p>写一个简单的Promise</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">// 收藏/取消收藏例子</span><br><span class="line">import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br></pre></td></tr></table></figure><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>将状态对象和主题对象分离，状态的变化逻辑单独处理</li><li>符合开放封闭原则</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-state/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-iterator</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-iterator/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-iterator/</guid>
      <pubDate>Sun, 23 Jun 2019 13:48:55 GMT</pubDate>
      <description>
      
        mooc js 设计模式之迭代器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><strong>顺序访问一个集合</strong></li><li>使用者无需知道内部的结构(封装)</li><li><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现-自己写的初级的-后面es6提供的完善的-for-of"><a href="#代码实现-自己写的初级的-后面es6提供的完善的-for-of" class="headerlink" title="代码实现(自己写的初级的 后面es6提供的完善的 for of)"></a>代码实现(自己写的初级的 后面es6提供的完善的 for of)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 迭代器(遍历器)</span><br><span class="line">class Iterator &#123;</span><br><span class="line">  constructor(container) &#123;</span><br><span class="line">    this.list = container.list</span><br><span class="line">    this.index = 0</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    if (this.hasNext()) &#123;</span><br><span class="line">      return this.list[this.index++]</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    if (this.index &gt;= this.list.length) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125; </span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 迭代器的容器</span><br><span class="line">class Container &#123;</span><br><span class="line">  constructor(list) &#123;</span><br><span class="line">    this.list = list</span><br><span class="line">  &#125;</span><br><span class="line">  getIterator() &#123;</span><br><span class="line">    return new Iterator(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr = [1,2,3,4,5,6]</span><br><span class="line">let container = new Container(arr)</span><br><span class="line">let iterator = container.getIterator()</span><br><span class="line"></span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">  console.log(&apos;iterator.next() :&apos;, iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"></span><br><span class="line"> iterator.next() : 1 </span><br><span class="line"> iterator.next() : 2 </span><br><span class="line"> iterator.next() : 3 </span><br><span class="line"> iterator.next() : 4 </span><br><span class="line"> iterator.next() : 5 </span><br><span class="line"> iterator.next() : 6 </span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="es6-Iterator"><a href="#es6-Iterator" class="headerlink" title="es6 Iterator"></a>es6 Iterator</h2><ul><li><p>有序集合的数据如:</p><ul><li>Array </li><li>Map </li><li>Set </li><li>String </li><li>TypedArray </li><li>arguments</li><li>Nodelist </li></ul></li><li><p>以上数据类型，都有[Symbol.iterator]这个属性 </p></li><li>属性值是函数，执行函数返回一个迭代器</li><li>这个迭代器就有next方法可以顺序迭代子元素</li><li>可以运行Array.prototype[Symbol.iterator]来测试</li><li>注意 object 不是有序集合 可以用Map代替</li></ul><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//封装一个简单的each方法</span><br><span class="line">function each (data) &#123;</span><br><span class="line">  //data是可遍历的 即data[Symbol.iterator]有值</span><br><span class="line">  for(let item of data) &#123;</span><br><span class="line">    console.log(&apos;item :&apos;, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试几种可遍历的数据类型</span><br><span class="line">let str = &apos;love&apos;</span><br><span class="line">let arr = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">let map = new Map()</span><br><span class="line">map.set(0, &quot;zero&quot;)</span><br><span class="line">map.set(1, &quot;one&quot;)</span><br><span class="line"></span><br><span class="line">let set = new Set([6,7,8,9])</span><br><span class="line"></span><br><span class="line">each(str)</span><br><span class="line">each(arr)</span><br><span class="line">each(map)</span><br><span class="line">each(set)</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> item : l </span><br><span class="line"> item : o </span><br><span class="line"> item : v </span><br><span class="line"> item : e </span><br><span class="line"></span><br><span class="line"> item : 1 </span><br><span class="line"> item : 2 </span><br><span class="line"> item : 3 </span><br><span class="line"> item : 4 </span><br><span class="line"></span><br><span class="line"> item : [ 0, &apos;zero&apos; ] </span><br><span class="line"> item : [ 1, &apos;one&apos; ] </span><br><span class="line"></span><br><span class="line"> item : 6 </span><br><span class="line"> item : 7 </span><br><span class="line"> item : 8 </span><br><span class="line"> item : 9</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="Map-数据结构"><a href="#Map-数据结构" class="headerlink" title="Map 数据结构"></a>Map 数据结构</h2><ul><li>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</li><li>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</li><li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li><li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li><li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li><li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Obj- ect.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li><li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-iterator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-observer</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-observer/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-observer/</guid>
      <pubDate>Sat, 22 Jun 2019 14:45:37 GMT</pubDate>
      <description>
      
        mooc js设计模式之观察者模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>前端运用最广泛的设计模式</li><li>当一个对象被修改时，则会自动通知它的依赖对象。</li><li>注意，不一定是一对多哦，也可以一对一的。</li><li><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 主题，保存状态，状态发生变化后触发所有观察者对象</span><br><span class="line">class Subject &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.state = 0</span><br><span class="line">    this.observers = []</span><br><span class="line">  &#125;</span><br><span class="line">  getState() &#123;</span><br><span class="line">    return this.state</span><br><span class="line">  &#125;</span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    this.state = state</span><br><span class="line">    this.notifyAllObservers()</span><br><span class="line">  &#125;</span><br><span class="line">  // 通知所有的观察者</span><br><span class="line">  notifyAllObservers() &#123;</span><br><span class="line">    this.observers.forEach((observer) =&gt; &#123;</span><br><span class="line">      observer.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 添加新的观察者</span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    this.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 观察者</span><br><span class="line">class Observer &#123;</span><br><span class="line">  constructor(name, subject) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.subject = subject</span><br><span class="line">    this.subject.attach(this)</span><br><span class="line">  &#125;</span><br><span class="line">  update() &#123;</span><br><span class="line">    console.log(`$&#123;this.name&#125; updated, now-state:$&#123;this.subject.getState()&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">let s = new Subject()</span><br><span class="line">let o1 = new Observer(&apos;o1&apos;, s)</span><br><span class="line">let o2 = new Observer(&apos;o2&apos;, s)</span><br><span class="line">let o3 = new Observer(&apos;o3&apos;, s)</span><br><span class="line">s.setState(1) </span><br><span class="line">s.setState(2)</span><br><span class="line">s.setState(3)</span><br><span class="line"></span><br><span class="line">/* //打印结果</span><br><span class="line"> o1 updated, now-state:1 </span><br><span class="line"> o2 updated, now-state:1 </span><br><span class="line"> o3 updated, now-state:1 </span><br><span class="line"> o1 updated, now-state:2 </span><br><span class="line"> o2 updated, now-state:2 </span><br><span class="line"> o3 updated, now-state:2 </span><br><span class="line"> o1 updated, now-state:3 </span><br><span class="line"> o2 updated, now-state:3 </span><br><span class="line"> o3 updated, now-state:3</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>网页事件绑定</li><li>Promise</li><li>jQuery callbacks</li><li>nodejs 自定义事件</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-observer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-proxy</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-proxy/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-proxy/</guid>
      <pubDate>Fri, 21 Jun 2019 12:36:54 GMT</pubDate>
      <description>
      
        mooc js设计模式之代理模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="代理模式简介"><a href="#代理模式简介" class="headerlink" title="代理模式简介"></a>代理模式简介</h2><ul><li><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li>科学上网</li><li>明星经纪人</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>网页事件代理</li><li>jQuery的 $.proxy()</li><li><p>es6的proxy</p></li><li><p>代码实现明星经纪人</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 明星</span><br><span class="line">let star = &#123;</span><br><span class="line">  name: &apos;shulu&apos;,</span><br><span class="line">  age: &apos;18&apos;,</span><br><span class="line">  phone: &apos;star: 18366666666&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 经纪人</span><br><span class="line">let agent = new Proxy(star, &#123;</span><br><span class="line">  get(target, key) &#123;</span><br><span class="line">    if (key === &apos;phone&apos;) &#123;</span><br><span class="line">      // 返回经纪人(代理)的电话</span><br><span class="line">      return &apos;agent: 12353434343&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    if (key === &apos;price&apos;) &#123;</span><br><span class="line">      // 明星不报价，由经纪人报价</span><br><span class="line">      return &apos;agent: 1232323$&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set(target, key, val) &#123;</span><br><span class="line">    if (key === &apos;customPrice&apos;) &#123;</span><br><span class="line">      if (val &lt; 10000) &#123;</span><br><span class="line">        // 最低价格</span><br><span class="line">        throw new Error(&apos;价格太低！&apos;)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        target[key] = val</span><br><span class="line">        return true </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&apos;agent.name :&apos;, agent.name) //agent.name : shulu</span><br><span class="line">console.log(&apos;agent.age :&apos;, agent.age) //agent.age : 18</span><br><span class="line"></span><br><span class="line">console.log(&apos;agent.phone :&apos;, agent.phone) //agent.phone : agent: 12353434343</span><br><span class="line">console.log(&apos;agent.price :&apos;, agent.price) //agent.price : agent: 1232323$</span><br><span class="line"></span><br><span class="line">agent.customPrice = 1212 //价格太低！</span><br><span class="line">agent.customPrice = 100000</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-proxy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>this</title>
      <link>https://shulu520.com/this/this/</link>
      <guid>https://shulu520.com/this/this/</guid>
      <pubDate>Fri, 21 Jun 2019 09:30:57 GMT</pubDate>
      <description>
      
        对this的全面认识总结。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;认识我自己。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>当前执行代码的环境对象  mdn权威解释</li></ul><h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><ul><li>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指向全局对象。</li></ul><h3 id="函数环境"><a href="#函数环境" class="headerlink" title="函数环境"></a>函数环境</h3><ul><li>在函数内部，this的值取决于函数被调用的方式。</li><li>如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法。方法来源即Function.prototype.call Function.prototype.bind</li><li><p>使用 call 和 apply 函数的时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。</p></li><li><p>箭头函数</p></li><li><p>它的this即它外层函数的this。</p></li><li><p>作为对象的方法</p></li><li><p>当函数作为对象里的方法被调用时，它们的 this是调用该函数的对象。</p></li><li><p>原型链中的 this</p></li><li><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。</p></li><li><p>getter 与 setter 中的 this 相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。作为构造函数</p></li><li><p>当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象。<br>作为一个DOM事件处理函数</p></li><li><p>当函数被用作事件处理函数时，它的this指向触发事件的元素。</p></li></ul><ul><li><p>setTimeout 关于”this”的问题 </p></li><li><p>当你向 setTimeout() (或者其他定时器函数)传递一个函数时,该函数中的this指向跟你的期望可能不同。</p></li><li><p>解释</p></li><li><p>由setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致，这些代码中包含的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined，这和所期望的this的值是不一样的。</p></li><li><p>即定时器函数是一个异步宏任务，在事件循环中会被分配到对应的任务队列中去等待执行，故执行栈即执行上下文环境即this不是你以为的原来的了。</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/this/this/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-decorator</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-decorator/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-decorator/</guid>
      <pubDate>Thu, 20 Jun 2019 09:02:00 GMT</pubDate>
      <description>
      
        mooc js设计模式之装饰器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></p></li><li><p><a href="https://segmentfault.com/a/1190000014495089" target="_blank" rel="noopener">大牛解读es7装饰器</a></p></li><li>为对象添加功能</li><li>不改变其原有的结构和功能</li><li>代码演示 画圆</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    console.log(&apos;画一个圆&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Decorator &#123;</span><br><span class="line">  constructor(circle) &#123;</span><br><span class="line">    this.circle = circle</span><br><span class="line">  &#125;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circle.draw()</span><br><span class="line">    this.setRedBorder(this.circle)</span><br><span class="line">  &#125;</span><br><span class="line">  setRedBorder(circle) &#123;</span><br><span class="line">    console.log(&apos;给圆设置红色的边框&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">let circle = new Circle()</span><br><span class="line">circle.draw() //画一个圆</span><br><span class="line"></span><br><span class="line">let dec = new Decorator(circle)</span><br><span class="line">dec.draw() //画一个圆 给圆设置红色的边框</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li>ES7 中的 decorator 同样借鉴了python语法糖，不过依赖于 ES5 的 Object.defineProperty 方法 。</li><li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</li><li>Object.defineProperty(obj, prop, descriptor)<ul><li>obj：要在其上定义属性的对象。</li><li>prop：要定义或修改的属性的名称。</li><li>descriptor：将被定义或修改的属性描述符。</li><li>返回值：被传递给函数的对象。</li></ul></li></ul><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><ul><li><p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。</p></li><li><p>数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。</p></li><li>存取描述符是由 getter-setter 函数对描述的属性。</li><li><p>描述符必须是这两种形式之一；不能同时是两者。</p></li><li><p>数据描述符和存取描述符均具有以下可选键值:</p><ul><li>configurable 可修改 布尔值</li><li>enumerable 可枚举 布尔值</li><li>value 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</li><li>writable 可写 布尔值</li><li>get 一个给属性提供 getter 的方法</li><li>set 一个给属性提供 setter 的方法</li></ul></li></ul><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><ul><li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>Object.assign(target, …sources)<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li><li>target<ul><li>目标对象。</li></ul></li><li>sources<ul><li>源对象。</li></ul></li><li>返回值<ul><li>目标对象。</li></ul></li></ul><h2 id="core-decorators装饰器库的使用"><a href="#core-decorators装饰器库的使用" class="headerlink" title="core-decorators装饰器库的使用"></a>core-decorators装饰器库的使用</h2><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-class-properties </span><br><span class="line"></span><br><span class="line">npm install --save-dev @babel/plugin-proposal-decorators</span><br><span class="line"></span><br><span class="line">npm install --save-dev babel-plugin-transform-decorators-legacy</span><br><span class="line"></span><br><span class="line">npm install --save-dev core-decorators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当然还有以下依赖的支持</span><br><span class="line"></span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/plugin-proposal-class-properties&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/plugin-proposal-decorators&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.5&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.5&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.7.0&quot;,</span><br><span class="line">    &quot;core-decorators&quot;: &quot;^0.20.0&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>.babelrc文件的配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;@babel/preset-env&quot;, &#123;</span><br><span class="line">      &quot;useBuiltIns&quot;: &quot;usage&quot;,// 在每个文件中使用polyfill时，为polyfill添加特定导入。利用捆绑器只加载一次相同的polyfill。</span><br><span class="line">      &quot;modules&quot;: false,// 启用将ES6模块语法转换为其他模块类型，设置为false不会转换模块。</span><br><span class="line">      &quot;targets&quot;: &#123; //浏览器兼容</span><br><span class="line">        &quot;browsers&quot;: &quot;last 2 versions, not ie &lt;= 9&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel/plugin-proposal-decorators&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">          &quot;legacy&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [&quot;@babel/plugin-transform-runtime&quot;, &#123;</span><br><span class="line">      &quot;helpers&quot;: false</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单使用 1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; readonly &#125; from &apos;core-decorators&apos;</span><br><span class="line"></span><br><span class="line">class Demo &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    console.log(&apos;shulu&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let demo = new Demo()</span><br><span class="line">demo.sayName() //shulu</span><br><span class="line"></span><br><span class="line">demo.sayName = function () &#123;</span><br><span class="line">  console.log(&apos;lqy love shulu&apos;) //Uncaught TypeError: Cannot assign to read only property &apos;sayName&apos; of object &apos;#&lt;Demo&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单使用 2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; deprecate &#125; from &apos;core-decorators&apos;</span><br><span class="line"></span><br><span class="line">class Demo &#123;</span><br><span class="line">  </span><br><span class="line">  @deprecate(&apos;此方法即将废除&apos; ,&#123;url: &apos;https://shulu520.com&apos;&#125;)</span><br><span class="line">  getName() &#123;</span><br><span class="line">    console.log(&apos;lqy&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let demo = new Demo()</span><br><span class="line">demo.getName() //lqy   DEPRECATION Demo#getName: 此方法即将废除 See https://shulu520.com for more details.</span><br></pre></td></tr></table></figure><ul><li>还有多种好用的方法……</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-decorator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-adapter</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-adapter/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-adapter/</guid>
      <pubDate>Thu, 20 Jun 2019 07:13:22 GMT</pubDate>
      <description>
      
        mooc js设计模式之适配器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;江南的雨季，西北的惆怅。感君一回顾，思君朝与暮。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="设计模式之适配器介绍"><a href="#设计模式之适配器介绍" class="headerlink" title="设计模式之适配器介绍"></a>设计模式之适配器介绍</h2><ul><li><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p></li><li><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p></li><li><p>代码演示</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class OldStandard &#123;</span><br><span class="line">  oldRequest() &#123;</span><br><span class="line">    return &apos;老式标准插头&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Adapter &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.standard = new OldStandard()</span><br><span class="line">  &#125;</span><br><span class="line">  newRequest() &#123;</span><br><span class="line">    let info = this.standard.oldRequest()</span><br><span class="line">    return `新标准插头---&gt;适配器---&gt;$&#123;info&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let adater = new Adapter()</span><br><span class="line">let res = adater.newRequest()</span><br><span class="line">console.log(&apos;res :&apos;, res) //res : 新标准插头---&gt;适配器---&gt;老式标准插头</span><br></pre></td></tr></table></figure><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><ul><li>vue的computed计算属性</li></ul><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>将旧接口和使用者分离</li><li>开放封闭原则</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-adapter/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-singleton</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-singleton/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-singleton/</guid>
      <pubDate>Thu, 20 Jun 2019 04:07:58 GMT</pubDate>
      <description>
      
        mooc js 设计模式之单例模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;I love the World.</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><ul><li><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li>系统中唯一被使用</li><li>一个类只有一个实例</li><li>私有化构造函数，外部不能new 只能内部new !!!!!</li><li>instance实例是唯一被new出来的对象</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class SingleObject &#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    console.log(&apos;login&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">SingleObject.getInstance = (function() &#123;</span><br><span class="line">  let instance</span><br><span class="line">  return function() &#123;</span><br><span class="line">    if (!instance) &#123;</span><br><span class="line">      instance = new SingleObject()</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">let obj1 = SingleObject.getInstance()</span><br><span class="line">obj1.login() //login</span><br><span class="line"></span><br><span class="line">let obj2 = SingleObject.getInstance()</span><br><span class="line">obj2.login() //login</span><br><span class="line"></span><br><span class="line">console.log(&apos;obj1===obj2 :&apos;, obj1===obj2) //obj1===obj2 : true</span><br><span class="line"></span><br><span class="line">let obj3 = new SingleObject() //外部不能new,但是无法完全控制</span><br><span class="line">console.log(&apos;obj3===obj1 :&apos;, obj3===obj1) //obj3===obj1 : false</span><br></pre></td></tr></table></figure><h2 id="单例模式使用场景"><a href="#单例模式使用场景" class="headerlink" title="单例模式使用场景"></a>单例模式使用场景</h2><ul><li>jQuery 的 $</li><li>模拟登录框</li><li>购物车</li><li>vuex react 中的store</li><li>代码实现登录框</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class LoginForm &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.state = &apos;hide&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  show () &#123;</span><br><span class="line">    if (this.state === &apos;show&apos;) &#123;</span><br><span class="line">      console.log(&apos;已经显示&apos;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    this.state = &apos;show&apos;</span><br><span class="line">    console.log(&apos;已经登录成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  hide () &#123;</span><br><span class="line">    if (this.state === &apos;hide&apos;) &#123;</span><br><span class="line">      console.log(&apos;已经隐藏&apos;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    this.state = &apos;hide&apos;</span><br><span class="line">    console.log(&apos;已经隐藏成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">LoginForm.getInstance = (() =&gt; &#123;</span><br><span class="line">  let instance</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    if (!instance) &#123;</span><br><span class="line">      instance = new LoginForm()</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">let login1 = LoginForm.getInstance()</span><br><span class="line">login1.show() //已经登录成功</span><br><span class="line"></span><br><span class="line">let login2 = LoginForm.getInstance()</span><br><span class="line">login2.show() //已经显示</span><br><span class="line">login2.hide() //已经隐藏成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&apos;login1===login2 :&apos;, login1===login2)</span><br><span class="line">// login1===login2 : true</span><br><span class="line">// 这就说明login1 和login2是同一个实例</span><br></pre></td></tr></table></figure><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>符合单一职责原则，只实例化唯一的对象</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-singleton/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hotkey-vscode</title>
      <link>https://shulu520.com/hotkey/hotkey-vscode/</link>
      <guid>https://shulu520.com/hotkey/hotkey-vscode/</guid>
      <pubDate>Wed, 19 Jun 2019 09:04:23 GMT</pubDate>
      <description>
      
        vscode常用快捷键总结。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;如果你想要个和现在不同的人生，就必须去做你从未做过的事情。努力之后最坏的结果是失败，但不尝试的结果则是无止境的懊悔、怀疑和平庸。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="vscode-常用快捷键"><a href="#vscode-常用快捷键" class="headerlink" title="vscode 常用快捷键"></a>vscode 常用快捷键</h2><ul><li><p>上下移动一行： Alt+Up 或 Alt+Down</p></li><li><p>向上或向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down</p></li><li><p>同时选中所有匹配： Ctrl+Shift+L</p></li><li><p>Ctrl+D 下一个匹配的也被选中 </p></li><li><p>Alt + 单击  ：插入光标</p></li><li><p>Ctrl + F2    选择当前字的所有出现</p></li><li><p>ctrl  shift  k   删除整行</p></li><li><p>ctrl  shift  a   多行注释</p></li><li><p>ctrl  f     当前文件内搜索相关代码，终于找到这个功能了，哈哈，右上角会有弹框，其中有前后箭头，表示搜索的代码上一次、下一次出现的位置，点击直接会跳转到相应的位置，并且侧边上有相应的位置标识。</p></li><li><p>ctrl - 整体缩小</p></li><li><p>ctrl = 整体放大</p></li><li><p>文件/首选项/设置 搜索zoom 根据配置 可以更精细的对大小进行操作 ctrl 加滚轮</p></li><li><p>col 选第一个 即console.log()的快捷键 且效果很棒</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/hotkey/hotkey-vscode/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

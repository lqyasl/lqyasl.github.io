<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Tue, 17 Sep 2019 06:52:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>vue技术栈-路由进阶2</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/</guid>
      <pubDate>Tue, 17 Sep 2019 06:51:21 GMT</pubDate>
      <description>
      
        vue技术栈-路由进阶2
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ul><li>来自官网</li></ul><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><ul><li>定义路由的时候可以配置 meta 字段：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/about'</span>,</span><br><span class="line">  name: <span class="string">'about'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/About'</span>),</span><br><span class="line">  meta: &#123; <span class="comment">// 路由元信息</span></span><br><span class="line">    title: <span class="string">'about'</span> <span class="comment">//页面的title</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setTitle = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.document.title = title || <span class="string">'admin'</span> <span class="comment">//默认title为admin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 路由元信息存在时调用设置title的方法</span></span><br><span class="line">  to.meta &amp;&amp; setTitle(to.meta.title) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h2><ul><li>单个路由的过渡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一组路由的过渡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 例如：App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'about' &#125;"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">:name</span>=<span class="string">"transitionName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">key</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      transitionName: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// watch $route 决定使用哪种过渡</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.name === <span class="string">'home'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'transitionName'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.transitionName = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 进入 */</span></span><br><span class="line"><span class="selector-class">.transitionName-enter</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-enter-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开 */</span></span><br><span class="line"><span class="selector-class">.transitionName-leave</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transitionName-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>&emsp;&emsp;当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。<br>&emsp;&emsp;如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><ul><li>一般用于不常用的页面 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如404页面</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'*'</span>, <span class="comment">// 所有匹配不到的路劲都会走到这里</span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Error_404.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><ul><li><a href="https://router.vuejs.org/zh/guide/advanced/data-fetching.html" target="_blank" rel="noopener">详情见官网</a></li></ul><p>&emsp;&emsp;有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：</p><p>&emsp;&emsp;导航完成之后获取：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示“加载中”之类的指示。</p><p>&emsp;&emsp;导航完成之前获取：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。</p><p>&emsp;&emsp;从技术角度讲，两种方式都不错 —— 就看你想要的用户体验是哪种。</p><h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><p>&emsp;&emsp;使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><p>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition <span class="comment">// 保持原先的滚动位置</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125; <span class="comment">// 想要页面滚到顶部</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B62/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-路由进阶1</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/</guid>
      <pubDate>Tue, 17 Sep 2019 06:49:22 GMT</pubDate>
      <description>
      
        vue技术栈-路由进阶1
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="路由进阶"><a href="#路由进阶" class="headerlink" title="路由进阶"></a>路由进阶</h1><h2 id="路由组件传参1"><a href="#路由组件传参1" class="headerlink" title="路由组件传参1"></a>路由组件传参1</h2><ul><li>动态路由</li><li>传入时props为布尔类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js 动态路由</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/argu/:name'</span>,</span><br><span class="line">  props: <span class="literal">true</span> <span class="comment">// 布尔形式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Argue.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'yachan'</span> <span class="comment">// 默认值不见效果</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由组件传参2"><a href="#路由组件传参2" class="headerlink" title="路由组件传参2"></a>路由组件传参2</h2><ul><li>普通路由</li><li>传入时props为对象形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/about'</span>,</span><br><span class="line">  props: &#123; <span class="comment">// 对象形式</span></span><br><span class="line">    food: <span class="string">'banana'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应About.vue的结构同Argu的一样</span></span><br><span class="line"><span class="comment">// props接收一下 模板中展示一下</span></span><br></pre></td></tr></table></figure><h2 id="路由组件传参3"><a href="#路由组件传参3" class="headerlink" title="路由组件传参3"></a>路由组件传参3</h2><ul><li>普通路由</li><li>传入时props为函数形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  props: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="comment">// 函数形式</span></span><br><span class="line">    food: route.query.food <span class="comment">// 例如 http://localhost:8080/#/?food=yachan</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应Home.vue的结构同Argu的一样</span></span><br><span class="line"><span class="comment">// props接收一下 模板中展示一下</span></span><br></pre></td></tr></table></figure><h2 id="H5之history模式"><a href="#H5之history模式" class="headerlink" title="H5之history模式"></a>H5之history模式</h2><ul><li>默认为哈希模式即路劲中有#号</li><li>H5之history模式好看没有#号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>, <span class="comment">// H5 history模式</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js的最后添加</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'*'</span>, <span class="comment">// 所有匹配不到的路劲都会走到这里</span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Error_404.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><ul><li>“导航”表示路由正在发生改变。</li><li>即通过跳转或取消的方式守卫导航。</li><li>例如：路由跳转前做一些验证，比如登录验证，是网站中的普遍需求。</li></ul><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><ul><li>确保要调用 next 方法，否则钩子就不会被 resolved。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HAS_LOGINED = <span class="literal">false</span> <span class="comment">// 模拟 假设还没有登录</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">'login'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (HAS_LOGINED) next()</span><br><span class="line">    <span class="keyword">else</span> next(&#123; <span class="attr">name</span>: <span class="string">'login'</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (HAS_LOGINED) next(&#123; <span class="attr">name</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line">    <span class="keyword">else</span> next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><ul><li>然而和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</li><li>一般用来改变一些跳转前后的样式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局后置钩子</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><ul><li>你可以在路由配置上直接定义 beforeEnter 守卫</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  component: Home,</span><br><span class="line">  beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">'about'</span>) alert(<span class="string">'这是从about页面来的'</span>)</span><br><span class="line">    <span class="keyword">else</span> alert(<span class="string">'这不是从about页面来的'</span>)</span><br><span class="line">    next() <span class="comment">// 一定要调用next 钩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><ul><li>可以在路由组件内直接定义以下路由导航守卫：</li><li>注意 beforeRouteEnter 是支持给 next 传递回调的唯一守卫</li><li>对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了</li><li>beforeRouteLeave这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件内部</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">  <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">  <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不过可以通过回调来解决</span></span><br><span class="line">  <span class="comment">// 次回调在页面被渲染完之后才被调用</span></span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123; <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(vm) <span class="comment">//vm即为当前组件实例 this</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">  <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="keyword">const</span> leave = confirm(<span class="string">'您确定要离开吗？当前编辑的内容还没有被保存'</span>)</span><br><span class="line">  <span class="keyword">if</span> (leave) next() <span class="comment">// 用户点击了确定 则跳转页面</span></span><br><span class="line">  <span class="keyword">else</span> next(<span class="literal">false</span>) <span class="comment">// 页面不会跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E8%BF%9B%E9%98%B61/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-路由基础</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Tue, 17 Sep 2019 06:45:24 GMT</pubDate>
      <description>
      
        vue技术栈-路由基础
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h1><h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link&gt;内部封装了a标签&lt;router-link/&gt; </span><br><span class="line">&lt;router-view/&gt; 该组件为当前路由跳转展示的区域</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/argu/:name'</span>, <span class="comment">//这里注意是 /: </span></span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Argu'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Argu.vue中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; $route.params.name &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器窗口</span></span><br><span class="line">http:<span class="comment">//localhost:8083/#/argu/shulu</span></span><br><span class="line">即可在页面上看到 shulu</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/parent'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Parent'</span>),</span><br><span class="line">  children: [ <span class="comment">//children是一个数组 好久不写都忘记了</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'child'</span>, <span class="comment">//这里直接写路劲的名字即可不要‘/’</span></span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Child'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    i am parent</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    i am child</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue原来的样子注意router-link</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/router-link&gt; |</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/</span>about<span class="string">"&gt;About&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view/&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// App.vue使用命名路由的样子注意router-link</span><br><span class="line">// 首先router.js</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  path: '/',</span><br><span class="line">  name: 'home', //这里添加一个name属性</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'about' &#125;"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/named_view'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Child'</span>),</span><br><span class="line">    email: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Email'</span>),</span><br><span class="line">    tel: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Tel'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"nav"</span>&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123; name: 'home' &#125;"</span>&gt;Home&lt;<span class="regexp">/router-link&gt; |</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="&#123; name: 'about' &#125;"&gt;About&lt;/</span>router-link&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-view/</span>&gt; <span class="comment">//渲染默认路由</span></span><br><span class="line">    &lt;router-view name=<span class="string">"email"</span>/&gt; <span class="comment">//渲染指定路由</span></span><br><span class="line">    &lt;router-view name=<span class="string">"tel"</span>/&gt; <span class="comment">//渲染制定路由</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h2 id="编程导航路由"><a href="#编程导航路由" class="headerlink" title="编程导航路由"></a>编程导航路由</h2><ul><li>即js操作路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleClick"</span>&gt;返回上一级&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ @ is an alias to /</span>src</span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.go(<span class="number">-1</span>) <span class="comment">//回退</span></span><br><span class="line">      <span class="comment">// this.$router.back() 回退</span></span><br><span class="line">      <span class="comment">// this.$router.replace() //替换</span></span><br><span class="line">      <span class="comment">// this.$router.push() //往历史记录里面添加一条记录</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><ul><li>重定向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/yachan'</span>,</span><br><span class="line">  <span class="comment">//重定向</span></span><br><span class="line">  redirect: <span class="string">'/'</span> 方式一</span><br><span class="line"></span><br><span class="line">  <span class="comment">// redirect: &#123;</span></span><br><span class="line">  <span class="comment">//   name: 'home' 方式二</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// redirect: to =&gt; '/'  方式三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>别名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  alias: <span class="string">'/home_page'</span>, <span class="comment">//起一个别名 注意前面有 '/'</span></span><br><span class="line">  name: <span class="string">'home'</span>,</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-配置篇</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/</guid>
      <pubDate>Tue, 17 Sep 2019 06:39:29 GMT</pubDate>
      <description>
      
        vue技术栈-配置篇
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h1><h2 id="项目最外层文件的配置"><a href="#项目最外层文件的配置" class="headerlink" title="项目最外层文件的配置"></a>项目最外层文件的配置</h2><ul><li>在项目目录下添加 <code>vue.config.js</code>文件并配置为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.join(__dirname, dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BASE_URL = process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"/iview-admin"</span> : <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: BASE_URL,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))<span class="comment">//别名，以后使用时@就代替src目录路劲</span></span><br><span class="line">      .set(<span class="string">"_c"</span>, resolve(<span class="string">"src/components"</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">//打不生成.map文件 速度块一些'</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: <span class="string">'http://localhost:4000'</span> <span class="comment">//跨域配置，</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src目录的文件配置"><a href="#src目录的文件配置" class="headerlink" title="src目录的文件配置"></a>src目录的文件配置</h2><ul><li><p>添加api文件夹</p></li><li><p>添加config文件夹里面为index.js</p></li><li><p>添加directive文件夹里面为index.js</p></li><li><p>添加lib文件夹里面为tool.js(纯工具文件), util.js</p></li><li><p>添加mock文件夹里面为index.js配置如下：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先 npm install mockjs -D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Mock</span><br></pre></td></tr></table></figure><ul><li>添加router文件夹里面为index.js, router.js配置为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'@/views/About'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>添加store文件夹里面为index.js, state.js, actions.js, mutations.js, module文件夹(里面为user.js等)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./module/user'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  modules: &#123; <span class="comment">// 注意这里是modules复数</span></span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/user.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E9%85%8D%E7%BD%AE%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue技术栈-创建篇</title>
      <link>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/</link>
      <guid>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/</guid>
      <pubDate>Tue, 17 Sep 2019 06:33:37 GMT</pubDate>
      <description>
      
        vue技术栈-创建篇
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;vue技术栈开发实战tallkingData数据可视化前端工程师lison课程学习笔记</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="项目初始化创建"><a href="#项目初始化创建" class="headerlink" title="项目初始化创建"></a>项目初始化创建</h2><ul><li><p>经过测试在git bash里面有问题，<code>&gt;</code>这个符号选择配置时切换不起作用，换为cmd窗口之则可以</p></li><li><p>在一个空的文件夹里面执行 <code>vue create 项目名称</code></p></li><li><p>选择手动配置</p></li><li><p>根据提示选择配置比如vuex等</p></li><li><p>配置完成后 回车 即可开始创建一个新的项目</p></li><li><p>下载好依赖之后，根据提示，<code>cd 到项目文件夹</code>，<code>npm run serve</code></p></li><li><p>即可开启一个本地服务，和一个线上服务(局域网内可以访问的)</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E6%8A%80%E6%9C%AF%E6%A0%88-%E5%88%9B%E5%BB%BA%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue官方编码规范指南</title>
      <link>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/</link>
      <guid>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Tue, 17 Sep 2019 06:27:26 GMT</pubDate>
      <description>
      
        vue官方编码规范指南
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="vue-官方编码风格指南-总结"><a href="#vue-官方编码风格指南-总结" class="headerlink" title="vue 官方编码风格指南  总结"></a>vue 官方编码风格指南  总结</h1><ol><li><p>组件名应多个单词命名避免单个单词名词</p></li><li><p>组件数据 组件的 data 必须是一个函数</p></li><li><p>Prop 定义 Prop 定义应该尽量详细</p></li><li><p>避免 v-if 和 v-for 用在一起在同一个元素</p></li><li><p>组件名中的单词顺序组件名应该以高级别的单词开头，以描述性的修饰词结尾。多级目录的方式在100+组件时才考虑。</p></li><li><p>完整单词的组件名</p></li><li><p>Prop 名大小写 驼峰命名</p></li><li><p>模板中使用中划线的方式</p></li><li><p>多个特性的元素应该分多行撰写，每个特性一行</p></li><li><p>应该把复杂计算属性分割为尽可能多的更简单的属性</p></li><li><p>样式中慎用元素选择器  多用类名</p></li></ol><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/vue/vue%E5%AE%98%E6%96%B9%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>bootstrap</title>
      <link>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/</link>
      <guid>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/</guid>
      <pubDate>Thu, 29 Aug 2019 16:32:57 GMT</pubDate>
      <description>
      
        响应式css框架bootstrap的简单使用
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;努力之后，至少不会留下遗憾。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h1><ul><li>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷</li><li>Bootstrap是基于HTML5和CSS3开发的，它在jQuery的基础上进行了更为个性化和人性化的完善，形成一套自己独有的网站风格，并兼容大部分jQuery插件</li></ul><h2 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h2><ul><li>Bootstrap 不支持 IE 古老的兼容模式。为了让 IE 浏览器运行最新的渲染模式下，建议将此 <code>&lt;meta&gt;</code> 标签加入到你的页面中：</li></ul><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code></p><h2 id="国产浏览器高速模式"><a href="#国产浏览器高速模式" class="headerlink" title="国产浏览器高速模式"></a>国产浏览器高速模式</h2><ul><li><p>国内浏览器厂商一般都支持兼容模式（即 IE 内核）和高速模式（即 webkit 内核），不幸的是，所有国产浏览器都是默认使用兼容模式，这就造成由于低版本 IE （IE8 及以下）内核让基于 Bootstrap 构建的网站展现效果很糟糕的情况。幸运的是，国内浏览器厂商逐渐意识到了这一点，某些厂商已经开始有所作为了！</p></li><li><p>将下面的 <code>&lt;meta&gt;</code> 标签加入到页面中，可以让部分国产浏览器默认采用高速模式渲染页面：</p></li></ul><p><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code></p><h2 id="bootstrap全局css样式"><a href="#bootstrap全局css样式" class="headerlink" title="bootstrap全局css样式"></a>bootstrap全局css样式</h2><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><ul><li><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。我们提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种 容器类不能互相嵌套。</p></li><li><p><strong>.container</strong> 类用于固定宽度并支持响应式布局的容器。</p></li><li>即当屏幕宽度&lt;768px时使用100%布局，而在768px以上的几个区间，指定几个固定的宽度来布局。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>.container-fluid</strong> 类用于 100% 宽度，占据全部视口（viewport）的容器。</li><li>fluid即流式布局，即100%布局。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bootstrap-基本模板"><a href="#bootstrap-基本模板" class="headerlink" title="bootstrap-基本模板"></a>bootstrap-基本模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--说明页面是html5页面--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页面使用的语言环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定当前页面的字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果是IE，会使用最新的渲染引擎进行渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标准的视口设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,user-scalable=0"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap核心样式文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../lib/bootstrap/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries: 这两个文件的引入是为了支持IE8下面的html5元素和媒体查询：因为在IE8下面默认不支持HTML5和媒体查询，所以需要引入两个插件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// 如果通过file://来查看文件，那么respond.js文件不能正常工作，说明必须在http://形式下访问才有用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html5shiv.min.js：为了在IE8下面支持HTML标签</span></span><br><span class="line"><span class="comment">    respond.min.js：为了在IE8下面支持媒体查询--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt; &lt;!--只有IE9之前才会加载这两个文件  lt:less than--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/html5shiv/html5shiv.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/respond.js/respond.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) bootstrap是依赖jquery的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/jquery/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed  bootstarp核心js文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bootstrap栅格"><a href="#Bootstrap栅格" class="headerlink" title="Bootstrap栅格"></a>Bootstrap栅格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container-fluid</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    background-color: rgb(206, 49, 49);</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container-fluid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bootstrap栅格-列排序"><a href="#bootstrap栅格-列排序" class="headerlink" title="bootstrap栅格-列排序"></a>bootstrap栅格-列排序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-offset-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: yellow;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-push-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-class">.col-xs-pull-3</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: purple;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-offset-3"</span>&gt;</span>col-xs-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-push-3"</span>&gt;</span>col-xs-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 col-xs-pull-3"</span>&gt;</span>col-xs-pull-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">列排序：</span><br><span class="line">这里以超小屏幕为例：</span><br><span class="line">col-xs-offset-3 即争对超小屏幕，元素向右偏移3格，可能会造成后面的元素换行显示，其内部使用margin-left属性实现</span><br><span class="line">col-xs-push-3 即争对超小屏幕，元素向右偏移3格，不会造成后面的元素换行显示，其内部使用position属性实现</span><br><span class="line">col-xs-pull-3 即争对超小屏幕，元素向左偏移3格，不会造成后面的元素换行显示，其内部使用position属性实现</span><br></pre></td></tr></table></figure><h2 id="bootstrap栅格-嵌套列"><a href="#bootstrap栅格-嵌套列" class="headerlink" title="bootstrap栅格-嵌套列"></a>bootstrap栅格-嵌套列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span>&#123;</span></span><br><span class="line"><span class="undefined">    background-color: pink;</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-10 "</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>嵌套列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span>嵌套列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1 "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">嵌套列：一般只需要在某一列中加一个row并添加里面的col, 这时新的列的宽度参照所在row的外面包裹的col</span><br></pre></td></tr></table></figure><h2 id="Bootstrap栅格-响应式"><a href="#Bootstrap栅格-响应式" class="headerlink" title="Bootstrap栅格-响应式"></a>Bootstrap栅格-响应式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  * &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container-fluid</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    background-color: rgb(206, 49, 49);</span></span><br><span class="line"><span class="undefined">    border: 1px solid blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden-xs col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>hidden-xs<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4 col-lg-3"</span>&gt;</span>container<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// .hidden-xs</span><br><span class="line">// .hidden-sm</span><br><span class="line">// .hidden-md</span><br><span class="line">// .hidden-lg</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8Fbootstrap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>响应式基础</title>
      <link>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Thu, 29 Aug 2019 16:32:30 GMT</pubDate>
      <description>
      
        响应式基础知识媒体查询
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;你过得好，那就是我最大的幸福。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h1><h2 id="网页布局方式"><a href="#网页布局方式" class="headerlink" title="网页布局方式"></a>网页布局方式</h2><ol><li>固定宽度布局：为网页设置一个固定的宽度，通常以px做为长度单位，常见于PC端网页。</li><li>流式布局：为网页设置一个相对的宽度，通常以百分比做为长度单位。</li><li>栅格化布局：将网页宽度人为的划分成均等的长度，然后排版布局时则以这些均等的长度做为度量单位，通常利用百分比做为长度单位来划分成均等的长度。</li><li>响应式布局：通过检测设备信息，决定网页布局方式，即用户如果采用不同的设备访问同一个网页，有可能会看到不一样的内容，一般情况下是检测设备屏幕的宽度来实现。</li></ol><ul><li>注：以上几种布局方式并不是独立存在的，实际开发过程中往往是相互结合使用的。</li></ul><p><img src="https://www.z4a.net/images/2019/08/30/responsive.md.png" alt="responsive.md.png"></p><h2 id="响应式布局-媒体查询"><a href="#响应式布局-媒体查询" class="headerlink" title="响应式布局-媒体查询"></a>响应式布局-媒体查询</h2><ul><li>利用媒体查询可以检测到屏幕的尺寸（主要检测宽度），并设置不同的CSS样式，就可以实现响应式的布局。</li><li>响应式布局常用于企业的官网、博客、新闻资讯类型网站，这些网站以浏览内容为主，没有复杂的交互。</li><li>响应式开发的目的就是:一个网站能够兼容多种终端</li><li>响应式开发的原理：媒体查询</li></ul><h3 id="常见媒体类型"><a href="#常见媒体类型" class="headerlink" title="常见媒体类型"></a>常见媒体类型</h3><ul><li>通过查询screen的宽度来指定某个宽度区间的网页布局。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">超小屏幕 (移动设备) w&lt;768px </span><br><span class="line">小屏设备  768 &lt;= w &lt;992</span><br><span class="line">中等屏幕  992 =&lt; w &lt;1200</span><br><span class="line">宽屏设备  1200px以上    w&gt;=1200</span><br></pre></td></tr></table></figure><h3 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h3><ul><li>一般判断最小宽度</li><li>并且由小到大</li><li>后面的样式覆盖前面的样式</li><li>注意and后面空格的添加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果按<span class="selector-tag">max-width</span>来算的话 </span><br><span class="line">就将值从大往小写</span><br></pre></td></tr></table></figure><h3 id="另一种书写方式-更好一些"><a href="#另一种书写方式-更好一些" class="headerlink" title="另一种书写方式-更好一些"></a>另一种书写方式-更好一些</h3><ul><li>判断引入满足媒体条件的css样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"a.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"a.css"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width: 992px) and (max-width: 1200px)"</span> <span class="attr">href</span>=<span class="string">"b.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/responsive/m-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>m-移动端-插件</title>
      <link>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/</link>
      <guid>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Wed, 28 Aug 2019 06:50:19 GMT</pubDate>
      <description>
      
        移动端-常见插件的使用
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="移动端插件的使用"><a href="#移动端插件的使用" class="headerlink" title="移动端插件的使用"></a>移动端插件的使用</h1><h2 id="swiper-js"><a href="#swiper-js" class="headerlink" title="swiper.js"></a>swiper.js</h2><ul><li>html 结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./uploads/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./uploads/l5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--分页器。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--左箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--右箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常用的配置如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">".swiper-container"</span>, &#123;</span><br><span class="line">  <span class="comment">// autoplay: true,</span></span><br><span class="line">  speed: <span class="number">1000</span>, <span class="comment">//轮播速度</span></span><br><span class="line">  autoplay: &#123;</span><br><span class="line">    disableOnInteraction: <span class="literal">false</span> <span class="comment">//鼠标操作后重新开启自动轮播</span></span><br><span class="line">  &#125;,</span><br><span class="line">  loop: <span class="literal">true</span>, <span class="comment">//轮播图片循环</span></span><br><span class="line">  grabCursor: <span class="literal">true</span>, <span class="comment">//鼠标操作形状</span></span><br><span class="line">  effect: <span class="string">"cube"</span>, <span class="comment">//3D旋转效果</span></span><br><span class="line">  cubeEffect: &#123;</span><br><span class="line">    slideShadows: <span class="literal">true</span>,</span><br><span class="line">    shadow: <span class="literal">true</span>,</span><br><span class="line">    shadowOffset: <span class="number">50</span>, <span class="comment">//阴影距离</span></span><br><span class="line">    shadowScale: <span class="number">0.8</span> <span class="comment">//阴影缩放比例</span></span><br><span class="line">  &#125;,</span><br><span class="line">  pagination: &#123;</span><br><span class="line">    <span class="comment">//分页 即小点点</span></span><br><span class="line">    el: <span class="string">".swiper-pagination"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  navigation: &#123;</span><br><span class="line">    <span class="comment">//左右按钮</span></span><br><span class="line">    nextEl: <span class="string">".swiper-button-next"</span>,</span><br><span class="line">    prevEl: <span class="string">".swiper-button-prev"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="iscroll-js"><a href="#iscroll-js" class="headerlink" title="iscroll.js"></a>iscroll.js</h2><ul><li>为滚动起容器增加 position:relative 或者 absolute 样式。</li><li>容器需要超出隐藏</li><li>html 结构：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&amp;#x26C5;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常见配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在文档加载完成之后</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#wrapper"</span>, &#123;</span><br><span class="line">    mouseWheel: <span class="literal">true</span>, <span class="comment">// 响应鼠标中建</span></span><br><span class="line">    scrollbars: <span class="literal">true</span>, <span class="comment">// 显示滚动条</span></span><br><span class="line">    interactiveScrollbars: <span class="literal">true</span> <span class="comment">// 可拖动的滚动条</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollTo(x, y, time, easing) 滚动到指定的位置</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollTo(<span class="number">0</span>, <span class="number">-100</span>, <span class="number">500</span>, IScroll.utils.ease.elastic);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollBy(x, y, time, easing) 可以传递X和Y的值从当前位置进行滚动</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollBy(<span class="number">0</span>, <span class="number">-200</span>, <span class="number">1000</span>, IScroll.utils.ease.bounce);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrollToElement(el, time, offsetX, offsetY, easing) //滚动到指定元素的左上角位置。</span></span><br><span class="line">  <span class="comment">// 测试时 无效果啊</span></span><br><span class="line">  <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.querySelector(<span class="string">"#wrapper"</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    myScroll.scrollToElement(wrapper, <span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>, IScroll.utils.ease.bounce);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1 :"</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="better-scroll-js"><a href="#better-scroll-js" class="headerlink" title="better-scroll.js"></a>better-scroll.js</h2><ul><li>基于iscroll.js</li></ul><h2 id="fastclick-js"><a href="#fastclick-js" class="headerlink" title="fastclick.js"></a>fastclick.js</h2><ul><li>直接拿来用就行了</li><li>touch 有点透效果 click 有延迟效果</li><li>fastclick 则无点透 无延迟</li><li>适用于 PC 和移动端</li><li>这一段代码是从 github 官网上复制来的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"addEventListener"</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">"DOMContentLoaded"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mobile-基础</title>
      <link>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Wed, 21 Aug 2019 04:37:35 GMT</pubDate>
      <description>
      
        移动端基础知识
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;情感宣言——世界上最好的事，莫过于一句欣赏，一句懂得。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><ul><li>移动设备与 PC 设备最大的差异在于屏幕，这主要体现在屏幕尺寸和屏幕分辨率两个方面。</li></ul><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><ul><li>通常我们所指的屏幕尺寸，实际上指的是屏幕对角线的长度（一般用英寸来度量）</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-31-36.png" alt="屏幕尺寸"></p><h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><ul><li>分辨率则一般用像素来度量 px，表示屏幕水平和垂直方向的像素数，例如 1920*1080 指的是屏幕垂直方向和水平方向分别有 1920 和 1080 个像素点而构成。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-33-44.png" alt="屏幕分辨率"></p><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><ul><li>在 Web 开发中可以使用 px（像素）、em、pt（点）、in（英寸）、cm（厘米）做为长度单位，我们最常用 px（像素）做为长度单位。</li><li>我们可以将上述的几种长度单位划分成相对长度单位和绝对长度单位。</li><li>例如：iPhone3G/S 和 iPhone4/S 的屏幕尺寸都为 3.5 英寸（in）但是屏幕分辨率却分别为 480<em>320px、960</em>480px，由此我们可以得出英寸是一个绝对长度单位，而<strong>像素是一个相对长度</strong>单位（像素并没有固定的长度）。</li></ul><h2 id="像素密度-PPI"><a href="#像素密度-PPI" class="headerlink" title="像素密度 PPI"></a>像素密度 PPI</h2><ul><li>利用勾股定理我们可以计算得出 PPI。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/PPI.md.png" alt="像素密度PPI"></p><ul><li>PPI 值的越大说明单位尺寸里所能容纳的像素数量就越多，所能展现画面的品质也就越精细，反之就越粗糙。</li><li>Retina 即视网膜屏幕，苹果注册的命名方式，意指具有较高 PPI（大于 320）的屏幕。</li><li>思考：在屏幕尺寸（英寸）固定时，PPI 和像素大小的关系？</li><li>结论：屏幕尺寸固定时，当 PPI 越大，像素的实际大小就会越小，当 PPI 越小，像素实际大小就越大。(像素是一个相对长度单位)</li></ul><h2 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h2><ul><li><p>随着技术发展，设备不断更新，出现了不同 PPI 的屏幕共存的状态（如 iPhone3G/S 为 163PPI，iPhone4/S 为 326PPI），像素不再是统一的度量单位，这会造成同样尺寸的图像在不同 PPI 设备上的显示大小不一样。</p></li><li><p>假设你设计了一个 163·163 的蓝色方块，在 PPI 为 163 的屏幕上，那这个方块看起来正好就是 1·1 寸大小，在 PPI 为 326 的屏幕上，这个方块看起来就只有 0.5*0.5 寸大小了。</p></li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-37-29.md.png" alt="设备独立像素"></p><ul><li><p>做为用户是不会关心这些细节的，他们只是希望在不同 PPI 的设备上看到的图像内容差不多大小，所以这时我们需要一个新的单位，这个新的单位能够保证图像内容在不同的 PPI 设备看上去大小应该差不多，这就是<strong>独立像素</strong>，在 IOS 设备上叫 PT(Point)，Android 设备上叫 DIP(Device independent Pixel)或 DP。</p></li><li><p>举例说明就是 iPhone 3G（PPI 为 163）1dp = 1px，iPhone 4（PPI 为 326）1dp = 2px。</p></li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-12-26.md.png" alt="Snipaste_2019-08-20_16-12-26.md.png"></p><ul><li><p>我们也不难发现，如果想要 iPhone 3G/S 和 iPhone 4/S 图像内容显示一致，可以把 iPhone 4/S 的尺寸放大一倍（<strong>它们是一个 2 倍(@2x)的关系</strong>），即在 iPhone3G/S 的上尺寸为 44·44px，在 iPhone4/S 上为 88·88px，我们要想实现这样的结果可以设置 44·44dp，这时在 iPhone3G/S 上代表 44·44px，在 iPhone4/S 上代表 88*88px，最终用可以看到的图像差不多大小。</p></li><li><p>dp 同 px 是有一个对应（比例）关系的，这个对应（比例）关系是操作系统确定并处理，目的是确保不同 PPI 屏幕所能显示的图像大小是一致的，通过 window.devicePixelRatio 可以获得该比例值。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取设备独立像素 (像素比)</span></span><br><span class="line"><span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure><ul><li>dp（或 pt）和 px 并不总是绝对的倍数关系（并不总能保证能够整除），而是 window.devicePixelRatio ~= 物理像素/独立像素，然而这其中的细节我们不必关心，因为操作系统会自动帮我们处理好（保证 1dp 在不同的设备上看上去大小差不多）。</li></ul><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><ol><li>物理像素指的是屏幕渲染图像的最小单位，属于屏幕的物理属性，不可人为进行改变，其值大小决定了屏幕渲染图像的品质，我们以上所讨论的都指的是物理像素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕的物理像素尺寸</span></span><br><span class="line"><span class="built_in">window</span>.screen.width;</span><br><span class="line"><span class="built_in">window</span>.screen.height;</span><br></pre></td></tr></table></figure><ol start="2"><li>CSS 像素，与设备无关像素，指的是通过 CSS 进行网页布局时用到的单位，其默认值(PC 端)是和物理像素保持一致的（1 个单位的 CSS 像素等于 1 个单位的物理像素），但是我们可通缩放来改变其大小。</li></ol><ul><li>我们需要理解的是物理像素和 CSS 像素的一个关系，1 个物理像素并不总是等于一个 CSS 像素，通过调整浏览器缩放比例来改变。</li></ul><h2 id="2、3-倍图"><a href="#2、3-倍图" class="headerlink" title="2、3 倍图"></a>2、3 倍图</h2><ul><li>为了在像素密度高的设备上图片能够清晰显示，而不是被放大显示(会模糊)，设计师要针对不同的像素比设计不同像素的图片。</li><li>在设备独立像素为 2 的设备上使用设计师专门为其设计的图片即可。</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_16-39-38.png" alt="2倍图"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li>模拟调试</li><li>真机调试</li></ul><h1 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口 viewport"></a>视口 viewport</h1><ul><li>视口（viewport）是用来约束网站中最顶级块元素 html 的，即它决定了<code>&lt;html&gt;</code>的大小。</li></ul><h3 id="PC-设备-viewport"><a href="#PC-设备-viewport" class="headerlink" title="PC 设备 viewport"></a>PC 设备 viewport</h3><ul><li>在 PC 设备上 viewport 的大小取决于浏览器窗口的大小，以 CSS 像素做为度量单位。</li><li>通过以往 CSS 的知识，我们都能理解<code>&lt;html&gt;</code>的大小是会影响到我们的网页布局的，而 viewport 又决定了<code>&lt;html&gt;</code>的大小，所以 viewport 间接的决定并影响了我们网页的布局。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取viewport的大小</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>在 PC 端，我们通过调整浏览器窗口可以改变 viewport 的大小，为了保证网页布局不发生错乱，需要给元素设定较大固定宽度。</li></ul><h3 id="移动端-viewport"><a href="#移动端-viewport" class="headerlink" title="移动端 viewport"></a>移动端 viewport</h3><ul><li><p>移动设备屏幕普遍都是比较小的，但是大部分的网站又都是为 PC 设备来设计的，要想让移动设备也可以正常显示网页，移动设备不得不做一些处理，通过上面的例子我们可以知道只要 viewport 足够大，就能保证原本为 PC 设备设计的网页也能在移动设备上正常显示，移动设备厂商也的确是这样来处理的。</p></li><li><p>在移动设备上 viewport 不再受限于浏览器的窗口，而是允许开发人员自由设置 viewport 的大小，通常浏览 器会设置一个默认大小的 viewport，为了能够正常显示那些专为 PC 设计的网页，一般这个值的大小会大于屏幕的尺寸。</p></li><li>如下图为常见默认 viewport 大小（仅供参考）</li></ul><p><img src="https://www.z4a.net/images/2019/08/21/Snipaste_2019-08-20_17-45-07.md.png" alt="移动端viewport默认"></p><ul><li><p>从图中统计我们得知不同的移动厂商分别设置了一个默认的 viewport 的值，这个值保证大部分网页可以正常在移动设备下浏览。<strong>但是通常会产生缩放和滚动条。</strong></p></li><li><p>产生缩放和滚动条的原因是什么呢？</p></li><li><p>进一步对移动设备的 viewport 进行分析，移动设备上有 2 个 viewport（为了方便讲解人为定义的），分别是 layout viewport 和 ideal viewport。</p></li></ul><h4 id="layout-viewport-布局视口"><a href="#layout-viewport-布局视口" class="headerlink" title="layout viewport 布局视口"></a>layout viewport 布局视口</h4><ul><li>指的是我们可以进行网页布局区域的大小，同样是以 CSS 像素做为计量单位，可以通过下面方式获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取layout viewport</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>通过前面介绍我们知道，如果要保证为 PC 设计的网页在移动设备上布局不发生错乱，移动设备会默认设置一个较大的 viewport（如 IOS 为 980px），这个 viewport 实际指的是 layout viewport。</li></ul><h4 id="ideal-viewport-理想视口"><a href="#ideal-viewport-理想视口" class="headerlink" title="ideal viewport 理想视口"></a>ideal viewport 理想视口</h4><ul><li>设备屏幕区域，（以设备独立像素 PT、DP 做为单位）以 CSS 像素做为计量单位，其大小是不可能被改变，通过下面方式可以获取。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取ideal viewport有两种情形</span></span><br><span class="line"><span class="comment">// 新设备</span></span><br><span class="line"><span class="built_in">window</span>.screen.width;</span><br><span class="line"><span class="built_in">window</span>.screen.height;</span><br><span class="line"><span class="comment">// 老设备</span></span><br><span class="line"><span class="built_in">window</span>.screen.width / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="built_in">window</span>.screen.height / <span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure><ul><li>理解两个 viewport 后, 我们来解释为什么网页会被缩放或出现水平滚动条，其原因在于移动设备浏览器会默认设置一个 layout viewport，并且这个值会大于 ideal viewport，那么我们也知道<strong>ideal viewport 就是屏幕区域</strong>, layout viewport 是我们布局网页的区域，那么最终 layout viewport 是要显示在 ideal viewport 里的，而 layout viewport 大于 ideal viewport 时，于是就出现滚动条了，那么为什么有的移动设备网页内容被缩放了呢？移动设备厂商认为将网页完整显示给用户才最合理，而不该出现滚动条，所以就将 layout viewport 进行了缩放，使其恰好完整显示在 ideal viewport（屏幕）里，其缩放比例为 ideal viewport / layout viewport。</li></ul><h2 id="移动浏览器"><a href="#移动浏览器" class="headerlink" title="移动浏览器"></a>移动浏览器</h2><ul><li>移动端开发主要是针对 IOS 和 Android 两个操作系统平台的，除此之外还有 Windows Phone。</li><li>移动端主要可以分成三大类，系统自带浏览器、应用内置浏览器、第三方浏览器</li></ul><h3 id="系统浏览器："><a href="#系统浏览器：" class="headerlink" title="系统浏览器："></a>系统浏览器：</h3><ul><li>指跟随移动设备操作系统一起安装的浏览器。</li></ul><h3 id="应用内置浏览器："><a href="#应用内置浏览器：" class="headerlink" title="应用内置浏览器："></a>应用内置浏览器：</h3><ul><li>通常在移动设备上都会安装一些 APP 例如 QQ、微信、微博、淘宝等，这些 APP 里往往会内置一个浏览器，我们称这个浏览器为应用内置浏览器（也叫 WebView），这个内置的浏览器一般功能比较简单，并且客户端开发人员可以更改这个浏览器的某些设置，在我们理实的开发里这个浏览器很重要。</li></ul><h3 id="第三方浏览器："><a href="#第三方浏览器：" class="headerlink" title="第三方浏览器："></a>第三方浏览器：</h3><ul><li><p>指安装在手机的浏览器如 FireFox、Chrome、360 等等。</p></li><li><p>在 IOS 和 Android 操作系统上自带浏览器、应用内置浏览器都是基于 Webkit 内核的。</p></li></ul><h1 id="屏幕适配-Viewport-详解"><a href="#屏幕适配-Viewport-详解" class="headerlink" title="屏幕适配 Viewport 详解"></a>屏幕适配 Viewport 详解</h1><ul><li>经过分析我们得到，移动页面最理想的状态是，避免滚动条且不被默认缩放处理，我们可以通过设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;&quot;&gt;</code>来进行控制，并改变浏览器默认的 layout viewport 的宽度。</li></ul><h2 id="viewport-介绍"><a href="#viewport-介绍" class="headerlink" title="viewport 介绍"></a>viewport 介绍</h2><ul><li>是由苹果公司为了解决移动设备浏览器渲染页面而提出的解决方案，后来被其它移动设备厂商采纳，其使用参数如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过设置属性content=""实现，中间以逗号分隔</span></span><br><span class="line"><span class="comment">// 例如&lt;meta name="viewport" content="width=device-width"&gt;</span></span><br><span class="line">width 设置layout viewport 宽度，其取值可为数值或者device-width。</span><br><span class="line"></span><br><span class="line">height 设置layout viewport 高度，其取值可为数值或者device-height</span><br><span class="line"></span><br><span class="line">initital-scale设置页面的初始缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">maximum-scale允许用户的最大缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">minimum-scale允许用户的最小缩放值，为一个数字，可以带小数。</span><br><span class="line"></span><br><span class="line">user-scalable是否允许用户进行缩放，值为<span class="string">"no"</span>或<span class="string">"yes"</span>。</span><br><span class="line"></span><br><span class="line">注：device-width 和 device-height就是ideal viewport的宽高</span><br></pre></td></tr></table></figure><h2 id="viewport-控制缩放"><a href="#viewport-控制缩放" class="headerlink" title="viewport 控制缩放"></a>viewport 控制缩放</h2><ol><li>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code>，这时我们发现网页没有被浏览器设置缩放。</li><li>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>，这时我们发现网页也没有被浏览器设设置缩放。</li></ol><ul><li><p>当我们设置 width=device-width，也达到了 initial-scale=1 的效果，得知其实  initial-scale = ideal viewport / layout viewport。</p></li><li><p>两种方式都可以控制缩放，开发中一般同时设置 width=device-width 和 initial-scale=1.0（为了解决一些兼容问题）参见移动前端开发之 viewport 深入理解，即<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p></li></ul><h2 id="viewport-避免滚动"><a href="#viewport-避免滚动" class="headerlink" title="viewport 避免滚动"></a>viewport 避免滚动</h2><ul><li>我们知道，滚动条是  layout viewport  相对于  ideal viewport  的，所以只要设置  layout viewport  小于或等于  ideal viewport，即<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></li><li>盒子宽度设置为百分比的宽度</li></ul><h2 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h2><h3 id="百分比宽度"><a href="#百分比宽度" class="headerlink" title="百分比宽度"></a>百分比宽度</h3><ol><li><p>设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></p></li><li><p>设置页面宽度为百分比</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">width参照父元素的宽度</span><br><span class="line">height参照父元素的高度</span><br><span class="line">padding参照父元素的宽度</span><br><span class="line">border不支持百分比设置</span><br><span class="line">margin参照父元素的宽度</span><br></pre></td></tr></table></figure><ul><li>我们发现这种方案最容易理解，但是在设置元素高度时有非常大的局限性。</li><li>因为页面的高度是不固定的。</li></ul><h3 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h3><h1 id="移动端触屏事件"><a href="#移动端触屏事件" class="headerlink" title="移动端触屏事件"></a>移动端触屏事件</h1><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touchstart: 手指触摸屏幕时触发;</span><br><span class="line">touchmove: 手指在屏幕上移动时触发;</span><br><span class="line">touchend: 手指离开屏幕时触发;</span><br></pre></td></tr></table></figure><h2 id="TouchEvent-对象"><a href="#TouchEvent-对象" class="headerlink" title="TouchEvent 对象"></a>TouchEvent 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touches: 位于屏幕上的所有手指的列表</span><br><span class="line">targetTouches: 位于该元素上的所有手指的列表</span><br><span class="line">changedTouches：touchstart时包含刚与触摸屏接触的触点，touchend时包含离开触摸屏的触点</span><br><span class="line">注：没有对比出touches同targetTouches的差异，推荐使用targetTouches</span><br></pre></td></tr></table></figure><h2 id="Touch-对象"><a href="#Touch-对象" class="headerlink" title="Touch 对象"></a>Touch 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clientX/Y手指相对于layout viewport的水平/垂直像素距离</span><br><span class="line">pageX/Y手指相对于layout viewport的水平/垂直像素距离（含滚动）</span><br><span class="line">screenX/Y手指相对于layout viewport的水平/垂直像素距离（含滚动）</span><br><span class="line">（未设置viewport时，screenX/Y在Webview中不正确）</span><br><span class="line">target手指最初与屏幕接触时的元素</span><br><span class="line">移动开发通常会设置<span class="string">`&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;`</span>，这时这三对坐标值是完全一样的。</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/mobile/m-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ES7</title>
      <link>https://shulu520.com/js-ES7/js-ES7/</link>
      <guid>https://shulu520.com/js-ES7/js-ES7/</guid>
      <pubDate>Sat, 17 Aug 2019 08:38:18 GMT</pubDate>
      <description>
      
        ES7重点知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;大家都有不一样的难过和快乐 只是我们总是下意识 拿自己的劣势去和别人的优势来比</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><h2 id="ES7之异步async-await函数"><a href="#ES7之异步async-await函数" class="headerlink" title="ES7之异步async/await函数"></a>ES7之异步async/await函数</h2><ul><li>概念：真正意义上去解决异步回调的问题，同步流程表达异步操作</li><li>本质：Generator的语法糖</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> 异步操作;</span><br><span class="line">  <span class="keyword">await</span> 异步操作；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"><span class="number">1</span>、不需要像Generator去调用next方法，遇到<span class="keyword">await</span>等待，当前的异步操作完成就往下执行</span><br><span class="line"><span class="number">2</span>、返回的总是<span class="built_in">Promise</span>对象，可以用then方法进行下一步操作</span><br><span class="line"><span class="number">3</span>、<span class="keyword">async</span>取代Generator函数的星号*，<span class="keyword">await</span>取代Generator的<span class="keyword">yield</span></span><br><span class="line"><span class="number">4</span>、语意上更为明确，使用简单，经临床验证，暂时没有任何副作用</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendXhr</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url,</span><br><span class="line">      type: <span class="string">'GET'</span>,</span><br><span class="line">      success: <span class="function"><span class="params">data</span> =&gt;</span> resolve(data),</span><br><span class="line">      error: <span class="function"><span class="params">error</span> =&gt;</span> resolve(<span class="literal">false</span>) <span class="comment">//技巧 小聪明 </span></span><br><span class="line">      <span class="comment">// 若调用reject的话 报错用户看不到</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getNews</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> sendXhr(url);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    alert(<span class="string">'暂时没有新闻推送...'</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> sendXhr(url);</span><br><span class="line">  <span class="built_in">console</span>.log(result, result2);</span><br><span class="line">&#125;</span><br><span class="line">getNews(<span class="string">'http://localhost:3000/news?id=2'</span>)</span><br></pre></td></tr></table></figure><h2 id="ES7扩展指数运算符"><a href="#ES7扩展指数运算符" class="headerlink" title="ES7扩展指数运算符**"></a>ES7扩展指数运算符**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指数运算符: **</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num :'</span>, num);<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h2 id="ES7数组扩展includes"><a href="#ES7数组扩展includes" class="headerlink" title="ES7数组扩展includes"></a>ES7数组扩展includes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.includes(value) : 判断数组中是否包含指定value</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'abc'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'a'</span>))<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'abc'</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-ES7/js-ES7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ES6</title>
      <link>https://shulu520.com/js-ES6/js-ES6/</link>
      <guid>https://shulu520.com/js-ES6/js-ES6/</guid>
      <pubDate>Sat, 17 Aug 2019 08:38:04 GMT</pubDate>
      <description>
      
        ES6重点知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;我想任何人 在经历时 都不会知道自己正在经历 生平中最幸福的时刻 我们生活中那些被遗漏的美好时光</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="ES6-2个新的关键字"><a href="#ES6-2个新的关键字" class="headerlink" title="ES6-2个新的关键字"></a>ES6-2个新的关键字</h2><ul><li>let/const</li><li>块作用域</li><li>没有变量提升</li><li>不能重复定义</li><li>值不可变 const</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a :'</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="number">4</span></span><br><span class="line">B = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'B :'</span>, B) <span class="comment">//报错 常量值不可变</span></span><br></pre></td></tr></table></figure><h2 id="ES6-变量的解构赋值"><a href="#ES6-变量的解构赋值" class="headerlink" title="ES6-变量的解构赋值"></a>ES6-变量的解构赋值</h2><ul><li>将包含多个数据的对象(数组)一次赋值给多个变量</li><li>数据源: 对象/数组</li><li>目标: {a, b}/[a, b]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解构 左右两边的数据结构必须一致</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'yachan'</span>,</span><br><span class="line">  sex: <span class="string">'女神'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, sex&#125; = obj  </span><br><span class="line"><span class="comment">// 对象的解构赋值是按照属性名查找并赋值的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name, sex :'</span>, name, sex);<span class="comment">//name, sex : yachan 女神</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">&#123; name, sex &#125;</span>) </span>&#123;<span class="comment">//参数为对象时 形参也可以解构赋值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name, sex :'</span>, name, sex)</span><br><span class="line">&#125;</span><br><span class="line">foo(obj)<span class="comment">//name, sex : yachan 女神</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [a, b] = arr</span><br><span class="line"><span class="keyword">let</span> [,, c, d] = arr <span class="comment">//可以用 ','占位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的解构赋值是按下标进行匹配的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a, b :'</span>, a, b)<span class="comment">//a, b : 1 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c, d :'</span>, c, d);<span class="comment">//c, d : 34 4</span></span><br></pre></td></tr></table></figure><h2 id="ES6-各种数据类型的扩展"><a href="#ES6-各种数据类型的扩展" class="headerlink" title="ES6-各种数据类型的扩展"></a>ES6-各种数据类型的扩展</h2><h3 id="ES6-数值Number的扩展"><a href="#ES6-数值Number的扩展" class="headerlink" title="ES6-数值Number的扩展"></a>ES6-数值Number的扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 二进制与八进制数值表示法: 二进制用<span class="number">0</span>b, 八进制用<span class="number">0</span>o</span><br><span class="line"><span class="number">2.</span> <span class="built_in">Number</span>.isFinite(i) : 判断是否是有限大的数</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Number</span>.isNaN(i) : 判断是否是<span class="literal">NaN</span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Number</span>.isInteger(i) : 判断是否是整数</span><br><span class="line"><span class="number">5.</span> <span class="built_in">Number</span>.parseInt(str) : 将字符串转换为对应的数值</span><br><span class="line"><span class="number">6.</span> <span class="built_in">Math</span>.trunc(i) : 直接去除小数部分</span><br></pre></td></tr></table></figure><h3 id="ES6-字符串String的扩展"><a href="#ES6-字符串String的扩展" class="headerlink" title="ES6-字符串String的扩展"></a>ES6-字符串String的扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">模板字符串</span><br><span class="line">  作用: 简化字符串的拼接</span><br><span class="line">  变化的部分使用$&#123;xxx&#125;定义</span><br><span class="line"></span><br><span class="line">includes(str) : 判断是否包含指定的字符串</span><br><span class="line">startsWith(str) : 判断是否以指定字符串开头</span><br><span class="line">endsWith(str) : 判断是否以指定字符串结尾</span><br><span class="line">repeat(count) : 重复指定次数</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'yachanshulu'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'shu'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'ya'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'lu'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> str2 = str.repeat(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str2)<span class="comment">//yachanshuluyachanshulu</span></span><br></pre></td></tr></table></figure><h3 id="ES6-对象Object的扩展"><a href="#ES6-对象Object的扩展" class="headerlink" title="ES6-对象Object的扩展"></a>ES6-对象Object的扩展</h3><ul><li>简化的对象写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    getName () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;,</span><br><span class="line">    setName (name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将源对象的属性复制到目标对象上 混入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2..)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'shulu'</span>,</span><br><span class="line">  sex: <span class="string">'女神'</span>, </span><br><span class="line">  getName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">age</span>: <span class="string">'shulu'</span>, <span class="attr">love</span>: <span class="string">'男神'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(o, obj1, obj2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o :'</span>, o)</span><br><span class="line"><span class="comment">//o : &#123;name: "shulu", sex: "女神", getName: ƒ, age: "shulu", love: "男神"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>判断2个数据 是否完全相等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(v1, v2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.is()方法底层是按照字符串去判断的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Object.is(NaN, NaN) :'</span>, <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));</span><br><span class="line"><span class="comment">// Object.is(NaN, NaN) : true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Object.is(0, -0) :'</span>, <span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>));</span><br><span class="line"><span class="comment">// Object.is(0, -0) : false</span></span><br></pre></td></tr></table></figure><ul><li>隐式原型属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__proto__ 属性 ES6规定可以直接修改这个属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;,</span><br><span class="line">    obj2 = &#123;<span class="attr">money</span>: <span class="number">99999999</span>&#125;</span><br><span class="line"></span><br><span class="line">obj1.__proto__ = obj2 让obj2做obj1的原型对象</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1 :'</span>, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1.money :'</span>, obj1.money);</span><br><span class="line"><span class="comment">// obj1 : &#123;&#125;</span></span><br><span class="line"><span class="comment">// obj1.money : 99999999</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### ES6-数组的扩展</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">将伪数组对象或可遍历对象转换为真数组</span><br><span class="line"><span class="built_in">Array</span>.from(v) </span><br><span class="line"></span><br><span class="line">将一系列值转换成数组</span><br><span class="line"><span class="built_in">Array</span>.of(v1, v2, v3) </span><br><span class="line"></span><br><span class="line">找出第一个满足条件返回<span class="literal">true</span>的元素</span><br><span class="line">find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line">找出第一个满足条件返回<span class="literal">true</span>的元素下标</span><br><span class="line">findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="ES6-函数的扩展"><a href="#ES6-函数的扩展" class="headerlink" title="ES6-函数的扩展"></a>ES6-函数的扩展</h3><ul><li>箭头函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用来定义匿名函数</span><br><span class="line"></span><br><span class="line">基本语法:</span><br><span class="line">  没有参数: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'xxxx'</span>)</span><br><span class="line">  一个参数: <span class="function"><span class="params">i</span> =&gt;</span> i+<span class="number">2</span></span><br><span class="line">  大于一个参数: <span class="function">(<span class="params">i,j</span>) =&gt;</span> i+j</span><br><span class="line">  函数体不用大括号: 函数体只有一条语句或表达式时 默认返回结果</span><br><span class="line">  函数体如果有多个语句, 需要用&#123;&#125;包围</span><br><span class="line"></span><br><span class="line">使用场景: 多用来定义回调函数</span><br></pre></td></tr></table></figure><p><strong>箭头函数的this：</strong><br>箭头函数没有自己的this<br>箭头函数的this是定义的时候决定的</p><p>如何判断箭头函数this是谁：看外层是否有函数<br> 有的话就 是外层函数的this 而外层函数的this由调用者决定<br> 没有的话 就是window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'yachan'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  getName: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//箭头函数</span></span><br><span class="line">    btn1.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//箭头函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName()<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">obj.getAge = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//与getName的定义一样</span></span><br><span class="line">  btn2.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge()<span class="comment">//window</span></span><br></pre></td></tr></table></figure><ul><li>形参的默认值 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义形参时指定其默认的值</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span> (<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'x, y :'</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line">getPoint()<span class="comment">//x, y : 0 0</span></span><br><span class="line">getPoint(<span class="number">22</span>, <span class="number">33</span>) <span class="comment">//x, y : 22 33</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rest(可变)参数</span></span><br><span class="line"><span class="comment">//通过形参左侧的...来表达, 取代arguments的使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span> (<span class="params">a, ...value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNumber(<span class="number">1</span>, <span class="number">2</span>, <span class="number">67</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符(...) 可以分解出数组或对象中的数据</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2]</span><br><span class="line"></span><br><span class="line">arr3.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x - y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3);<span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="ES6深度克隆deepClone"><a href="#ES6深度克隆deepClone" class="headerlink" title="ES6深度克隆deepClone"></a>ES6深度克隆deepClone</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkedType</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">  <span class="comment">// Object.prototype.toString.call() 返回值[Object xxx]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度克隆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result, <span class="comment">//最终返回值 </span></span><br><span class="line">  targetType = checkedType(target) <span class="comment">//要克隆的目标对象的数据类型</span></span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="string">'Object'</span>) &#123;</span><br><span class="line">    result = &#123;&#125; <span class="comment">//初始化为一个空对象</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">'Array'</span>) &#123;</span><br><span class="line">    result = [] <span class="comment">//初始化为一个空数组</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 能走到这里说明要克隆的对象的数据类型为对象或者数组</span></span><br><span class="line">  <span class="comment">// 遍历目标对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="comment">// 枚举对象则i为key</span></span><br><span class="line">    <span class="comment">// 枚举数组则i为index</span></span><br><span class="line">    <span class="keyword">if</span> (target.hasOwnProperty(i)) &#123;<span class="comment">//目标对象自身的属性 不要原型对象上的属性</span></span><br><span class="line">      <span class="keyword">let</span> value = target[i]</span><br><span class="line">      <span class="keyword">if</span> (checkedType(value) === <span class="string">'Object'</span> || <span class="string">'Array'</span>) &#123;</span><br><span class="line">        result[i] = deepClone(value)<span class="comment">//递归方法</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, &#123;<span class="attr">name</span>: <span class="string">'shulu'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, [<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">sex</span>: <span class="string">'女神'</span>&#125;]]</span><br><span class="line"><span class="keyword">let</span> cloneArr = deepClone(arr)</span><br><span class="line"></span><br><span class="line">cloneArr[<span class="number">1</span>].name = <span class="string">'yachan'</span></span><br><span class="line">cloneArr[<span class="number">2</span>][<span class="number">2</span>].sex = <span class="string">'男生'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'cloneArr :'</span>, cloneArr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr :'</span>, arr);</span><br><span class="line"><span class="comment">// 结果互不干扰</span></span><br></pre></td></tr></table></figure><h2 id="ES6之Symbol一种新的原始数据类型"><a href="#ES6之Symbol一种新的原始数据类型" class="headerlink" title="ES6之Symbol一种新的原始数据类型"></a>ES6之Symbol一种新的原始数据类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ES5中对象的属性名都是字符串，容易造成重名，污染环境</span><br><span class="line"><span class="built_in">Symbol</span>：</span><br><span class="line">概念：ES6中的添加了一种原始数据类型symbol(已有的原始数据类型：<span class="built_in">String</span>, <span class="built_in">Number</span>, boolean, <span class="literal">null</span>, <span class="literal">undefined</span>, 对象)</span><br><span class="line">特点：</span><br><span class="line">  <span class="number">1</span>、<span class="built_in">Symbol</span>属性对应的值是唯一的，解决命名冲突问题</span><br><span class="line">  <span class="number">2</span>、<span class="built_in">Symbol</span>值不能与其他数据进行计算，包括同字符串拼串</span><br><span class="line">  <span class="number">3</span>、<span class="keyword">for</span> <span class="keyword">in</span>, <span class="keyword">for</span> <span class="keyword">of</span>遍历时不会遍历symbol属性。</span><br><span class="line">使用：</span><br><span class="line">  <span class="number">1</span>、调用<span class="built_in">Symbol</span>函数得到symbol值</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[symbol] = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>、传参标识</span><br><span class="line">    <span class="keyword">let</span> symbol = <span class="built_in">Symbol</span>(<span class="string">'one'</span>);</span><br><span class="line">    <span class="keyword">let</span> symbol2 = <span class="built_in">Symbol</span>(<span class="string">'two'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(symbol);<span class="comment">// Symbol('one')</span></span><br><span class="line">    <span class="built_in">console</span>.log(symbol2);<span class="comment">// Symbol('two')</span></span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>、内置<span class="built_in">Symbol</span>值</span><br><span class="line">    * 除了定义自己使用的<span class="built_in">Symbol</span>值以外，ES6还提供了<span class="number">11</span>个内置的<span class="built_in">Symbol</span>值，指向语言内部使用的方法。</span><br><span class="line">    - <span class="built_in">Symbol</span>.iterator</span><br><span class="line">      * 对象的<span class="built_in">Symbol</span>.iterator属性，指向该对象的默认遍历器方法(后边讲)</span><br></pre></td></tr></table></figure><h2 id="ES6之set-Map容器结构"><a href="#ES6之set-Map容器结构" class="headerlink" title="ES6之set/Map容器结构"></a>ES6之set/Map容器结构</h2><ul><li>容器: 能保存多个数据的对象, 同时必须具备操作内部数据的方法</li><li><p>任意对象都可以作为容器使用, 但有的对象不太适合作为容器使用(如函数)</p></li><li><p><strong>Set的特点</strong>: 保存多个value, value是不重复 ====&gt;数组元素去重</p></li><li><strong>Map的特点</strong>: 保存多个key–value, key是不重复, value是可以重复的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">API</span><br><span class="line">  <span class="built_in">Set</span>()/<span class="built_in">Set</span>(arr) <span class="comment">//arr是一维数组</span></span><br><span class="line">  add(value)</span><br><span class="line">  <span class="keyword">delete</span>(value)</span><br><span class="line">  clear();</span><br><span class="line">  has(value)</span><br><span class="line">  size</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Map</span>()/<span class="built_in">Map</span>(arr) <span class="comment">//arr是二维数组</span></span><br><span class="line">  <span class="keyword">set</span>(key, value)</span><br><span class="line">  delete(key)</span><br><span class="line">  clear()</span><br><span class="line">  has(key)</span><br><span class="line">  size</span><br></pre></td></tr></table></figure><ul><li>set</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 2, 1, 3])</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>) //Set(3) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set.size :'</span>, <span class="keyword">set</span>.size);</span><br><span class="line">console.log('<span class="keyword">set</span>.has(2) :', <span class="keyword">set</span>.has(2));//true</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.add(8)</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//Set(4) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.delete(1)</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.clear()</span><br><span class="line">console.log('<span class="keyword">set</span> :', <span class="keyword">set</span>);//&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>map </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//map里面放二维数组 内数组的第一项为key 第二项为value</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>, <span class="string">'shulu'</span>], [<span class="string">'age'</span>, <span class="number">18</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map)<span class="comment">//Map(2) &#123;"name" =&gt; "shulu", "age" =&gt; 18&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map.size :'</span>, map.size); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="string">'sex'</span>, <span class="string">'女神'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//Map(3) &#123;"name" =&gt; "shulu", "age" =&gt; 18, "sex" =&gt; "女神"&#125;</span></span><br><span class="line"></span><br><span class="line">map.delete(<span class="string">'age'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//&#123;"name" =&gt; "shulu", "sex" =&gt; "女神"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">'name'</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">map.clear()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map :'</span>, map);<span class="comment">//Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6异步1之Promise"><a href="#ES6异步1之Promise" class="headerlink" title="ES6异步1之Promise"></a>ES6异步1之Promise</h2><ul><li>解决<code>回调地狱</code>(回调函数的层层嵌套, 编码是不断向右扩展, 阅读性很差)</li><li>能以同步编码的方式实现异步调用</li><li>在es6之前原生的js中是没这种实现的, 一些第三方框架(jQuery)实现了promise</li><li>ES6中定义实现API: </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建promise对象</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="comment">// 做异步的操作 </span></span><br><span class="line">  <span class="keyword">if</span>(成功) &#123; <span class="comment">// 调用成功的回调</span></span><br><span class="line">    resolve(result); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调用失败的回调</span></span><br><span class="line">    reject(errorMsg); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 2. 调用promise对象的then()</span></span><br><span class="line">promise.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;, (errorMsg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(errorMsg)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ES6之iterator遍历器指针对象"><a href="#ES6之iterator遍历器指针对象" class="headerlink" title="ES6之iterator遍历器指针对象"></a>ES6之iterator遍历器指针对象</h2><ul><li><p>概念： iterator是一种接口机制，为各种不同的数据结构提供统一的访问机制</p></li><li><p>作用：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为各种数据结构，提供一个统一的、简便的访问接口；</span><br><span class="line">使得数据结构的成员能够按某种次序排列</span><br><span class="line">ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。</span><br></pre></td></tr></table></figure><ul><li>工作原理：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建一个指针对象，指向数据结构的起始位置。</span><br><span class="line">第一次调用next方法，指针自动指向数据结构的第一个成员</span><br><span class="line">接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员</span><br><span class="line">每调用next方法返回的是一个包含value和done的对象，&#123;value: 当前成员的值,done: 布尔值&#125;</span><br><span class="line">  value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。</span><br><span class="line">  当遍历结束的时候返回的value值是undefined，done值为true</span><br></pre></td></tr></table></figure><ul><li>原生具备iterator接口的数据(可用for of遍历)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Array</span></span><br><span class="line"><span class="number">2</span>、<span class="built_in">arguments</span></span><br><span class="line"><span class="number">3</span>、<span class="keyword">set</span>容器</span><br><span class="line">4、map容器</span><br><span class="line">5、String</span><br><span class="line">……</span><br></pre></td></tr></table></figure><ul><li>值得注意的是普通对象{}是不具有iterator接口的 即无法用for..of 来遍历</li></ul><ul><li>模拟实现iterator指针对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">自定义iterator生成指针对象</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex&lt;arr.length?&#123;<span class="attr">value</span>: arr[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125;:&#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iteratorObj = mockIterator(arr);</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 4, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES6之for–of循环"><a href="#ES6之for–of循环" class="headerlink" title="ES6之for–of循环"></a>ES6之for–of循环</h2><ul><li>可以遍历任何容器 set/map等</li><li>数组/类数组</li><li>对象 (这个有点不太会)</li><li>伪/类对象</li><li>字符串</li><li>可迭代的对象</li><li>arguments</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'s2wn'</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'ss'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历arguments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forArguments</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iterator :'</span>, iterator);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">forArguments(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2 </span></span><br><span class="line"><span class="comment">//3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历类数组</span></span><br><span class="line"><span class="keyword">let</span> btns = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'btn'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> btns) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'btns :'</span>, btns);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"><span class="comment">// HTMLCollection(3) [div.btn, div.btn, div.btn]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历set容器</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 3])</span><br><span class="line">for (const i of <span class="keyword">set</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i :'</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历map容器</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'name'</span>, <span class="string">'shulu'</span>], [<span class="string">'age'</span>, <span class="number">18</span>], [<span class="string">'sex'</span>, <span class="string">'女神'</span>]])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i :'</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["name", "shulu"]</span></span><br><span class="line"><span class="comment">// ["age", 18]</span></span><br><span class="line"><span class="comment">// ["sex", "女神"]</span></span><br></pre></td></tr></table></figure><h2 id="ES6异步2之Generator函数"><a href="#ES6异步2之Generator函数" class="headerlink" title="ES6异步2之Generator函数"></a>ES6异步2之Generator函数</h2><ul><li>相比promise函数解决回调地狱的方法要好一些 </li><li>调用Generator函数会返回一个遍历器对象即iterator</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">  <span class="number">1</span>、ES6提供的解决异步编程的方案之一</span><br><span class="line">  <span class="number">2</span>、Generator函数是一个状态机，内部封装了不同状态的数据，</span><br><span class="line">  <span class="number">3</span>、用来生成遍历器对象</span><br><span class="line">  <span class="number">4</span>、可暂停函数(惰性求值), <span class="keyword">yield</span>可暂停，next方法可启动。每次返回的是<span class="keyword">yield</span>后的表达式结果</span><br><span class="line">特点：</span><br><span class="line">  <span class="number">1</span>、<span class="function"><span class="keyword">function</span> 与函数名之间有一个星号</span></span><br><span class="line"><span class="function">  2、内部用<span class="title">yield</span>表达式来定义不同的状态</span></span><br><span class="line"><span class="function">  例如：</span></span><br><span class="line"><span class="function">    <span class="title">function</span>* <span class="title">generatorExample</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">yield</span> <span class="string">'hello'</span>;  <span class="comment">// 状态值为hello</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="string">'generator'</span>; <span class="comment">// 状态值为generator</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>、generator函数返回的是指针对象(即前面讲的iterator)，而不会执行函数内部逻辑</span><br><span class="line">  <span class="number">4</span>、调用next方法函数内部逻辑开始执行，遇到<span class="keyword">yield</span>表达式停止，返回&#123;<span class="attr">value</span>: <span class="keyword">yield</span>后的表达式结果/<span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">false</span>/<span class="literal">true</span>&#125;</span><br><span class="line">  <span class="number">5</span>、再次调用next方法会从上一次停止时的<span class="keyword">yield</span>处开始，直到最后</span><br><span class="line">  <span class="number">6</span>、<span class="keyword">yield</span>语句返回结果通常为<span class="literal">undefined</span>， 当调用next方法时传参内容会作为启动时<span class="keyword">yield</span>语句的返回值。</span><br></pre></td></tr></table></figure><h2 id="ES6之class类"><a href="#ES6之class类" class="headerlink" title="ES6之class类"></a>ES6之class类</h2><ul><li>用 class 定义类</li><li>用 constructor() 定义构造方法(相当于构造函数)</li><li>一般方法: xxx () {} 必须这么写 </li><li>用extends来定义子类 继承父类</li><li>用super()来调用父类的构造方法</li><li>子类方法自定义: 将从父类中继承来的方法重新实现一遍</li><li>js中没有方法重载(方法名相同, 但参数不同)的语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类的构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name </span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类的一般方法</span></span><br><span class="line">  showInfo () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">starPerson</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name, age, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age)<span class="comment">//调用父类的构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.salary = salary</span><br><span class="line">  &#125;</span><br><span class="line">  showSalary () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my salary is <span class="subst">$&#123;<span class="keyword">this</span>.salary&#125;</span> ￥`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> starPerson(<span class="string">'yachan'</span>, <span class="number">18</span>, <span class="number">9999999999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'star :'</span>, star);</span><br><span class="line">star.showInfo()</span><br><span class="line">star.showSalary()</span><br></pre></td></tr></table></figure><h2 id="ES6之模块化"><a href="#ES6之模块化" class="headerlink" title="ES6之模块化"></a>ES6之模块化</h2><ul><li>看js模块化部分</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-ES6/js-ES6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ES5</title>
      <link>https://shulu520.com/js-ES5/js-ES5/</link>
      <guid>https://shulu520.com/js-ES5/js-ES5/</guid>
      <pubDate>Sat, 17 Aug 2019 08:37:44 GMT</pubDate>
      <description>
      
        ES5重点知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;时间会变魔术——生命之旅是一个不断发现的过程，在每个年龄段都会有它独特的景致。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="理解ES"><a href="#理解ES" class="headerlink" title="理解ES"></a>理解ES</h1><ol><li>全称: ECMAScript</li><li>js语言的规范</li><li>我们用的js是它的实现</li></ol><h2 id="js的组成"><a href="#js的组成" class="headerlink" title="js的组成"></a>js的组成</h2><ul><li>ECMAScript(js基础)</li><li><p>扩展–&gt;浏览器端</p><ul><li>BOM</li><li>DOM</li></ul></li><li><p>扩展–&gt;服务器端</p><ul><li>Node.js</li></ul></li></ul><h2 id="ES的几个重要的版本"><a href="#ES的几个重要的版本" class="headerlink" title="ES的几个重要的版本"></a>ES的几个重要的版本</h2><ol><li>ES5  09年发布</li><li>ES6  15年发布 也叫ES2015</li><li>ES7  16年发布 也叫ES2016</li></ol><h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h2 id="ES5-严格模式"><a href="#ES5-严格模式" class="headerlink" title="ES5-严格模式"></a>ES5-严格模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">运行模式: 正常(混杂)模式与严格模式</span><br><span class="line">应用上严格式: <span class="string">'strict mode'</span>;</span><br><span class="line">作用: </span><br><span class="line">  使得Javascript在更严格的条件下运行</span><br><span class="line">  消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为</span><br><span class="line">  消除代码运行的一些不安全之处，保证代码运行的安全</span><br><span class="line"></span><br><span class="line">需要记住的几个变化</span><br><span class="line">  声明定义变量必须用<span class="keyword">var</span></span><br><span class="line">  禁止自定义的函数中的<span class="keyword">this</span>关键字指向全局对象</span><br><span class="line">  创建<span class="built_in">eval</span>作用域(就像函数作用域一样), 更安全</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">## ES5-JSON对象</span></span><br><span class="line"><span class="string">* 作用: 用于在json对象/数组与js对象/数组相互转换</span></span><br><span class="line"><span class="string">* JSON.stringify(obj/arr) 将js对象(数组)转换为json对象(数组)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'shulu'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'shu'</span>, <span class="string">'lu'</span>, <span class="number">520</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj)) <span class="comment">//&#123;"name":"shulu","age":18&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr)); <span class="comment">//["shu","lu",520]</span></span><br></pre></td></tr></table></figure><ul><li>JSON.parse(json) 将json对象(数组)转换为js对象(数组)</li></ul><h2 id="ES5-Object扩展"><a href="#ES5-Object扩展" class="headerlink" title="ES5-Object扩展"></a>ES5-Object扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(prototype[, descriptors]) : 创建一个新的对象</span><br><span class="line"></span><br><span class="line">以指定对象为原型创建新的对象</span><br><span class="line">指定新的属性, 并对属性进行描述</span><br><span class="line">  value : 指定值</span><br><span class="line">  writable : 标识当前属性值是否是可修改的, 默认为<span class="literal">true</span></span><br><span class="line">  enumerable: 是否可被<span class="keyword">for</span> <span class="keyword">in</span>枚举  默认<span class="literal">false</span></span><br><span class="line">  <span class="keyword">get</span>方法: 用来得到当前属性值的回调函数</span><br><span class="line">  <span class="keyword">set</span>方法: 用来监视当前属性值变化的回调函数</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">  name: <span class="string">'shulu'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o = <span class="built_in">Object</span>.create(obj, &#123;</span><br><span class="line">  sex: &#123;</span><br><span class="line">    value: <span class="string">'女神'</span>, <span class="comment">//属性值</span></span><br><span class="line">    writable: <span class="literal">true</span>, <span class="comment">//可写可修改</span></span><br><span class="line">    enumerable: <span class="literal">true</span> ,<span class="comment">//可被for in枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span>, <span class="comment">//可删除 可配置的属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'key :'</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">iterator() <span class="comment">// key: sex</span></span><br><span class="line"><span class="keyword">delete</span> o.sex</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o :'</span>, o) <span class="comment">//o: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></span><br><span class="line">o2 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(object, descriptors) : 为指定对象定义扩展多个属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  firstName: <span class="string">'shu'</span>,</span><br><span class="line">  lastName: <span class="string">'lu'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  fullName: &#123; <span class="comment">//联想vue中的计算属性</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (data) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = data.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName)<span class="comment">// shu lu</span></span><br><span class="line">obj.fullName = <span class="string">'love you'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName)<span class="comment">// love you</span></span><br></pre></td></tr></table></figure><ul><li>对象的本身就有的的两个方法 get set</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj&#123;</span><br><span class="line">  <span class="keyword">get</span> propertyName () &#123;...&#125;,</span><br><span class="line">  <span class="keyword">set</span> propertyName () &#123;...&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  firstName: <span class="string">'shu'</span>,</span><br><span class="line">  lastName: <span class="string">'lu'</span>,</span><br><span class="line">  <span class="keyword">get</span> fullName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> fullName (data) &#123;</span><br><span class="line">    <span class="keyword">var</span> names = data.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.lastName = names[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);<span class="comment">// shu lu</span></span><br><span class="line">obj.fullName = <span class="string">'love you'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);<span class="comment">// love you</span></span><br><span class="line"><span class="comment">//结果和Object.defineProperties()一样</span></span><br></pre></td></tr></table></figure><h2 id="ES5-Array扩展"><a href="#ES5-Array扩展" class="headerlink" title="ES5-Array扩展"></a>ES5-Array扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">得到值在数组中的第一个下标</span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf(value) </span><br><span class="line"></span><br><span class="line">得到值在数组中的最后一个下标</span><br><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf(value) </span><br><span class="line"></span><br><span class="line">遍历数组</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123; &#125;) </span><br><span class="line"></span><br><span class="line">遍历数组 返回一个新的数组 返回加工之后的新数组 变量接收返回值</span><br><span class="line"><span class="built_in">Array</span>.prototype.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123; <span class="keyword">return</span> &#125;) </span><br><span class="line"></span><br><span class="line">遍历数组 过滤出一个新的子数组 返回条件为<span class="literal">true</span>的值组成的子数组 变量接收返回值</span><br><span class="line"><span class="built_in">Array</span>.prototype.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123; <span class="keyword">return</span> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">12</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 0</span></span><br><span class="line"><span class="comment">// 2 1</span></span><br><span class="line"><span class="comment">// 34 2</span></span><br><span class="line"><span class="comment">// 32 3</span></span><br><span class="line"><span class="comment">// 12 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item += <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr :'</span>, arr2) <span class="comment">//[11, 12, 44, 42, 22]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr3 :'</span>, arr3);<span class="comment">//[34, 32, 12]</span></span><br></pre></td></tr></table></figure><h2 id="ES5-Function扩展"><a href="#ES5-Function扩展" class="headerlink" title="ES5-Function扩展"></a>ES5-Function扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind(obj)</span><br><span class="line">  将函数内的<span class="keyword">this</span>绑定为obj, 并将函数返回 并不会立即调用函数</span><br><span class="line"></span><br><span class="line">面试题: 区别bind()与call()和apply()</span><br><span class="line"></span><br><span class="line">fn.bind(obj, <span class="number">66</span>) 指定函数中的<span class="keyword">this</span>, 并返回函数, 第二个参数直接传, 常用于指定回调函数的<span class="keyword">this</span></span><br><span class="line">fn.call(obj, <span class="number">66</span>) 指定函数中的<span class="keyword">this</span>, 并调用函数, 第二个参数直接传</span><br><span class="line">fn.apply(obj, [<span class="number">66</span>]) 指定函数中的<span class="keyword">this</span>, 并调用函数, 第二个参数为数组形式</span><br></pre></td></tr></table></figure><ul><li>demo </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this :'</span>, <span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this :'</span>, <span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo3</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this :'</span>, <span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'yachan'</span>, <span class="attr">sex</span>: <span class="string">'女神'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo1.bind(obj, <span class="number">18</span>)</span><br><span class="line">bar()</span><br><span class="line"><span class="comment">//this : &#123;name: "yachan", sex: "女神"&#125; </span></span><br><span class="line"><span class="comment">//data : 18</span></span><br><span class="line"></span><br><span class="line">foo2.call(obj, <span class="number">19</span>)</span><br><span class="line"><span class="comment">//this : &#123;name: "yachan", sex: "女神"&#125; </span></span><br><span class="line"><span class="comment">//data : 19</span></span><br><span class="line"></span><br><span class="line">foo3.apply(obj, [<span class="number">20</span>])</span><br><span class="line"><span class="comment">//this : &#123;name: "yachan", sex: "女神"&#125;</span></span><br><span class="line"><span class="comment">//data : 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind常用于指定回调函数的this</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this :'</span>, <span class="keyword">this</span>) <span class="comment">//this : &#123;name: "yachan", sex: "女神"&#125;</span></span><br><span class="line">&#125;.bind(obj), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="ES5-Date扩展"><a href="#ES5-Date扩展" class="headerlink" title="ES5-Date扩展"></a>ES5-Date扩展</h2><ul><li>Date.now() : 得到当前时间值</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-ES5/js-ES5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ajax-跨域-jsonp</title>
      <link>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/</link>
      <guid>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/</guid>
      <pubDate>Sun, 11 Aug 2019 14:21:34 GMT</pubDate>
      <description>
      
        ajax跨域之jsonp以及jQuery中的jsonp封装
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp; 这世界很美——我要变成这个世界的一部分，变成哪些努力的人的一部分，变成这个人世界依旧美好的一部分。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ajax跨域之jsonp"><a href="#ajax跨域之jsonp" class="headerlink" title="ajax跨域之jsonp"></a>ajax跨域之jsonp</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>&emsp;&emsp;同源策略是浏览器的一种安全策略，所谓同源请求url地址中的协议、域名、端口都相同，只要其中之不同就是跨域</p><h2 id="跨域常用方法jsonp原理"><a href="#跨域常用方法jsonp原理" class="headerlink" title="跨域常用方法jsonp原理"></a>跨域常用方法jsonp原理</h2><ul><li>jsonp仅仅支持<strong>get</strong>请求</li></ul><h3 id="静态script标签的src实现进行跨域请求"><a href="#静态script标签的src实现进行跨域请求" class="headerlink" title="静态script标签的src实现进行跨域请求"></a>静态script标签的src实现进行跨域请求</h3><p><strong>不常用</strong> 存在的问题：</p><ol><li>必须保证加载的顺序</li><li>不方便传递参数</li></ol><h3 id="动态创建script标签，通过标签的src属性发送请求"><a href="#动态创建script标签，通过标签的src属性发送请求" class="headerlink" title="动态创建script标签，通过标签的src属性发送请求"></a>动态创建script标签，通过标签的src属性发送请求</h3><p><strong>常用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = <span class="string">'http://taobao.com/data.php?callback=foo&amp;name=shulu&amp;age=18'</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">head.appendChild(script)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服务器返回一个【函数调用】即 foo(实参)</span></span><br><span class="line"><span class="comment">// ?callback=foo 通过这样设置后 函数名字就有前端决定</span></span><br><span class="line"><span class="comment">// 'callback' 这个字符串必须与后端一致 即有后端决定</span></span><br></pre></td></tr></table></figure><h2 id="jQuery中的jsonp"><a href="#jQuery中的jsonp" class="headerlink" title="jQuery中的jsonp"></a>jQuery中的jsonp</h2><p>&emsp;&emsp;jQuery中将jsonp的方法封装到了$.ajax()的方法中</p><ul><li>使用方法跟$.ajax()差不多<br>注意点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataType: <span class="string">'jsonp'</span> </span><br><span class="line"><span class="comment">//必须指定为jsonp</span></span><br><span class="line">jsonp: <span class="string">'cb'</span> </span><br><span class="line"><span class="comment">//若后端获取回调函数的名字时用cb这个变量，</span></span><br><span class="line"><span class="comment">//这里就要指定为'cb',来迎合后端，一般情况下，为'callback'</span></span><br><span class="line">jsonpCallback: <span class="string">'foo'</span></span><br><span class="line"><span class="comment">//自定义回调函数的名字，,即callback这个键的值</span></span><br><span class="line"><span class="comment">//jQuery默认会生成一个很长的名字</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'http://taobao.com/data.php?callback=foo&amp;name=shulu&amp;age=18'</span>,</span><br><span class="line">  dataType: <span class="string">'jsonp'</span>, </span><br><span class="line">  jsonp: <span class="string">'cb'</span>, </span><br><span class="line">  jsonpCallback: <span class="string">'foo'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模仿实现jQuery中的jsonp"><a href="#模仿实现jQuery中的jsonp" class="headerlink" title="模仿实现jQuery中的jsonp"></a>模仿实现jQuery中的jsonp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认的回调函数名称 1.1.11为jquery的版本号</span></span><br><span class="line">  <span class="keyword">let</span> cbName = <span class="string">'jQuery'</span> + (<span class="string">'1.1.11'</span> + <span class="built_in">Math</span>.random().replace(<span class="regexp">/\D/g</span>,<span class="string">''</span>) + <span class="string">'_'</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))</span><br><span class="line">  <span class="keyword">if</span> (defaults.jsonpCallback) &#123;</span><br><span class="line">    cbName = defaults.jsonpCallback</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义回调函数 给window上添加一个方法</span></span><br><span class="line">  <span class="built_in">window</span>[cbName] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    defaults.success(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理参数 拼接成字符串参数</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">      param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">      param = <span class="string">'&amp;'</span> + param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src =  defaults.url + <span class="string">'?'</span> + defaults.jsonp + <span class="string">'='</span> + cbName + param</span><br><span class="line">  <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模仿jQuery中的ajax中封装的jsonp"><a href="#模仿jQuery中的ajax中封装的jsonp" class="headerlink" title="模仿jQuery中的ajax中封装的jsonp"></a>模仿jQuery中的ajax中封装的jsonp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (defaults.dataType === <span class="string">'jsonp'</span>) &#123;</span><br><span class="line">    ajax4jsonp(defaults)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax4json(defaults)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajax4jsonp</span> (<span class="params">defaults</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 默认的回调函数名称 1.1.11为jquery的版本号</span></span><br><span class="line">    <span class="keyword">let</span> cbName = <span class="string">'jQuery'</span> + (<span class="string">'1.1.11'</span> + <span class="built_in">Math</span>.random().replace(<span class="regexp">/\D/g</span>,<span class="string">''</span>) + <span class="string">'_'</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))</span><br><span class="line">    <span class="keyword">if</span> (defaults.jsonpCallback) &#123;</span><br><span class="line">      cbName = defaults.jsonpCallback</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义回调函数 给window上添加一个方法</span></span><br><span class="line">    <span class="built_in">window</span>[cbName] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      defaults.success(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数 拼接成字符串参数</span></span><br><span class="line">    <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">        param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">        param = <span class="string">'&amp;'</span> + param</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    script.src =  defaults.url + <span class="string">'?'</span> + defaults.jsonp + <span class="string">'='</span> + cbName + param</span><br><span class="line">    <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">    head.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajax4json</span> (<span class="params">defaults</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建Ajax对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理defaults.data 将对象形式参数拼接成参数字符串</span></span><br><span class="line">    <span class="comment">// 即 name=yachan&amp;age=18 的形式</span></span><br><span class="line">    <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">        param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去掉最后一个&amp;符号</span></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      param = param.substring(<span class="number">0</span>, param.length - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若为get请求 则直接往url后面拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">'get'</span>) &#123;</span><br><span class="line">      defaults.url += <span class="string">'?'</span> + <span class="built_in">encodeURI</span>(param) <span class="comment">//编码中文 防止出现乱码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若为post请求</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">'post'</span>) &#123;</span><br><span class="line">      data = param</span><br><span class="line">      <span class="comment">// 设置请求头(必须设置)</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2 准备发送 设置发送参数</span></span><br><span class="line">    xhr.open(defaults.type, defaults.url, defaults.async)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 发送请求 执行发送动作</span></span><br><span class="line">    xhr.send(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若为同步请求 不经过回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (!defaults.async) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xhr.responseText</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4 指定回调函数(异步) 处理服务器返回值</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">          <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">          &#125;</span><br><span class="line">          defaults.success(data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsonp案例之百度智能搜索提示"><a href="#jsonp案例之百度智能搜索提示" class="headerlink" title="jsonp案例之百度智能搜索提示"></a>jsonp案例之百度智能搜索提示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keyword"</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">placeholder</span>=<span class="string">"请输入搜索内容……"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span> <span class="attr">id</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#keyword</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#query</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#keyword'</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>)</span><br><span class="line">    <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>)</span><br><span class="line">    info.innerHTML = <span class="string">''</span> <span class="comment">//清空之前的内容</span></span><br><span class="line">    <span class="keyword">var</span> kw = $(<span class="keyword">this</span>).val()</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">'https://www.baidu.com/sugrec?pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web&amp;sugsid=1458,21089,29522,29518,29099,29568,28833,29221,22160'</span>,</span><br><span class="line">      jsonp: <span class="string">'cb'</span>,</span><br><span class="line">      data: &#123;<span class="attr">wd</span>: kw&#125;,</span><br><span class="line">      dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> query = data.g</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; query.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">          li.innerText = query[i].q</span><br><span class="line">          ul.appendChild(li)</span><br><span class="line">        &#125;</span><br><span class="line">        info.appendChild(ul)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ajax</title>
      <link>https://shulu520.com/ajax/ajax/</link>
      <guid>https://shulu520.com/ajax/ajax/</guid>
      <pubDate>Sun, 11 Aug 2019 03:56:12 GMT</pubDate>
      <description>
      
        原生ajax以及模仿jQuery中的$.ajax的实现
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;全力以赴——全力以赴就是想尽所有的办法，用尽所有的资源。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ajax即XMLHttpRequest"><a href="#ajax即XMLHttpRequest" class="headerlink" title="ajax即XMLHttpRequest"></a>ajax即XMLHttpRequest</h1><p>&emsp;&emsp;Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。<br>&emsp;&emsp;Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<br>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>&emsp;&emsp;传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><h2 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XMLHttpRequest</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备发送请求  请求方式 地址 是否异步</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'xxx.com/data'</span>, <span class="literal">true</span>) <span class="comment">//true异步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行发送动作</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调函数</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery中的ajax"><a href="#jQuery中的ajax" class="headerlink" title="jQuery中的ajax"></a>jQuery中的ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'请求方式'</span>,</span><br><span class="line">  url: <span class="string">'请求地址'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模仿封装jQuery中的ajax"><a href="#模仿封装jQuery中的ajax" class="headerlink" title="模仿封装jQuery中的ajax"></a>模仿封装jQuery中的ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ajax默认参数</span></span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    dataType: <span class="string">'text'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历obj对象 覆盖defaults对象 没有覆盖的即为默认值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1 创建Ajax对象</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理defaults.data 将对象形式参数拼接成参数字符串</span></span><br><span class="line">  <span class="comment">// 即 name=yachan&amp;age=18 的形式</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">      param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 去掉最后一个&amp;符号</span></span><br><span class="line">  <span class="keyword">if</span> (param) &#123;</span><br><span class="line">    param = param.substring(<span class="number">0</span>, param.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若为get请求 则直接往url后面拼接参数</span></span><br><span class="line">  <span class="keyword">if</span> (defaults.type === <span class="string">'get'</span>) &#123;</span><br><span class="line">    defaults.url += <span class="string">'?'</span> + <span class="built_in">encodeURI</span>(param) <span class="comment">//编码中文 防止出现乱码</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若为post请求</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (defaults.type === <span class="string">'post'</span>) &#123;</span><br><span class="line">    data = param</span><br><span class="line">    <span class="comment">// 设置请求头(必须设置)</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2 准备发送 设置发送参数</span></span><br><span class="line">  xhr.open(defaults.type, defaults.url, defaults.async)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3 发送请求 执行发送动作</span></span><br><span class="line">  xhr.send(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若为同步请求 不经过回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (!defaults.async) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> xhr.responseText</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 指定回调函数(异步) 处理服务器返回值</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (shr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">        <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">          data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">        &#125;</span><br><span class="line">        defaults.success(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/ajax/ajax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-Regex</title>
      <link>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <guid>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <pubDate>Sat, 10 Aug 2019 08:14:36 GMT</pubDate>
      <description>
      
        正则表达式知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;淡定的人生不寂寞——繁华过后是寂寞，绚烂过后是平淡，保持淡定的人，一定是最美丽最幸福的人。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>&emsp;&emsp; 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h2 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h2><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><p>&emsp;&emsp; 普通字符<br>&emsp;&emsp; 特殊字符(元字符)：正则表达式中有特殊意义的字符</p><h3 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line"></span><br><span class="line">()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span><br><span class="line">var reg = /(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/;</span><br><span class="line">if (reg.test(dateStr)) &#123;</span><br><span class="line">  console.log(RegExp.$1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字 任意一个汉字</span><br></pre></td></tr></table></figure><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><h3 id="Regexp对象-有两个"><a href="#Regexp对象-有两个" class="headerlink" title="Regexp对象 有两个"></a>Regexp对象 有两个</h3><p>&emsp;&emsp; test()检测 布尔值<br>&emsp;&emsp; exec()提取 只返回一个匹配到的结果 若要提取多个值则得循环进行提取</p><h3 id="String对象-有四个"><a href="#String对象-有四个" class="headerlink" title="String对象 有四个"></a>String对象 有四个</h3><p>&emsp;&emsp; match()提取多个内容 返回一个数组</p><p>&emsp;&emsp; replace(reg, 替换字符)替换<br>&emsp;&emsp; replace的参数可以是函数而不是字符串，每个匹配都会调用该函数，它返回的字符串将作为替换的文本使用。</p><p>&emsp;&emsp; split(delimiter, limit) 切割字符串 返回一个字符串数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">split()方法可以把调用它的字符串分解为一个字串数组，使用的分隔符是它的参数。</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">delimiter：字符串或者正则表达式，从该参数指定的地方分割字符串。</span><br><span class="line"></span><br><span class="line">limit：指定返回数组的最大长度，如果没有设置该参数，则整个字符串都会被分割。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; search() 查找并且返回第一个匹配字串的<strong>第一个字符的位置</strong>。如果没有找到任何匹配的字串，则返回-1。</p><h2 id="非贪婪模式-表示"><a href="#非贪婪模式-表示" class="headerlink" title="非贪婪模式 ?表示"></a>非贪婪模式 ?表示</h2><p>&emsp;&emsp; 所谓的”贪婪”的意思就是，如果符合要求就一直往后匹配，一直到无法匹配为止，这就是贪婪模式。<br>&emsp;&emsp; 所谓的非贪婪模式就是一旦匹配到合适的就结束，不在继续匹配下去了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">贪婪模式的标示符：</span><br><span class="line">+，？，*，&#123;n&#125;,&#123;n,&#125;,&#123;n,m&#125;</span><br><span class="line"></span><br><span class="line">非贪婪模式: </span><br><span class="line">+？，？？，*？？，&#123;n&#125;?，&#123;n,&#125;?,&#123;n,m&#125;?</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-obj-clone</title>
      <link>https://shulu520.com/deepClone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/</link>
      <guid>https://shulu520.com/deepClone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/</guid>
      <pubDate>Sat, 10 Aug 2019 07:04:03 GMT</pubDate>
      <description>
      
        js面向对象-对象拷贝-深浅拷贝-深度克隆
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;步履不停——只管走过去，不要都逗留着去采了花朵来保存，因为一路上花朵会继续开放。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>数据分为基本的数据类型(String, Number, boolean, Null, Undefined)和对象数据类型</li></ul><ul><li>基本数据类型：<br>特点： 存储的是该对象的实际数据</li><li>对象数据类型：<br>特点： 存储的是该对象在栈中引用，真实的数据存放在堆内存里</li></ul><h2 id="复制数据"><a href="#复制数据" class="headerlink" title="复制数据"></a>复制数据</h2><h3 id="基本数据类型存放的就是实际的数据，可直接复制"><a href="#基本数据类型存放的就是实际的数据，可直接复制" class="headerlink" title="基本数据类型存放的就是实际的数据，可直接复制"></a>基本数据类型存放的就是实际的数据，可直接复制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> number1 = number2;</span><br></pre></td></tr></table></figure><h3 id="克隆数据：对象-数组"><a href="#克隆数据：对象-数组" class="headerlink" title="克隆数据：对象/数组"></a>克隆数据：对象/数组</h3><ul><li>区别： 浅拷贝/深度拷贝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">判断： 拷贝是否产生了新的数据还是拷贝的是数据的引用</span><br><span class="line">知识点：对象数据存放的是对象在栈内存的引用，直接复制的是对象的引用</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">username</span>: <span class="string">'kobe'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = obj; <span class="comment">// obj1 复制了obj在栈内存的引用</span></span><br></pre></td></tr></table></figure><ul><li>常用的拷贝技术</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> arr.concat(): 数组浅拷贝</span><br><span class="line"><span class="number">2.</span> arr.slice(): 数组浅拷贝</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Object</span>.assign() 对象浅拷贝</span><br><span class="line"><span class="number">4.</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr/obj)): 数组或对象深拷贝, 但不能处理函数数据</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 浅拷贝包含函数数据的对象/数组</span><br><span class="line"><span class="number">6.</span> 深拷贝包含函数数据的对象/数组</span><br></pre></td></tr></table></figure><h2 id="深度克隆-1"><a href="#深度克隆-1" class="headerlink" title="深度克隆"></a>深度克隆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkedType</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">  <span class="comment">// Object.prototype.toString.call() 返回值[Object xxx]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度克隆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result, <span class="comment">//最终返回值 </span></span><br><span class="line">  targetType = checkedType(target) <span class="comment">//要克隆的目标对象的数据类型</span></span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="string">'Object'</span>) &#123;</span><br><span class="line">    result = &#123;&#125; <span class="comment">//初始化为一个空对象</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">'Array'</span>) &#123;</span><br><span class="line">    result = [] <span class="comment">//初始化为一个空数组</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 能走到这里说明要克隆的对象的数据类型为对象或者数组</span></span><br><span class="line">  <span class="comment">// 遍历目标对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="comment">// 枚举对象则i为key</span></span><br><span class="line">    <span class="comment">// 枚举数组则i为index</span></span><br><span class="line">    <span class="keyword">if</span> (target.hasOwnProperty(i)) &#123;<span class="comment">//目标对象自身的属性 不要原型对象上的属性</span></span><br><span class="line">      <span class="keyword">let</span> value = target[i]</span><br><span class="line">      <span class="keyword">if</span> (checkedType(value) === <span class="string">'Object'</span> || <span class="string">'Array'</span>) &#123;</span><br><span class="line">        result[i] = deepClone(value)<span class="comment">//递归方法</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, &#123;<span class="attr">name</span>: <span class="string">'shulu'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, [<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">sex</span>: <span class="string">'女神'</span>&#125;]]</span><br><span class="line"><span class="keyword">let</span> cloneArr = deepClone(arr)</span><br><span class="line"></span><br><span class="line">cloneArr[<span class="number">1</span>].name = <span class="string">'yachan'</span></span><br><span class="line">cloneArr[<span class="number">2</span>][<span class="number">2</span>].sex = <span class="string">'男生'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'cloneArr :'</span>, cloneArr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr :'</span>, arr);</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/deepClone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-inherit</title>
      <link>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/</link>
      <guid>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/</guid>
      <pubDate>Wed, 07 Aug 2019 08:27:59 GMT</pubDate>
      <description>
      
        js-面向对象编程之-继承-知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;坚持下去——哪有什么天才，坚持做你喜欢的事情，这本身就是一种天赋。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="一：原型继承–适合继承父类原型上的-方法"><a href="#一：原型继承–适合继承父类原型上的-方法" class="headerlink" title="一：原型继承–适合继承父类原型上的-方法"></a>一：原型继承–适合继承父类原型上的-方法</h1><ul><li>即把父类构造函数的一个实例赋值给子类构造函数作为原型对象</li></ul><h2 id="实现demo"><a href="#实现demo" class="headerlink" title="实现demo"></a>实现demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Person父类原型上的方法test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数的原型对象初始化时只能传一次值</span></span><br><span class="line"><span class="comment">// 所以后面子类实例化时无法设置继承自父类构造函数的参数</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">'ls'</span>, <span class="number">18</span>, <span class="string">'男'</span>)</span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//修正constructor的指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="number">80</span>)</span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(student1) <span class="comment">//name等属性都设置不了</span></span><br><span class="line"><span class="built_in">console</span>.dir(student2) <span class="comment">//name等属性都设置不了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'student1.test() :'</span>, student1.test()) <span class="comment">//可以调用</span></span><br></pre></td></tr></table></figure><h2 id="原型继承的缺点："><a href="#原型继承的缺点：" class="headerlink" title="原型继承的缺点："></a>原型继承的缺点：</h2><p>&emsp;&emsp;继承时无法设置父类构造函数的参数，即无法个性化继承来的属性值<br>&emsp;&emsp;还有：父类原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！</p><h1 id="二：借用构造函数-假继承-–适合继承父类构造函数的-属性"><a href="#二：借用构造函数-假继承-–适合继承父类构造函数的-属性" class="headerlink" title="二：借用构造函数(假继承)–适合继承父类构造函数的-属性"></a>二：借用构造函数(假继承)–适合继承父类构造函数的-属性</h1><ul><li>在子类构造函数中使用call执行父类构造函数</li></ul><h2 id="demo实现"><a href="#demo实现" class="headerlink" title="demo实现"></a>demo实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Person父类原型上的方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1 :'</span>, s1) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s2 :'</span>, s2) <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1.test :'</span>, s1.test) <span class="comment">//undefined </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1.test() :'</span>, s1.test()) <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为test方法在父类的原型对象上，只有其实例才可以调用</span></span><br><span class="line"><span class="comment">// 子类借用父类构造函数，并没有生成实例去调用父类原型上的方法</span></span><br></pre></td></tr></table></figure><h2 id="借用构造函数的缺点："><a href="#借用构造函数的缺点：" class="headerlink" title="借用构造函数的缺点："></a>借用构造函数的缺点：</h2><ul><li>显而易见的，子类实例继承不了父类原型上的方法</li></ul><h1 id="三：组合继承-原型继承-借用构造函数"><a href="#三：组合继承-原型继承-借用构造函数" class="headerlink" title="三：组合继承=原型继承+借用构造函数"></a>三：组合继承=原型继承+借用构造函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Person父类原型上的方法'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//修正constructor的指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1 :'</span>, s3) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s2 :'</span>, s4) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s3.test() :'</span>, s3.test()) <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><h2 id="组合继承的优化–寄生组合式继承"><a href="#组合继承的优化–寄生组合式继承" class="headerlink" title="组合继承的优化–寄生组合式继承"></a>组合继承的优化–寄生组合式继承</h2><p>&emsp;&emsp;1. 在借用构造函数中，已经继承到了父类的属性，所以原型继承中只继承父类的方法就行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">优化为：Student.prototype = Person.prototype</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2. 经过上一次优化后，将父类原型对象的值(地址值)赋给子类，此时父类子类的原型对象为同一个对象，修改其中的一个另一个也会跟着变。给子类原型添加某方法，父类原型也有了这个方法，这显然不是我们想要的结果。</p><p>&emsp;&emsp;3. Object.create()方法创建一个新对象，使用现有的对象(当作参数)来提供新创建的对象的<strong>proto</strong>。这里不是直接引用Parent.prototype，而是借助它创建一个新的对象，从而实现父子构造函数原型对象的隔离。</p><ul><li>最佳版本：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最优解为：</span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype)</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello,'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype)</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line">Student.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi,'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s3 :'</span>, s3)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s4 :'</span>, s4)</span><br><span class="line">s3.test()</span><br><span class="line">s4.sayHi() <span class="comment">//完美</span></span><br></pre></td></tr></table></figure><h2 id="扩展-Object-cerate方法的实现"><a href="#扩展-Object-cerate方法的实现" class="headerlink" title="扩展-Object.cerate方法的实现"></a>扩展-Object.cerate方法的实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//亲测有效</span></span><br></pre></td></tr></table></figure><h1 id="四：ES6之calss类继承"><a href="#四：ES6之calss类继承" class="headerlink" title="四：ES6之calss类继承"></a>四：ES6之calss类继承</h1><ul><li>用 class 定义类</li><li>用 constructor() 定义构造方法(相当于构造函数)</li><li>一般方法: xxx () {} 必须这么写 </li><li>用extends来定义子类 继承父类</li><li>用super()来调用父类的构造方法</li><li>子类方法自定义: 将从父类中继承来的方法重新实现一遍</li><li>js中没有方法重载(方法名相同, 但参数不同)的语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 类的构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name </span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类的一般方法</span></span><br><span class="line">  showInfo () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">starPerson</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name, age, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age)<span class="comment">//调用父类的构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.salary = salary</span><br><span class="line">  &#125;</span><br><span class="line">  showSalary () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`my salary is <span class="subst">$&#123;<span class="keyword">this</span>.salary&#125;</span> ￥`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> starPerson(<span class="string">'yachan'</span>, <span class="number">18</span>, <span class="number">9999999999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'star :'</span>, star);</span><br><span class="line">star.showInfo()</span><br><span class="line">star.showSalary()</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-BOM-web-api</title>
      <link>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/</link>
      <guid>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/</guid>
      <pubDate>Sat, 03 Aug 2019 10:55:18 GMT</pubDate>
      <description>
      
        BOM浏览器对象模型 web-api相关操作
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="BOM模态框操作"><a href="#BOM模态框操作" class="headerlink" title="BOM模态框操作"></a>BOM模态框操作</h1><ul><li>alert()   只有确定按钮</li><li>confirm() 可带提示文本 确定取消按钮</li><li>prompt()  可带提示文本 带文本输入框 确定取消按钮</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">"Do you really want to leave?"</span>)) &#123; </span><br><span class="line">  alert(<span class="string">"Thanks for Visiting!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sign = prompt(<span class="string">"你是什么星座的?"</span>)</span><br><span class="line"><span class="keyword">if</span> (sign == <span class="string">"天蝎座"</span>)&#123;</span><br><span class="line">   alert(<span class="string">"哇! 我也是天蝎座的耶!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">window</span>.prompt(<span class="string">'你觉得很幸运吗?'</span>,<span class="string">'是的'</span>) 默认为是的</span><br></pre></td></tr></table></figure><h1 id="window页面加载"><a href="#window页面加载" class="headerlink" title="window页面加载"></a>window页面加载</h1><p>&emsp;&emsp;window.onload() 当页面加载完成执行 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行<br>&emsp;&emsp;window.onunload() 当用户退出页面时执行</p><h2 id="浏览器窗口活跃监听-页面失去焦点获得焦点"><a href="#浏览器窗口活跃监听-页面失去焦点获得焦点" class="headerlink" title="浏览器窗口活跃监听-页面失去焦点获得焦点"></a>浏览器窗口活跃监听-页面失去焦点获得焦点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">'欢迎你嗷~~^-^'</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'原来的title'</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">window</span>.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">'别离开我嘛^-^'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><ul><li>location对象是window对象下的一个属性.</li><li>location可以获取或者设置浏览器地址栏的URL</li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><p>统一资源定位符 (Uniform Resource Locator, URL)</p></li><li><p>URL的组成</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scheme:<span class="comment">//host:port/path?query#fragment</span></span><br><span class="line">scheme:通信协议</span><br><span class="line">常用的http,ftp,maito等</span><br><span class="line">host:主机</span><br><span class="line">服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</span><br><span class="line">port:端口号</span><br><span class="line">整数，可选，省略时使用方案的默认端口，如http的默认端口为<span class="number">80</span>。</span><br><span class="line">path:路径</span><br><span class="line">由零或多个<span class="string">'/'</span>符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</span><br><span class="line">query:查询</span><br><span class="line">可选，用于给动态网页传递参数，可有多个参数，用<span class="string">'&amp;'</span>符号隔开，每个参数的名和值用<span class="string">'='</span>符号隔开。例如：name=zs</span><br><span class="line">fragment:信息片断</span><br><span class="line">字符串，锚点.</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">url.href = <span class="string">'https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.href);      <span class="comment">// https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container</span></span><br><span class="line"><span class="built_in">console</span>.log(url.protocol);  <span class="comment">// https:</span></span><br><span class="line"><span class="built_in">console</span>.log(url.host);      <span class="comment">// developer.mozilla.org</span></span><br><span class="line"><span class="built_in">console</span>.log(url.hostname);  <span class="comment">// developer.mozilla.org</span></span><br><span class="line"><span class="built_in">console</span>.log(url.port);      <span class="comment">// (blank - https assumes port 443)</span></span><br><span class="line"><span class="built_in">console</span>.log(url.pathname);  <span class="comment">// /en-US/search</span></span><br><span class="line"><span class="built_in">console</span>.log(url.search);    <span class="comment">// ?q=URL</span></span><br><span class="line"><span class="built_in">console</span>.log(url.hash);      <span class="comment">// #search-results-close-container</span></span><br><span class="line"><span class="built_in">console</span>.log(url.origin);    <span class="comment">// https://developer.mozilla.org</span></span><br></pre></td></tr></table></figure><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h1 id="window-navigator对象"><a href="#window-navigator对象" class="headerlink" title="window.navigator对象"></a>window.navigator对象</h1><p>&emsp;&emsp;window.navigator.userAgent 通过userAgent可以判断用户浏览器的类型<br>&emsp;&emsp;window.navigator.platform 通过platform可以判断浏览器所在的系统平台类型.</p><h1 id="高度宽度"><a href="#高度宽度" class="headerlink" title="高度宽度"></a>高度宽度</h1><h2 id="offset偏移量-client可视区-scroll滚动条-screen屏幕"><a href="#offset偏移量-client可视区-scroll滚动条-screen屏幕" class="headerlink" title="offset偏移量 client可视区 scroll滚动条 screen屏幕"></a>offset偏移量 client可视区 scroll滚动条 screen屏幕</h2><ul><li>body身上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">网页可见区域宽：<span class="built_in">document</span>.body.clientWidth </span><br><span class="line">网页可见区域高：<span class="built_in">document</span>.body.clientHeight </span><br><span class="line"></span><br><span class="line">网页被卷去的高：<span class="built_in">document</span>.body.scrollTop </span><br><span class="line">网页被卷去的左：<span class="built_in">document</span>.body.scrollLeft </span><br><span class="line">网页正文全文宽：<span class="built_in">document</span>.body.scrollWidth </span><br><span class="line">网页正文全文高：<span class="built_in">document</span>.body.scrollHeight </span><br><span class="line"></span><br><span class="line">浏览器上边框距离屏幕上边框：<span class="built_in">window</span>.screenTop </span><br><span class="line">浏览器左边框距离屏幕左边框：<span class="built_in">window</span>.screenLeft </span><br><span class="line">屏幕分辨率的高：<span class="built_in">window</span>.screen.height </span><br><span class="line">屏幕分辨率的宽：<span class="built_in">window</span>.screen.width</span><br></pre></td></tr></table></figure><ul><li>element元素身上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">clientWidth和clientHeight：</span><br><span class="line">元素的可视部分宽度和高度</span><br><span class="line">即content宽 + padding(有则加上两边padding) - 滚动条宽(有则减去就行)</span><br><span class="line"></span><br><span class="line">clientLeft和clientTop：</span><br><span class="line">元素的border部分宽度和高度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offsetParent：</span><br><span class="line">用于获取定位的父级元素</span><br><span class="line"></span><br><span class="line">offsetWidth和offsetHeight：</span><br><span class="line">整个容器的宽高,以一个外人的角度看</span><br><span class="line">即元素的border+padding+content的宽度和高度</span><br><span class="line">该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。</span><br><span class="line"></span><br><span class="line">offsetLeft</span><br><span class="line">参照最近的定位父级，没有则参照body</span><br><span class="line">即定位父级的border-left + 自身定位的left + 自身的margin-left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scrollWidth</span><br><span class="line">子元素整个宽 + 自身padding-left</span><br><span class="line"></span><br><span class="line">scrollTop和scrollLeft：</span><br><span class="line">这对元素是可读写的，</span><br><span class="line">指的是当元素其中的内容超出其宽高的时候，元素被卷起的宽度和高度。</span><br></pre></td></tr></table></figure><h2 id="demo瀑布流"><a href="#demo瀑布流" class="headerlink" title="demo瀑布流"></a>demo瀑布流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;瀑布流&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    * &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #box &#123;</span></span><br><span class="line"><span class="regexp">      position: relative;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    img &#123;</span></span><br><span class="line"><span class="regexp">      width: 220px;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .item &#123;</span></span><br><span class="line"><span class="regexp">      box-shadow: 2px 2px 2px #999;</span></span><br><span class="line"><span class="regexp">      position: absolute;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="box"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;&lt;img style="width:200px" src="waterfall/</span><span class="number">0.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">22.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">3.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">4.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">5.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">6.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">7.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">8.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">9.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">10.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">11.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">12.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">13.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">14.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">15.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">16.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">17.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">18.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">19.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">20.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">21.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">22.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">0.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">11.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">10.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">14.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">20.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">17.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var box = document.getElementById('box');</span></span><br><span class="line"><span class="string">    var items = box.children;</span></span><br><span class="line"><span class="string">    // 定义每一列之间的间隙 为10像素</span></span><br><span class="line"><span class="string">    var gap = 10;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function () &#123;</span></span><br><span class="line"><span class="string">      // 一进来就调用一次</span></span><br><span class="line"><span class="string">      waterFall();</span></span><br><span class="line"><span class="string">      // 封装成一个函数</span></span><br><span class="line"><span class="string">      function waterFall() &#123;</span></span><br><span class="line"><span class="string">        // 1- 确定列数  = 页面的宽度 / 图片的宽度</span></span><br><span class="line"><span class="string">        var pageWidth = getClient().width;</span></span><br><span class="line"><span class="string">        var itemWidth = items[0].offsetWidth;</span></span><br><span class="line"><span class="string">        var columns = parseInt(pageWidth / (itemWidth + gap));</span></span><br><span class="line"><span class="string">        var arr = [];</span></span><br><span class="line"><span class="string">        for (var i = 0; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="string">          if (i &lt; columns) &#123;</span></span><br><span class="line"><span class="string">            // 2- 确定第一行</span></span><br><span class="line"><span class="string">            items[i].style.top = 0;</span></span><br><span class="line"><span class="string">            items[i].style.left = (itemWidth + gap) * i + 'px';</span></span><br><span class="line"><span class="string">            arr.push(items[i].offsetHeight);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &#125; else &#123;</span></span><br><span class="line"><span class="string">            // 其他行</span></span><br><span class="line"><span class="string">            // 3- 找到数组中最小高度  和 它的索引</span></span><br><span class="line"><span class="string">            var minHeight = arr[0];</span></span><br><span class="line"><span class="string">            var index = 0;</span></span><br><span class="line"><span class="string">            for (var j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="string">              if (minHeight &gt; arr[j]) &#123;</span></span><br><span class="line"><span class="string">                minHeight = arr[j];</span></span><br><span class="line"><span class="string">                index = j;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            // 4- 设置下一行的第一个盒子位置</span></span><br><span class="line"><span class="string">            // top值就是最小列的高度 + gap</span></span><br><span class="line"><span class="string">            items[i].style.top = arr[index] + gap + 'px';</span></span><br><span class="line"><span class="string">            // left值就是最小列距离左边的距离</span></span><br><span class="line"><span class="string">            items[i].style.left = items[index].offsetLeft + 'px';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 5- 修改最小列的高度 </span></span><br><span class="line"><span class="string">            // 最小列的高度 = 当前自己的高度 + 拼接过来的高度 + 间隙的高度</span></span><br><span class="line"><span class="string">            arr[index] = arr[index] + items[i].offsetHeight + gap;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      // 页面尺寸改变时实时触发</span></span><br><span class="line"><span class="string">      var timer = null;</span></span><br><span class="line"><span class="string">      window.onresize = function () &#123; //节流操作</span></span><br><span class="line"><span class="string">        clearTimeout(timer);</span></span><br><span class="line"><span class="string">        timer = setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">          waterFall();</span></span><br><span class="line"><span class="string">          // console.log(1);   </span></span><br><span class="line"><span class="string">        &#125;, 200);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">      // 当加载到第30张的时候</span></span><br><span class="line"><span class="string">      var timer1 = null;</span></span><br><span class="line"><span class="string">      window.onscroll = function () &#123;</span></span><br><span class="line"><span class="string">        clearTimeout(timer1); //节流操作</span></span><br><span class="line"><span class="string">        timer1 = setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">          if (getClient().height + getScrollTop() &gt;= items[items.length - 1].offsetTop) &#123;</span></span><br><span class="line"><span class="string">            // 模拟 ajax 获取数据    </span></span><br><span class="line"><span class="string">            var datas = [</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/c452a945a2649696beb03d892176d031.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/c452a945a2649696beb03d892176d031.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ];</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="string">              var div = document.createElement("</span>div<span class="string">");</span></span><br><span class="line"><span class="string">              div.className = "</span>item<span class="string">";</span></span><br><span class="line"><span class="string">              div.innerHTML = '&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span><span class="string">' + datas[i] + '</span><span class="string">" alt="</span><span class="string">"&gt;';</span></span><br><span class="line"><span class="string">              box.appendChild(div);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            waterFall();</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;, 200);</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // clientWidth 处理兼容性</span></span><br><span class="line"><span class="string">    function getClient() &#123;</span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">        width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,</span></span><br><span class="line"><span class="string">        height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // scrollTop兼容性处理</span></span><br><span class="line"><span class="string">    function getScrollTop() &#123;</span></span><br><span class="line"><span class="string">      return window.pageYOffset || document.documentElement.scrollTop;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-DOM</title>
      <link>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <guid>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <pubDate>Sat, 03 Aug 2019 10:53:10 GMT</pubDate>
      <description>
      
        DOM文档对象模型相关操作
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="dom获取"><a href="#dom获取" class="headerlink" title="dom获取"></a>dom获取</h1><ul><li>JS获取DOM元素的方法（8种）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过ID获取 getElementById</span><br><span class="line">通过name属性 getElementsByName</span><br><span class="line">通过标签名 getElementsByTagName</span><br><span class="line">通过类名 getElementsByClassName</span><br><span class="line">获取html的方法 <span class="built_in">document</span>.documentElement</span><br><span class="line">获取body的方法 <span class="built_in">document</span>.body</span><br><span class="line"></span><br><span class="line">通过选择器获取一个元素 querySelector</span><br><span class="line">通过选择器获取一组元素 querySelectorAll</span><br></pre></td></tr></table></figure><h1 id="html属性操作"><a href="#html属性操作" class="headerlink" title="html属性操作"></a>html属性操作</h1><h2 id="dataset-H5自定义属性操作"><a href="#dataset-H5自定义属性操作" class="headerlink" title="dataset H5自定义属性操作"></a>dataset H5自定义属性操作</h2><p>&emsp;&emsp;在通过dataset添加自定义属性的时候，不能带有”data-“。浏览器会自动添加data-。<br>&emsp;&emsp;data-前缀后面的属性名称也可以带有连字符。<br>&emsp;&emsp;当使用dataset属性进行动态操作的时候，需要转换连字符为驼峰写法，结果显示为连字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加自定义属性 并赋值</span><br><span class="line">div.dataset.shulu=<span class="string">"舒璐"</span>;</span><br><span class="line">div.dataset.lqyLove = <span class="string">"哈哈哈"</span> <span class="comment">//想要lqy-love写法，但得驼峰写法，最终显示为lqy-love</span></span><br><span class="line">    </span><br><span class="line">浏览器查看结果为：</span><br><span class="line">&lt;div data-shulu=<span class="string">"舒璐"</span> data-lqy-love=<span class="string">"哈哈哈"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="getAttribute-setAttribute属性操作"><a href="#getAttribute-setAttribute属性操作" class="headerlink" title="getAttribute/setAttribute属性操作"></a>getAttribute/setAttribute属性操作</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li></ul><blockquote><p>如果一个属性可能不存在于指定的元素上，在调用 getAttribute() 之前，你应该使用 element.hasAttribute() 来检测该属性是否存在。</p></blockquote><h2 id="dataset与getAttribute-setAttribute的区别"><a href="#dataset与getAttribute-setAttribute的区别" class="headerlink" title="dataset与getAttribute/setAttribute的区别:"></a>dataset与getAttribute/setAttribute的区别:</h2><ul><li>getAttribute和setAttribute方法也可以设置和获取元素的属性，主要区别如下：</li></ul><ol><li><p>上述两方法更加博爱，无论是否符合data-*语法格式，都可以顺利获取或者设置。</p></li><li><p>dataset则是专门针对符合HTML5规范的自定义属性的管理，更加方便。</p></li><li><p>dataset属性返回值是DOMStringMap对象，也就是说针对DOMStringMap对象的操作，然后影响到HTML元素，而getAttribute/setAttribute方法则是针对字符串的操作。</p></li></ol><h2 id="获取操作样式属性"><a href="#获取操作样式属性" class="headerlink" title="获取操作样式属性"></a>获取操作样式属性</h2><ul><li><p>获取元素的行间样式属性 element.style.样式属性</p></li><li><p>读取的样式是最终样式属性 getComputedStyle(element, 样式属性)</p></li></ul><blockquote><p>取相应属性值得时候都是采用的 CSS 驼峰式写法.</p></blockquote><ul><li><p>element.style 既支持读也支持写，我们通过 element.style 即可改写元素的样式。</p></li><li><p>而 getComputedStyle 仅支持读并不支持写入。我们可以通过使用 getComputedStyle 读取样式，通过 element.style 修改样式</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取最终样式属性方法</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComputed</span> (<span class="params">ele, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  ele.currentStyle ? ele.currentStyle(prop) : <span class="built_in">window</span>.getComputedStyle(ele, <span class="literal">null</span>)[prop]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="classList-类名操作"><a href="#classList-类名操作" class="headerlink" title="classList 类名操作"></a>classList 类名操作</h1><ol><li>add()：添加样式类。</li><li>item()：返回指定索引的样式类。</li><li>remove()：删除指定样式类。</li><li>toggle()：切换样式类</li><li>contains() 检查是否包含某属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.classList.add(<span class="string">'love'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(app.classList.item(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">app.classList.remove(<span class="string">'lqy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  app.classList.toggle(<span class="string">'love'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( app.classList.contains(<span class="string">'shulu'</span>))</span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><ol><li>appendChild()</li><li>insertBefore()</li><li>removeChild()</li><li>replaceChild()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">body.appendChild(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstEle = body.children[<span class="number">0</span>];</span><br><span class="line">body.insertBefore(div, firstEle);</span><br><span class="line"></span><br><span class="line">body.removeChild(firstEle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">body.replaceChild(text, div);</span><br></pre></td></tr></table></figure><h2 id="节点-元素层级获取"><a href="#节点-元素层级获取" class="headerlink" title="节点/元素层级获取"></a>节点/元素层级获取</h2><ul><li>节点包括了text文本节点等</li><li>元素只是就是HTML元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) </span><br><span class="line"><span class="built_in">console</span>.log(app.parentNode)             <span class="comment">// 父节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.childNodes)             <span class="comment">// 子节点集合</span></span><br><span class="line"><span class="built_in">console</span>.log(app.children)               <span class="comment">// 子元素</span></span><br><span class="line"><span class="built_in">console</span>.log(app.nextSibling)            <span class="comment">// 下一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.previousSibling)        <span class="comment">// 下一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.firstChild)             <span class="comment">// 第一个子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.lastChild)              <span class="comment">// 最后一个子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.nextElementSibling)     <span class="comment">// 下一个兄弟元素</span></span><br><span class="line"><span class="built_in">console</span>.log(app.previousElementSibling) <span class="comment">// 上一个兄弟元素</span></span><br></pre></td></tr></table></figure><h1 id="Dom事件"><a href="#Dom事件" class="headerlink" title="Dom事件"></a>Dom事件</h1><p>##基本概念 Dom事件级别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dom <span class="number">0</span>级事件：element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">Dom <span class="number">2</span>级事件：element.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;)</span><br><span class="line">Dom <span class="number">3</span>级事件：element.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;) 鼠标事件 键盘事件</span><br></pre></td></tr></table></figure><h2 id="Dom事件模型"><a href="#Dom事件模型" class="headerlink" title="Dom事件模型"></a>Dom事件模型</h2><ul><li>事件捕获 由上到下</li><li>事件冒泡 由下到上</li></ul><h2 id="Dom事件流"><a href="#Dom事件流" class="headerlink" title="Dom事件流"></a>Dom事件流</h2><ol><li>捕获阶段 由上到下</li><li>目标阶段</li><li>冒泡阶段 由下到上</li></ol><h2 id="描述Dom事件捕获的具体流程"><a href="#描述Dom事件捕获的具体流程" class="headerlink" title="描述Dom事件捕获的具体流程"></a>描述Dom事件捕获的具体流程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span></span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    html   (用js获取html标签：<span class="built_in">document</span>.documentElement)</span><br><span class="line">      body</span><br><span class="line">        ...</span><br><span class="line">          目标元素</span><br></pre></td></tr></table></figure><h2 id="捕获阶段触发事件-addEventListener的第三个参数为true即可"><a href="#捕获阶段触发事件-addEventListener的第三个参数为true即可" class="headerlink" title="捕获阶段触发事件 addEventListener的第三个参数为true即可"></a>捕获阶段触发事件 addEventListener的第三个参数为true即可</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">span.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'以上事件为捕获阶段触发的'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="冒泡阶段触发事件"><a href="#冒泡阶段触发事件" class="headerlink" title="冒泡阶段触发事件"></a>冒泡阶段触发事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">span.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'以下事件为冒泡阶段触发的'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault() 阻止默认事件</span><br><span class="line">event.stopPropagation() 阻止事件冒泡</span><br><span class="line">event.stopImmediatePropagation() 阻止事件冒泡并且阻止相同事件的其他侦听器被调用。</span><br><span class="line">event.currentTarget 事件的当前目标。它总是指向事件绑定的元素。通常为父元素。代理事件的元素。</span><br><span class="line">event.target 触发事件的对象 (某个DOM元素) 的引用。通常为子元素。 常见如 event.target.nodeName.toLowerCase() == <span class="string">'li'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span><br><span class="line">p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span><br><span class="line">    alert(<span class="string">"我是p元素上被绑定的第一个监听函数"</span>);</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span><br><span class="line">  alert(<span class="string">"我是p元素上被绑定的第二个监听函数"</span>);</span><br><span class="line"></span><br><span class="line">  event.stopImmediatePropagation();</span><br><span class="line">  </span><br><span class="line"><span class="comment">//执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">"click"</span>,(event) =&gt; &#123;</span><br><span class="line">  alert(<span class="string">"我是p元素上被绑定的第三个监听函数"</span>);</span><br><span class="line">  <span class="comment">// 该监听函数排在上个函数后面，该函数不会被执行</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><ul><li>创建一个自定义事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myevent =  <span class="keyword">new</span> Event(<span class="string">'custom'</span>)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">btn.addEventListener(<span class="string">'custom'</span>, () =&gt; &#123;</span><br><span class="line">  alert(<span class="string">'custom事件触发了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件 自定义触发条件</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  btn.dispatchEvent(myevent)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Mon, 12 Aug 2019 04:45:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ajax-跨域-jsonp</title>
      <link>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/</link>
      <guid>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/</guid>
      <pubDate>Sun, 11 Aug 2019 14:21:34 GMT</pubDate>
      <description>
      
        ajax跨域之jsonp以及jQuery中的jsonp封装
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp; 这世界很美——我要变成这个世界的一部分，变成哪些努力的人的一部分，变成这个人世界依旧美好的一部分。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ajax跨域之jsonp"><a href="#ajax跨域之jsonp" class="headerlink" title="ajax跨域之jsonp"></a>ajax跨域之jsonp</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>&emsp;&emsp;同源策略是浏览器的一种安全策略，所谓同源请求url地址中的协议、域名、端口都相同，只要其中之不同就是跨域</p><h2 id="跨域常用方法jsonp原理"><a href="#跨域常用方法jsonp原理" class="headerlink" title="跨域常用方法jsonp原理"></a>跨域常用方法jsonp原理</h2><ul><li>jsonp仅仅支持<strong>get</strong>请求</li></ul><h3 id="静态script标签的src实现进行跨域请求"><a href="#静态script标签的src实现进行跨域请求" class="headerlink" title="静态script标签的src实现进行跨域请求"></a>静态script标签的src实现进行跨域请求</h3><p><strong>不常用</strong> 存在的问题：</p><ol><li>必须保证加载的顺序</li><li>不方便传递参数</li></ol><h3 id="动态创建script标签，通过标签的src属性发送请求"><a href="#动态创建script标签，通过标签的src属性发送请求" class="headerlink" title="动态创建script标签，通过标签的src属性发送请求"></a>动态创建script标签，通过标签的src属性发送请求</h3><p><strong>常用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = <span class="string">'http://taobao.com/data.php?callback=foo&amp;name=shulu&amp;age=18'</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">head.appendChild(script)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data :'</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服务器返回一个【函数调用】即 foo(实参)</span></span><br><span class="line"><span class="comment">// ?callback=foo 通过这样设置后 函数名字就有前端决定</span></span><br><span class="line"><span class="comment">// 'callback' 这个字符串必须与后端一致 即有后端决定</span></span><br></pre></td></tr></table></figure><h2 id="jQuery中的jsonp"><a href="#jQuery中的jsonp" class="headerlink" title="jQuery中的jsonp"></a>jQuery中的jsonp</h2><p>&emsp;&emsp;jQuery中将jsonp的方法封装到了$.ajax()的方法中</p><ul><li>使用方法跟$.ajax()差不多<br>注意点：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataType: <span class="string">'jsonp'</span> </span><br><span class="line"><span class="comment">//必须指定为jsonp</span></span><br><span class="line">jsonp: <span class="string">'cb'</span> </span><br><span class="line"><span class="comment">//若后端获取回调函数的名字时用cb这个变量，</span></span><br><span class="line"><span class="comment">//这里就要指定为'cb',来迎合后端，一般情况下，为'callback'</span></span><br><span class="line">jsonpCallback: <span class="string">'foo'</span></span><br><span class="line"><span class="comment">//自定义回调函数的名字，,即callback这个键的值</span></span><br><span class="line"><span class="comment">//jQuery默认会生成一个很长的名字</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'http://taobao.com/data.php?callback=foo&amp;name=shulu&amp;age=18'</span>,</span><br><span class="line">  dataType: <span class="string">'jsonp'</span>, </span><br><span class="line">  jsonp: <span class="string">'cb'</span>, </span><br><span class="line">  jsonpCallback: <span class="string">'foo'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模仿实现jQuery中的jsonp"><a href="#模仿实现jQuery中的jsonp" class="headerlink" title="模仿实现jQuery中的jsonp"></a>模仿实现jQuery中的jsonp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认的回调函数名称 1.1.11为jquery的版本号</span></span><br><span class="line">  <span class="keyword">let</span> cbName = <span class="string">'jQuery'</span> + (<span class="string">'1.1.11'</span> + <span class="built_in">Math</span>.random().replace(<span class="regexp">/\D/g</span>,<span class="string">''</span>) + <span class="string">'_'</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))</span><br><span class="line">  <span class="keyword">if</span> (defaults.jsonpCallback) &#123;</span><br><span class="line">    cbName = defaults.jsonpCallback</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义回调函数 给window上添加一个方法</span></span><br><span class="line">  <span class="built_in">window</span>[cbName] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    defaults.success(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理参数 拼接成字符串参数</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">      param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">      param = <span class="string">'&amp;'</span> + param</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src =  defaults.url + <span class="string">'?'</span> + defaults.jsonp + <span class="string">'='</span> + cbName + param</span><br><span class="line">  <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模仿jQuery中的ajax中封装的jsonp"><a href="#模仿jQuery中的ajax中封装的jsonp" class="headerlink" title="模仿jQuery中的ajax中封装的jsonp"></a>模仿jQuery中的ajax中封装的jsonp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (defaults.dataType === <span class="string">'jsonp'</span>) &#123;</span><br><span class="line">    ajax4jsonp(defaults)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ajax4json(defaults)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajax4jsonp</span> (<span class="params">defaults</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 默认的回调函数名称 1.1.11为jquery的版本号</span></span><br><span class="line">    <span class="keyword">let</span> cbName = <span class="string">'jQuery'</span> + (<span class="string">'1.1.11'</span> + <span class="built_in">Math</span>.random().replace(<span class="regexp">/\D/g</span>,<span class="string">''</span>) + <span class="string">'_'</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))</span><br><span class="line">    <span class="keyword">if</span> (defaults.jsonpCallback) &#123;</span><br><span class="line">      cbName = defaults.jsonpCallback</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义回调函数 给window上添加一个方法</span></span><br><span class="line">    <span class="built_in">window</span>[cbName] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      defaults.success(data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数 拼接成字符串参数</span></span><br><span class="line">    <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">        param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">        param = <span class="string">'&amp;'</span> + param</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    script.src =  defaults.url + <span class="string">'?'</span> + defaults.jsonp + <span class="string">'='</span> + cbName + param</span><br><span class="line">    <span class="keyword">let</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">    head.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajax4json</span> (<span class="params">defaults</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建Ajax对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理defaults.data 将对象形式参数拼接成参数字符串</span></span><br><span class="line">    <span class="comment">// 即 name=yachan&amp;age=18 的形式</span></span><br><span class="line">    <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">        param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去掉最后一个&amp;符号</span></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">      param = param.substring(<span class="number">0</span>, param.length - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若为get请求 则直接往url后面拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">'get'</span>) &#123;</span><br><span class="line">      defaults.url += <span class="string">'?'</span> + <span class="built_in">encodeURI</span>(param) <span class="comment">//编码中文 防止出现乱码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若为post请求</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">'post'</span>) &#123;</span><br><span class="line">      data = param</span><br><span class="line">      <span class="comment">// 设置请求头(必须设置)</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2 准备发送 设置发送参数</span></span><br><span class="line">    xhr.open(defaults.type, defaults.url, defaults.async)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 发送请求 执行发送动作</span></span><br><span class="line">    xhr.send(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若为同步请求 不经过回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (!defaults.async) &#123;</span><br><span class="line">      <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xhr.responseText</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4 指定回调函数(异步) 处理服务器返回值</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">          <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">          &#125;</span><br><span class="line">          defaults.success(data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsonp案例之百度智能搜索提示"><a href="#jsonp案例之百度智能搜索提示" class="headerlink" title="jsonp案例之百度智能搜索提示"></a>jsonp案例之百度智能搜索提示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keyword"</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">placeholder</span>=<span class="string">"请输入搜索内容……"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span> <span class="attr">id</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#keyword</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#query</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#keyword'</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>)</span><br><span class="line">    <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">'info'</span>)</span><br><span class="line">    info.innerHTML = <span class="string">''</span> <span class="comment">//清空之前的内容</span></span><br><span class="line">    <span class="keyword">var</span> kw = $(<span class="keyword">this</span>).val()</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">'https://www.baidu.com/sugrec?pre=1&amp;p=3&amp;ie=utf-8&amp;json=1&amp;prod=pc&amp;from=pc_web&amp;sugsid=1458,21089,29522,29518,29099,29568,28833,29221,22160'</span>,</span><br><span class="line">      jsonp: <span class="string">'cb'</span>,</span><br><span class="line">      data: &#123;<span class="attr">wd</span>: kw&#125;,</span><br><span class="line">      dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> query = data.g</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; query.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">          li.innerText = query[i].q</span><br><span class="line">          ul.appendChild(li)</span><br><span class="line">        &#125;</span><br><span class="line">        info.appendChild(ul)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/ajax-%E8%B7%A8%E5%9F%9F/ajax-%E8%B7%A8%E5%9F%9F-jsonp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ajax</title>
      <link>https://shulu520.com/ajax/ajax/</link>
      <guid>https://shulu520.com/ajax/ajax/</guid>
      <pubDate>Sun, 11 Aug 2019 03:56:12 GMT</pubDate>
      <description>
      
        原生ajax以及模仿jQuery中的$.ajax的实现
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;全力以赴——全力以赴就是想尽所有的办法，用尽所有的资源。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="ajax即XMLHttpRequest"><a href="#ajax即XMLHttpRequest" class="headerlink" title="ajax即XMLHttpRequest"></a>ajax即XMLHttpRequest</h1><p>&emsp;&emsp;Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。<br>&emsp;&emsp;Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<br>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>&emsp;&emsp;传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><h2 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XMLHttpRequest</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备发送请求  请求方式 地址 是否异步</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'xxx.com/data'</span>, <span class="literal">true</span>) <span class="comment">//true异步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行发送动作</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调函数</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery中的ajax"><a href="#jQuery中的ajax" class="headerlink" title="jQuery中的ajax"></a>jQuery中的ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'请求方式'</span>,</span><br><span class="line">  url: <span class="string">'请求地址'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模仿封装jQuery中的ajax"><a href="#模仿封装jQuery中的ajax" class="headerlink" title="模仿封装jQuery中的ajax"></a>模仿封装jQuery中的ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ajax默认参数</span></span><br><span class="line">  <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    url: <span class="string">'#'</span>,</span><br><span class="line">    dataType: <span class="string">'text'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历obj对象 覆盖defaults对象 没有覆盖的即为默认值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      defaults[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1 创建Ajax对象</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理defaults.data 将对象形式参数拼接成参数字符串</span></span><br><span class="line">  <span class="comment">// 即 name=yachan&amp;age=18 的形式</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.data.hasOwnProperty(key)) &#123;</span><br><span class="line">      param += key + <span class="string">'='</span> + defaults.data[key] + <span class="string">'&amp;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 去掉最后一个&amp;符号</span></span><br><span class="line">  <span class="keyword">if</span> (param) &#123;</span><br><span class="line">    param = param.substring(<span class="number">0</span>, param.length - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若为get请求 则直接往url后面拼接参数</span></span><br><span class="line">  <span class="keyword">if</span> (defaults.type === <span class="string">'get'</span>) &#123;</span><br><span class="line">    defaults.url += <span class="string">'?'</span> + <span class="built_in">encodeURI</span>(param) <span class="comment">//编码中文 防止出现乱码</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若为post请求</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (defaults.type === <span class="string">'post'</span>) &#123;</span><br><span class="line">    data = param</span><br><span class="line">    <span class="comment">// 设置请求头(必须设置)</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2 准备发送 设置发送参数</span></span><br><span class="line">  xhr.open(defaults.type, defaults.url, defaults.async)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3 发送请求 执行发送动作</span></span><br><span class="line">  xhr.send(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若为同步请求 不经过回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (!defaults.async) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> xhr.responseText</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 指定回调函数(异步) 处理服务器返回值</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (shr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">        <span class="keyword">if</span> (defaults.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">          data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">        &#125;</span><br><span class="line">        defaults.success(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/ajax/ajax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-Regex</title>
      <link>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <guid>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <pubDate>Sat, 10 Aug 2019 08:14:36 GMT</pubDate>
      <description>
      
        正则表达式知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;淡定的人生不寂寞——繁华过后是寂寞，绚烂过后是平淡，保持淡定的人，一定是最美丽最幸福的人。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>&emsp;&emsp; 正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h2 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h2><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><p>&emsp;&emsp; 普通字符<br>&emsp;&emsp; 特殊字符(元字符)：正则表达式中有特殊意义的字符</p><h3 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line"></span><br><span class="line">()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span><br><span class="line">var reg = /(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/;</span><br><span class="line">if (reg.test(dateStr)) &#123;</span><br><span class="line">  console.log(RegExp.$1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字 任意一个汉字</span><br></pre></td></tr></table></figure><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><h3 id="Regexp对象-有两个"><a href="#Regexp对象-有两个" class="headerlink" title="Regexp对象 有两个"></a>Regexp对象 有两个</h3><p>&emsp;&emsp; test()检测 布尔值<br>&emsp;&emsp; exec()提取 只返回一个匹配到的结果 若要提取多个值则得循环进行提取</p><h3 id="String对象-有四个"><a href="#String对象-有四个" class="headerlink" title="String对象 有四个"></a>String对象 有四个</h3><p>&emsp;&emsp; match()提取多个内容 返回一个数组</p><p>&emsp;&emsp; replace(reg, 替换字符)替换<br>&emsp;&emsp; replace的参数可以是函数而不是字符串，每个匹配都会调用该函数，它返回的字符串将作为替换的文本使用。</p><p>&emsp;&emsp; split(delimiter, limit) 切割字符串 返回一个字符串数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">split()方法可以把调用它的字符串分解为一个字串数组，使用的分隔符是它的参数。</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">delimiter：字符串或者正则表达式，从该参数指定的地方分割字符串。</span><br><span class="line"></span><br><span class="line">limit：指定返回数组的最大长度，如果没有设置该参数，则整个字符串都会被分割。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; search() 查找并且返回第一个匹配字串的<strong>第一个字符的位置</strong>。如果没有找到任何匹配的字串，则返回-1。</p><h2 id="非贪婪模式-表示"><a href="#非贪婪模式-表示" class="headerlink" title="非贪婪模式 ?表示"></a>非贪婪模式 ?表示</h2><p>&emsp;&emsp; 所谓的”贪婪”的意思就是，如果符合要求就一直往后匹配，一直到无法匹配为止，这就是贪婪模式。<br>&emsp;&emsp; 所谓的非贪婪模式就是一旦匹配到合适的就结束，不在继续匹配下去了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">贪婪模式的标示符：</span><br><span class="line">+，？，*，&#123;n&#125;,&#123;n,&#125;,&#123;n,m&#125;</span><br><span class="line"></span><br><span class="line">非贪婪模式: </span><br><span class="line">+？，？？，*？？，&#123;n&#125;?，&#123;n,&#125;?,&#123;n,m&#125;?</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/Regex/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-obj-clone</title>
      <link>https://shulu520.com/obj-clone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/</link>
      <guid>https://shulu520.com/obj-clone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/</guid>
      <pubDate>Sat, 10 Aug 2019 07:04:03 GMT</pubDate>
      <description>
      
        js面向对象-对象拷贝-深浅拷贝
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;步履不停——只管走过去，不要都逗留着去采了花朵来保存，因为一路上花朵会继续开放。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="面向对象–对象拷贝"><a href="#面向对象–对象拷贝" class="headerlink" title="面向对象–对象拷贝"></a>面向对象–对象拷贝</h1><p>&emsp;&emsp;将一个对象的所有的属性和方法都拷贝一份给另一个对象。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>&emsp;&emsp;若对象的属性为基本数据类型，则复制一份，若对象的属性为复杂数据如对象、数组等，则拷贝一份地址值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  name: <span class="string">'yachan'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  pet: &#123;</span><br><span class="line">    name: <span class="string">'huahua'</span>,</span><br><span class="line">    age: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  love: [<span class="string">'eat'</span>, <span class="string">'drink'</span>, <span class="string">'babe'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObj</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1.hasOwnProperty(key)) &#123;</span><br><span class="line">      o2[key] = o1[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">  hobby: <span class="string">'readBook'</span></span><br><span class="line">&#125;</span><br><span class="line">copyObj(o1, o2)</span><br><span class="line"><span class="comment">//修改o2的pet和love时，o1的pet和love相应属性也跟着变</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>&emsp;&emsp;若对象的属性为基本数据类型，则复制一份，若对象的属性为复杂数据如对象、数组等，则<strong>递归</strong>调用函数自身，深入内层进行拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">var</span> item = o1[key]</span><br><span class="line">      <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        <span class="comment">// key为数组</span></span><br><span class="line">        o2[key] = []</span><br><span class="line">        deepCopy(item, o2[key])</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="comment">// key为对象</span></span><br><span class="line">        o2[key] = &#123;&#125;</span><br><span class="line">        deepCopy(item, o2[key])</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// key为基本数据类型</span></span><br><span class="line">        o2[key] = o1[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line">deepCopy(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o2 :'</span>, o2)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* o2 : &#123; </span></span><br><span class="line"><span class="comment">  name: 'yachan', </span></span><br><span class="line"><span class="comment">  age: 18, </span></span><br><span class="line"><span class="comment">  sex: '女', </span></span><br><span class="line"><span class="comment">  pet: &#123; name: 'huahua', age: 2 &#125;, </span></span><br><span class="line"><span class="comment">  love: [ 'eat', 'drink', 'babe' ] &#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">o2.pet.age = <span class="number">6</span></span><br><span class="line">o2.love[<span class="number">2</span>] = <span class="string">'lqy'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o1 :'</span>, o1)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* o1 : &#123; </span></span><br><span class="line"><span class="comment">  name: 'yachan', </span></span><br><span class="line"><span class="comment">  age: 18, </span></span><br><span class="line"><span class="comment">  sex: '女', </span></span><br><span class="line"><span class="comment">  pet: &#123; name: 'huahua', age: 2 &#125;, </span></span><br><span class="line"><span class="comment">  love: [ 'eat', 'drink', 'babe' ] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o2 :'</span>, o2)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* o2 : &#123; </span></span><br><span class="line"><span class="comment">  name: 'yachan', </span></span><br><span class="line"><span class="comment">  age: 18, </span></span><br><span class="line"><span class="comment">  sex: '女', </span></span><br><span class="line"><span class="comment">  pet: &#123; name: 'huahua', age: 6 &#125;, </span></span><br><span class="line"><span class="comment">  love: [ 'eat', 'drink', 'lqy' ] &#125;  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/obj-clone/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-inherit</title>
      <link>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/</link>
      <guid>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/</guid>
      <pubDate>Wed, 07 Aug 2019 08:27:59 GMT</pubDate>
      <description>
      
        js-面向对象编程之-继承-知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;坚持下去——哪有什么天才，坚持做你喜欢的事情，这本身就是一种天赋。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="一：原型继承–适合继承父类原型上的-方法"><a href="#一：原型继承–适合继承父类原型上的-方法" class="headerlink" title="一：原型继承–适合继承父类原型上的-方法"></a>一：原型继承–适合继承父类原型上的-方法</h1><ul><li>即把父类构造函数的一个实例赋值给子类构造函数作为原型对象</li></ul><h2 id="实现demo"><a href="#实现demo" class="headerlink" title="实现demo"></a>实现demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Person父类原型上的方法test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数的原型对象初始化时只能传一次值</span></span><br><span class="line"><span class="comment">// 所以后面子类实例化时无法设置继承自父类构造函数的参数</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">'ls'</span>, <span class="number">18</span>, <span class="string">'男'</span>)</span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//修正constructor的指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="number">80</span>)</span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(student1) <span class="comment">//name等属性都设置不了</span></span><br><span class="line"><span class="built_in">console</span>.dir(student2) <span class="comment">//name等属性都设置不了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'student1.test() :'</span>, student1.test()) <span class="comment">//可以调用</span></span><br></pre></td></tr></table></figure><h2 id="原型继承的缺点："><a href="#原型继承的缺点：" class="headerlink" title="原型继承的缺点："></a>原型继承的缺点：</h2><p>&emsp;&emsp;继承时无法设置父类构造函数的参数，即无法个性化继承来的属性值<br>&emsp;&emsp;还有：父类原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！</p><h1 id="二：借用构造函数-假继承-–适合继承父类构造函数的-属性"><a href="#二：借用构造函数-假继承-–适合继承父类构造函数的-属性" class="headerlink" title="二：借用构造函数(假继承)–适合继承父类构造函数的-属性"></a>二：借用构造函数(假继承)–适合继承父类构造函数的-属性</h1><ul><li>在子类构造函数中使用call执行父类构造函数</li></ul><h2 id="demo实现"><a href="#demo实现" class="headerlink" title="demo实现"></a>demo实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Person父类原型上的方法'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1 :'</span>, s1) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s2 :'</span>, s2) <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1.test :'</span>, s1.test) <span class="comment">//undefined </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1.test() :'</span>, s1.test()) <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为test方法在父类的原型对象上，只有其实例才可以调用</span></span><br><span class="line"><span class="comment">// 子类借用父类构造函数，并没有生成实例去调用父类原型上的方法</span></span><br></pre></td></tr></table></figure><h2 id="借用构造函数的缺点："><a href="#借用构造函数的缺点：" class="headerlink" title="借用构造函数的缺点："></a>借用构造函数的缺点：</h2><ul><li>显而易见的，子类实例继承不了父类原型上的方法</li></ul><h2 id="组合继承-原型继承-借用构造函数"><a href="#组合继承-原型继承-借用构造函数" class="headerlink" title="组合继承=原型继承+借用构造函数"></a>组合继承=原型继承+借用构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Person父类原型上的方法'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//修正constructor的指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s1 :'</span>, s3) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s2 :'</span>, s4) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s3.test() :'</span>, s3.test()) <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><h2 id="组合继承的优化–寄生组合式继承"><a href="#组合继承的优化–寄生组合式继承" class="headerlink" title="组合继承的优化–寄生组合式继承"></a>组合继承的优化–寄生组合式继承</h2><p>&emsp;&emsp;1. 在借用构造函数中，已经继承到了父类的属性，所以原型继承中只继承父类的方法就行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">优化为：Student.prototype = Person.prototype</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2. 经过上一次优化后，将父类原型对象的值(地址值)赋给子类，此时父类子类的原型对象为同一个对象，修改其中的一个另一个也会跟着变。给子类原型添加某方法，父类原型也有了这个方法，这显然不是我们想要的结果。</p><p>&emsp;&emsp;3. Object.create()方法创建一个新对象，使用现有的对象(当作参数)来提供新创建的对象的<strong>proto</strong>。这里不是直接引用Parent.prototype，而是借助它创建一个新的对象，从而实现父子构造函数原型对象的隔离。</p><ul><li>最佳版本：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最优解为：</span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype)</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello,'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age, sex)</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype)</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line">Student.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi,'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student(<span class="string">'娅蝉'</span>, <span class="number">18</span>, <span class="string">'女'</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Student(<span class="string">'秋云'</span>, <span class="number">22</span>, <span class="string">'男'</span>, <span class="number">66</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s3 :'</span>, s3)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'s4 :'</span>, s4)</span><br><span class="line">s3.test()</span><br><span class="line">s4.sayHi() <span class="comment">//完美</span></span><br></pre></td></tr></table></figure><h2 id="扩展-Object-cerate方法的实现"><a href="#扩展-Object-cerate方法的实现" class="headerlink" title="扩展-Object.cerate方法的实现"></a>扩展-Object.cerate方法的实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//亲测有效</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-oop/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-BOM-web-api</title>
      <link>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/</link>
      <guid>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/</guid>
      <pubDate>Sat, 03 Aug 2019 10:55:18 GMT</pubDate>
      <description>
      
        BOM浏览器对象模型 web-api相关操作
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="BOM模态框操作"><a href="#BOM模态框操作" class="headerlink" title="BOM模态框操作"></a>BOM模态框操作</h1><ul><li>alert()   只有确定按钮</li><li>confirm() 可带提示文本 确定取消按钮</li><li>prompt()  可带提示文本 带文本输入框 确定取消按钮</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">"Do you really want to leave?"</span>)) &#123; </span><br><span class="line">  alert(<span class="string">"Thanks for Visiting!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sign = prompt(<span class="string">"你是什么星座的?"</span>)</span><br><span class="line"><span class="keyword">if</span> (sign == <span class="string">"天蝎座"</span>)&#123;</span><br><span class="line">   alert(<span class="string">"哇! 我也是天蝎座的耶!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">window</span>.prompt(<span class="string">'你觉得很幸运吗?'</span>,<span class="string">'是的'</span>) 默认为是的</span><br></pre></td></tr></table></figure><h1 id="window页面加载"><a href="#window页面加载" class="headerlink" title="window页面加载"></a>window页面加载</h1><p>&emsp;&emsp;window.onload() 当页面加载完成执行 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行<br>&emsp;&emsp;window.onunload() 当用户退出页面时执行</p><h2 id="浏览器窗口活跃监听-页面失去焦点获得焦点"><a href="#浏览器窗口活跃监听-页面失去焦点获得焦点" class="headerlink" title="浏览器窗口活跃监听-页面失去焦点获得焦点"></a>浏览器窗口活跃监听-页面失去焦点获得焦点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">'欢迎你嗷~~^-^'</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'原来的title'</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">window</span>.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">'别离开我嘛^-^'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><ul><li>location对象是window对象下的一个属性.</li><li>location可以获取或者设置浏览器地址栏的URL</li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><p>统一资源定位符 (Uniform Resource Locator, URL)</p></li><li><p>URL的组成</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scheme:<span class="comment">//host:port/path?query#fragment</span></span><br><span class="line">scheme:通信协议</span><br><span class="line">常用的http,ftp,maito等</span><br><span class="line">host:主机</span><br><span class="line">服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</span><br><span class="line">port:端口号</span><br><span class="line">整数，可选，省略时使用方案的默认端口，如http的默认端口为<span class="number">80</span>。</span><br><span class="line">path:路径</span><br><span class="line">由零或多个<span class="string">'/'</span>符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</span><br><span class="line">query:查询</span><br><span class="line">可选，用于给动态网页传递参数，可有多个参数，用<span class="string">'&amp;'</span>符号隔开，每个参数的名和值用<span class="string">'='</span>符号隔开。例如：name=zs</span><br><span class="line">fragment:信息片断</span><br><span class="line">字符串，锚点.</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">url.href = <span class="string">'https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.href);      <span class="comment">// https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container</span></span><br><span class="line"><span class="built_in">console</span>.log(url.protocol);  <span class="comment">// https:</span></span><br><span class="line"><span class="built_in">console</span>.log(url.host);      <span class="comment">// developer.mozilla.org</span></span><br><span class="line"><span class="built_in">console</span>.log(url.hostname);  <span class="comment">// developer.mozilla.org</span></span><br><span class="line"><span class="built_in">console</span>.log(url.port);      <span class="comment">// (blank - https assumes port 443)</span></span><br><span class="line"><span class="built_in">console</span>.log(url.pathname);  <span class="comment">// /en-US/search</span></span><br><span class="line"><span class="built_in">console</span>.log(url.search);    <span class="comment">// ?q=URL</span></span><br><span class="line"><span class="built_in">console</span>.log(url.hash);      <span class="comment">// #search-results-close-container</span></span><br><span class="line"><span class="built_in">console</span>.log(url.origin);    <span class="comment">// https://developer.mozilla.org</span></span><br></pre></td></tr></table></figure><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h1 id="window-navigator对象"><a href="#window-navigator对象" class="headerlink" title="window.navigator对象"></a>window.navigator对象</h1><p>&emsp;&emsp;window.navigator.userAgent 通过userAgent可以判断用户浏览器的类型<br>&emsp;&emsp;window.navigator.platform 通过platform可以判断浏览器所在的系统平台类型.</p><h1 id="高度宽度"><a href="#高度宽度" class="headerlink" title="高度宽度"></a>高度宽度</h1><h2 id="offset偏移量-client可视区-scroll滚动条-screen屏幕"><a href="#offset偏移量-client可视区-scroll滚动条-screen屏幕" class="headerlink" title="offset偏移量 client可视区 scroll滚动条 screen屏幕"></a>offset偏移量 client可视区 scroll滚动条 screen屏幕</h2><ul><li>body身上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">网页可见区域宽：<span class="built_in">document</span>.body.clientWidth </span><br><span class="line">网页可见区域高：<span class="built_in">document</span>.body.clientHeight </span><br><span class="line"></span><br><span class="line">网页被卷去的高：<span class="built_in">document</span>.body.scrollTop </span><br><span class="line">网页被卷去的左：<span class="built_in">document</span>.body.scrollLeft </span><br><span class="line">网页正文全文宽：<span class="built_in">document</span>.body.scrollWidth </span><br><span class="line">网页正文全文高：<span class="built_in">document</span>.body.scrollHeight </span><br><span class="line"></span><br><span class="line">浏览器上边框距离屏幕上边框：<span class="built_in">window</span>.screenTop </span><br><span class="line">浏览器左边框距离屏幕左边框：<span class="built_in">window</span>.screenLeft </span><br><span class="line">屏幕分辨率的高：<span class="built_in">window</span>.screen.height </span><br><span class="line">屏幕分辨率的宽：<span class="built_in">window</span>.screen.width</span><br></pre></td></tr></table></figure><ul><li>element元素身上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">clientWidth和clientHeight：</span><br><span class="line">元素的可视部分宽度和高度</span><br><span class="line">即content宽 + padding(有则加上两边padding) - 滚动条宽(有则减去就行)</span><br><span class="line"></span><br><span class="line">clientLeft和clientTop：</span><br><span class="line">元素的border部分宽度和高度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offsetParent：</span><br><span class="line">用于获取定位的父级元素</span><br><span class="line"></span><br><span class="line">offsetWidth和offsetHeight：</span><br><span class="line">整个容器的宽高,以一个外人的角度看</span><br><span class="line">即元素的border+padding+content的宽度和高度</span><br><span class="line">该属性和其内部的内容是否超出元素大小无关，只和本来设置的border以及width和height有关。</span><br><span class="line"></span><br><span class="line">offsetLeft</span><br><span class="line">参照最近的定位父级，没有则参照body</span><br><span class="line">即定位父级的border-left + 自身定位的left + 自身的margin-left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scrollWidth</span><br><span class="line">子元素整个宽 + 自身padding-left</span><br><span class="line"></span><br><span class="line">scrollTop和scrollLeft：</span><br><span class="line">这对元素是可读写的，</span><br><span class="line">指的是当元素其中的内容超出其宽高的时候，元素被卷起的宽度和高度。</span><br></pre></td></tr></table></figure><h2 id="demo瀑布流"><a href="#demo瀑布流" class="headerlink" title="demo瀑布流"></a>demo瀑布流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;瀑布流&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    * &#123;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #box &#123;</span></span><br><span class="line"><span class="regexp">      position: relative;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    img &#123;</span></span><br><span class="line"><span class="regexp">      width: 220px;</span></span><br><span class="line"><span class="regexp">      display: block;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .item &#123;</span></span><br><span class="line"><span class="regexp">      box-shadow: 2px 2px 2px #999;</span></span><br><span class="line"><span class="regexp">      position: absolute;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="box"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;&lt;img style="width:200px" src="waterfall/</span><span class="number">0.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">22.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">3.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">4.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">5.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">6.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">7.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">8.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">9.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">10.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">11.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">12.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">13.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">14.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">15.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">16.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">17.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">18.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">19.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">20.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">21.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">22.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">1.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">0.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">11.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">10.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">14.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">20.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>item<span class="string">"&gt;&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span>waterfall/<span class="number">17.</span>jpg<span class="string">" alt="</span><span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var box = document.getElementById('box');</span></span><br><span class="line"><span class="string">    var items = box.children;</span></span><br><span class="line"><span class="string">    // 定义每一列之间的间隙 为10像素</span></span><br><span class="line"><span class="string">    var gap = 10;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function () &#123;</span></span><br><span class="line"><span class="string">      // 一进来就调用一次</span></span><br><span class="line"><span class="string">      waterFall();</span></span><br><span class="line"><span class="string">      // 封装成一个函数</span></span><br><span class="line"><span class="string">      function waterFall() &#123;</span></span><br><span class="line"><span class="string">        // 1- 确定列数  = 页面的宽度 / 图片的宽度</span></span><br><span class="line"><span class="string">        var pageWidth = getClient().width;</span></span><br><span class="line"><span class="string">        var itemWidth = items[0].offsetWidth;</span></span><br><span class="line"><span class="string">        var columns = parseInt(pageWidth / (itemWidth + gap));</span></span><br><span class="line"><span class="string">        var arr = [];</span></span><br><span class="line"><span class="string">        for (var i = 0; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="string">          if (i &lt; columns) &#123;</span></span><br><span class="line"><span class="string">            // 2- 确定第一行</span></span><br><span class="line"><span class="string">            items[i].style.top = 0;</span></span><br><span class="line"><span class="string">            items[i].style.left = (itemWidth + gap) * i + 'px';</span></span><br><span class="line"><span class="string">            arr.push(items[i].offsetHeight);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &#125; else &#123;</span></span><br><span class="line"><span class="string">            // 其他行</span></span><br><span class="line"><span class="string">            // 3- 找到数组中最小高度  和 它的索引</span></span><br><span class="line"><span class="string">            var minHeight = arr[0];</span></span><br><span class="line"><span class="string">            var index = 0;</span></span><br><span class="line"><span class="string">            for (var j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="string">              if (minHeight &gt; arr[j]) &#123;</span></span><br><span class="line"><span class="string">                minHeight = arr[j];</span></span><br><span class="line"><span class="string">                index = j;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            // 4- 设置下一行的第一个盒子位置</span></span><br><span class="line"><span class="string">            // top值就是最小列的高度 + gap</span></span><br><span class="line"><span class="string">            items[i].style.top = arr[index] + gap + 'px';</span></span><br><span class="line"><span class="string">            // left值就是最小列距离左边的距离</span></span><br><span class="line"><span class="string">            items[i].style.left = items[index].offsetLeft + 'px';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 5- 修改最小列的高度 </span></span><br><span class="line"><span class="string">            // 最小列的高度 = 当前自己的高度 + 拼接过来的高度 + 间隙的高度</span></span><br><span class="line"><span class="string">            arr[index] = arr[index] + items[i].offsetHeight + gap;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      // 页面尺寸改变时实时触发</span></span><br><span class="line"><span class="string">      var timer = null;</span></span><br><span class="line"><span class="string">      window.onresize = function () &#123; //节流操作</span></span><br><span class="line"><span class="string">        clearTimeout(timer);</span></span><br><span class="line"><span class="string">        timer = setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">          waterFall();</span></span><br><span class="line"><span class="string">          // console.log(1);   </span></span><br><span class="line"><span class="string">        &#125;, 200);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">      // 当加载到第30张的时候</span></span><br><span class="line"><span class="string">      var timer1 = null;</span></span><br><span class="line"><span class="string">      window.onscroll = function () &#123;</span></span><br><span class="line"><span class="string">        clearTimeout(timer1); //节流操作</span></span><br><span class="line"><span class="string">        timer1 = setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">          if (getClient().height + getScrollTop() &gt;= items[items.length - 1].offsetTop) &#123;</span></span><br><span class="line"><span class="string">            // 模拟 ajax 获取数据    </span></span><br><span class="line"><span class="string">            var datas = [</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/c452a945a2649696beb03d892176d031.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/c452a945a2649696beb03d892176d031.jpg<span class="string">",</span></span><br><span class="line"><span class="string">              "</span>waterfall/ac83da565dfbb2ba9d8df0e8b360f0ee.jpg<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ];</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="string">              var div = document.createElement("</span>div<span class="string">");</span></span><br><span class="line"><span class="string">              div.className = "</span>item<span class="string">";</span></span><br><span class="line"><span class="string">              div.innerHTML = '&lt;img style="</span>width:<span class="number">200</span>px<span class="string">" src="</span><span class="string">' + datas[i] + '</span><span class="string">" alt="</span><span class="string">"&gt;';</span></span><br><span class="line"><span class="string">              box.appendChild(div);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            waterFall();</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;, 200);</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // clientWidth 处理兼容性</span></span><br><span class="line"><span class="string">    function getClient() &#123;</span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">        width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,</span></span><br><span class="line"><span class="string">        height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // scrollTop兼容性处理</span></span><br><span class="line"><span class="string">    function getScrollTop() &#123;</span></span><br><span class="line"><span class="string">      return window.pageYOffset || document.documentElement.scrollTop;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-BOM/js-%E7%BB%84%E6%88%90-BOM-web-api/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-DOM</title>
      <link>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <guid>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <pubDate>Sat, 03 Aug 2019 10:53:10 GMT</pubDate>
      <description>
      
        DOM文档对象模型相关操作
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="dom获取"><a href="#dom获取" class="headerlink" title="dom获取"></a>dom获取</h1><ul><li>JS获取DOM元素的方法（8种）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过ID获取 getElementById</span><br><span class="line">通过name属性 getElementsByName</span><br><span class="line">通过标签名 getElementsByTagName</span><br><span class="line">通过类名 getElementsByClassName</span><br><span class="line">获取html的方法 <span class="built_in">document</span>.documentElement</span><br><span class="line">获取body的方法 <span class="built_in">document</span>.body</span><br><span class="line"></span><br><span class="line">通过选择器获取一个元素 querySelector</span><br><span class="line">通过选择器获取一组元素 querySelectorAll</span><br></pre></td></tr></table></figure><h1 id="html属性操作"><a href="#html属性操作" class="headerlink" title="html属性操作"></a>html属性操作</h1><h2 id="dataset-H5自定义属性操作"><a href="#dataset-H5自定义属性操作" class="headerlink" title="dataset H5自定义属性操作"></a>dataset H5自定义属性操作</h2><p>&emsp;&emsp;在通过dataset添加自定义属性的时候，不能带有”data-“。浏览器会自动添加data-。<br>&emsp;&emsp;data-前缀后面的属性名称也可以带有连字符。<br>&emsp;&emsp;当使用dataset属性进行动态操作的时候，需要转换连字符为驼峰写法，结果显示为连字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加自定义属性 并赋值</span><br><span class="line">div.dataset.shulu=<span class="string">"舒璐"</span>;</span><br><span class="line">div.dataset.lqyLove = <span class="string">"哈哈哈"</span> <span class="comment">//想要lqy-love写法，但得驼峰写法，最终显示为lqy-love</span></span><br><span class="line">    </span><br><span class="line">浏览器查看结果为：</span><br><span class="line">&lt;div data-shulu=<span class="string">"舒璐"</span> data-lqy-love=<span class="string">"哈哈哈"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="getAttribute-setAttribute属性操作"><a href="#getAttribute-setAttribute属性操作" class="headerlink" title="getAttribute/setAttribute属性操作"></a>getAttribute/setAttribute属性操作</h2><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li></ul><blockquote><p>如果一个属性可能不存在于指定的元素上，在调用 getAttribute() 之前，你应该使用 element.hasAttribute() 来检测该属性是否存在。</p></blockquote><h2 id="dataset与getAttribute-setAttribute的区别"><a href="#dataset与getAttribute-setAttribute的区别" class="headerlink" title="dataset与getAttribute/setAttribute的区别:"></a>dataset与getAttribute/setAttribute的区别:</h2><ul><li>getAttribute和setAttribute方法也可以设置和获取元素的属性，主要区别如下：</li></ul><ol><li><p>上述两方法更加博爱，无论是否符合data-*语法格式，都可以顺利获取或者设置。</p></li><li><p>dataset则是专门针对符合HTML5规范的自定义属性的管理，更加方便。</p></li><li><p>dataset属性返回值是DOMStringMap对象，也就是说针对DOMStringMap对象的操作，然后影响到HTML元素，而getAttribute/setAttribute方法则是针对字符串的操作。</p></li></ol><h2 id="获取操作样式属性"><a href="#获取操作样式属性" class="headerlink" title="获取操作样式属性"></a>获取操作样式属性</h2><ul><li><p>获取元素的行间样式属性 element.style.样式属性</p></li><li><p>读取的样式是最终样式属性 getComputedStyle(element, 样式属性)</p></li></ul><blockquote><p>取相应属性值得时候都是采用的 CSS 驼峰式写法.</p></blockquote><ul><li><p>element.style 既支持读也支持写，我们通过 element.style 即可改写元素的样式。</p></li><li><p>而 getComputedStyle 仅支持读并不支持写入。我们可以通过使用 getComputedStyle 读取样式，通过 element.style 修改样式</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取最终样式属性方法</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComputed</span> (<span class="params">ele, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  ele.currentStyle ? ele.currentStyle(prop) : <span class="built_in">window</span>.getComputedStyle(ele, <span class="literal">null</span>)[prop]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="classList-类名操作"><a href="#classList-类名操作" class="headerlink" title="classList 类名操作"></a>classList 类名操作</h1><ol><li>add()：添加样式类。</li><li>item()：返回指定索引的样式类。</li><li>remove()：删除指定样式类。</li><li>toggle()：切换样式类</li><li>contains() 检查是否包含某属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.classList.add(<span class="string">'love'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(app.classList.item(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">app.classList.remove(<span class="string">'lqy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  app.classList.toggle(<span class="string">'love'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( app.classList.contains(<span class="string">'shulu'</span>))</span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><ol><li>appendChild()</li><li>insertBefore()</li><li>removeChild()</li><li>replaceChild()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">body.appendChild(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstEle = body.children[<span class="number">0</span>];</span><br><span class="line">body.insertBefore(div, firstEle);</span><br><span class="line"></span><br><span class="line">body.removeChild(firstEle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">body.replaceChild(text, div);</span><br></pre></td></tr></table></figure><h2 id="节点-元素层级获取"><a href="#节点-元素层级获取" class="headerlink" title="节点/元素层级获取"></a>节点/元素层级获取</h2><ul><li>节点包括了text文本节点等</li><li>元素只是就是HTML元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) </span><br><span class="line"><span class="built_in">console</span>.log(app.parentNode)             <span class="comment">// 父节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.childNodes)             <span class="comment">// 子节点集合</span></span><br><span class="line"><span class="built_in">console</span>.log(app.children)               <span class="comment">// 子元素</span></span><br><span class="line"><span class="built_in">console</span>.log(app.nextSibling)            <span class="comment">// 下一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.previousSibling)        <span class="comment">// 下一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.firstChild)             <span class="comment">// 第一个子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.lastChild)              <span class="comment">// 最后一个子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(app.nextElementSibling)     <span class="comment">// 下一个兄弟元素</span></span><br><span class="line"><span class="built_in">console</span>.log(app.previousElementSibling) <span class="comment">// 上一个兄弟元素</span></span><br></pre></td></tr></table></figure><h1 id="Dom事件"><a href="#Dom事件" class="headerlink" title="Dom事件"></a>Dom事件</h1><p>##基本概念 Dom事件级别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dom <span class="number">0</span>级事件：element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">Dom <span class="number">2</span>级事件：element.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;)</span><br><span class="line">Dom <span class="number">3</span>级事件：element.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;) 鼠标事件 键盘事件</span><br></pre></td></tr></table></figure><h2 id="Dom事件模型"><a href="#Dom事件模型" class="headerlink" title="Dom事件模型"></a>Dom事件模型</h2><ul><li>事件捕获 由上到下</li><li>事件冒泡 由下到上</li></ul><h2 id="Dom事件流"><a href="#Dom事件流" class="headerlink" title="Dom事件流"></a>Dom事件流</h2><ol><li>捕获阶段 由上到下</li><li>目标阶段</li><li>冒泡阶段 由下到上</li></ol><h2 id="描述Dom事件捕获的具体流程"><a href="#描述Dom事件捕获的具体流程" class="headerlink" title="描述Dom事件捕获的具体流程"></a>描述Dom事件捕获的具体流程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span></span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    html   (用js获取html标签：<span class="built_in">document</span>.documentElement)</span><br><span class="line">      body</span><br><span class="line">        ...</span><br><span class="line">          目标元素</span><br></pre></td></tr></table></figure><h2 id="捕获阶段触发事件-addEventListener的第三个参数为true即可"><a href="#捕获阶段触发事件-addEventListener的第三个参数为true即可" class="headerlink" title="捕获阶段触发事件 addEventListener的第三个参数为true即可"></a>捕获阶段触发事件 addEventListener的第三个参数为true即可</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">span.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'以上事件为捕获阶段触发的'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="冒泡阶段触发事件"><a href="#冒泡阶段触发事件" class="headerlink" title="冒泡阶段触发事件"></a>冒泡阶段触发事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">span.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'以下事件为冒泡阶段触发的'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'span'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault() 阻止默认事件</span><br><span class="line">event.stopPropagation() 阻止事件冒泡</span><br><span class="line">event.stopImmediatePropagation() 阻止事件冒泡并且阻止相同事件的其他侦听器被调用。</span><br><span class="line">event.currentTarget 事件的当前目标。它总是指向事件绑定的元素。通常为父元素。代理事件的元素。</span><br><span class="line">event.target 触发事件的对象 (某个DOM元素) 的引用。通常为子元素。 常见如 event.target.nodeName.toLowerCase() == <span class="string">'li'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span><br><span class="line">p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span><br><span class="line">    alert(<span class="string">"我是p元素上被绑定的第一个监听函数"</span>);</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span><br><span class="line">  alert(<span class="string">"我是p元素上被绑定的第二个监听函数"</span>);</span><br><span class="line"></span><br><span class="line">  event.stopImmediatePropagation();</span><br><span class="line">  </span><br><span class="line"><span class="comment">//执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">p.addEventListener(<span class="string">"click"</span>,(event) =&gt; &#123;</span><br><span class="line">  alert(<span class="string">"我是p元素上被绑定的第三个监听函数"</span>);</span><br><span class="line">  <span class="comment">// 该监听函数排在上个函数后面，该函数不会被执行</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><ul><li>创建一个自定义事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myevent =  <span class="keyword">new</span> Event(<span class="string">'custom'</span>)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">btn.addEventListener(<span class="string">'custom'</span>, () =&gt; &#123;</span><br><span class="line">  alert(<span class="string">'custom事件触发了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件 自定义触发条件</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  btn.dispatchEvent(myevent)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/DOM/js-%E7%BB%84%E6%88%90-DOM-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-ECMAScript</title>
      <link>https://shulu520.com/ECMAScript/js-%E7%BB%84%E6%88%90-ECMAScript-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/ECMAScript/js-%E7%BB%84%E6%88%90-ECMAScript-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Fri, 02 Aug 2019 04:27:13 GMT</pubDate>
      <description>
      
        jsECMAScript基础语法
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;珍惜自己——何必为昨天的泪，打湿今天的阳光。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h1><ol><li>圆括号 最高      </li></ol><ul><li>()</li></ul><ol start="2"><li>成员访问 </li></ol><ul><li>. 和[]     </li></ul><ol start="3"><li>后置递增和递减    </li></ol><ul><li>a++ 和 a–</li></ul><ol start="4"><li>逻辑非、一元正号和负号、前置递增和递减 </li></ol><ul><li>!a +a -a  ++a –a 以及typeof</li></ul><ol start="5"><li>幂运算          </li></ol><ul><li>2**3</li></ul><ol start="6"><li>乘法    除法 取模    </li></ol><ul><li>a*3  a/3 a%3</li></ul><ol start="7"><li>加减法           </li></ol><ul><li>a+3  a-3</li></ul><ol start="8"><li>关系运算符     </li></ol><ul><li>大于小于 大于等于 小于等于 以及instanceof</li></ul><ol start="9"><li>相等运算符    </li></ol><ul><li>==   !=    ===    !==</li></ul><ol start="10"><li>逻辑运算符     </li></ol><ul><li>先逻辑与&amp;&amp;   后逻辑非||</li></ul><ol start="11"><li>条件运算符 (三目)</li></ol><ul><li>… ? … : …</li></ul><ol start="12"><li>赋值运算符          </li></ol><ul><li>=  +=  -= *=  /= %= </li></ul><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><ul><li>该语句在比较值时使用的是全等操作符, 因此不会发生类型转换</li></ul><p>#布尔类型的隐式转换</p><ul><li>流程控制语句会把后面的值隐式转换成布尔类型</li><li>转换为true   非空字符串  非0数字  true 任何对象</li><li>转换成false  空字符串  0  false  null  undefined</li></ul><h1 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h1><ul><li>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号） </li><li>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(sum)</span><br></pre></td></tr></table></figure><h1 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h1><h2 id="过去调试js的方式"><a href="#过去调试js的方式" class="headerlink" title="过去调试js的方式"></a>过去调试js的方式</h2><ul><li>alert()<ul><li>console.log()</li></ul></li></ul><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><blockquote><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p></blockquote><h2 id="调试步骤"><a href="#调试步骤" class="headerlink" title="调试步骤"></a>调试步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器中按F12--&gt;sources--&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br></pre></td></tr></table></figure><h2 id="调试中的相关操作"><a href="#调试中的相关操作" class="headerlink" title="调试中的相关操作"></a>调试中的相关操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。点击右上角的+号即可添加要监视的变量。</span><br><span class="line"></span><br><span class="line">F10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br><span class="line"></span><br><span class="line">F11：程序单步执行，还会进入函数一步步执行</span><br><span class="line"></span><br><span class="line">F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h2><p><strong>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</strong></p><ol><li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li></ol><p>#词法作用域</p><ul><li>变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</li></ul><h1 id="js预解析"><a href="#js预解析" class="headerlink" title="js预解析"></a>js预解析</h1><blockquote><p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p></blockquote><h2 id="预解析过程："><a href="#预解析过程：" class="headerlink" title="预解析过程："></a>预解析过程：</h2><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，再提升function</li></ol><h1 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h1><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote><ol><li>构造函数用于创建一类对象，首字母要大写。</li><li>构造函数要和new一起使用才有意义。</li></ol><ul><li>new在执行时会做四件事情</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>会在内存中创建一个新的空对象</span><br><span class="line"><span class="keyword">new</span> 会让<span class="keyword">this</span>指向这个新的对象</span><br><span class="line">执行构造函数  目的：给这个新对象加属性和方法</span><br><span class="line"><span class="keyword">new</span>会返回这个新对象</span><br></pre></td></tr></table></figure><h1 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h1><ul><li>Number、String、Boolean、Undefined、Null</li></ul><h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><ul><li>数值范围</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最小值：<span class="built_in">Number</span>.MIN_VALUE，这个值为： <span class="number">5e-324</span></span><br><span class="line">最大值：<span class="built_in">Number</span>.MAX_VALUE，这个值为： <span class="number">1.7976931348623157e+308</span></span><br><span class="line">无穷大：<span class="literal">Infinity</span></span><br><span class="line">无穷小：-<span class="literal">Infinity</span></span><br></pre></td></tr></table></figure><ul><li>数值判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="literal">NaN</span>：not a number</span><br><span class="line">- <span class="literal">NaN</span> 与任何值都不相等，包括他本身</span><br><span class="line">- <span class="built_in">isNaN</span>: is not a number</span><br></pre></td></tr></table></figure><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ul><li>字符串长度length属性用来获取字符串的长度</li></ul><h3 id="str面试题"><a href="#str面试题" class="headerlink" title="str面试题"></a>str面试题</h3><ul><li>判断一个字符串中出现次数最多的字符，统计这个次数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abachgabdjsabas'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> item = [str[i]]</span><br><span class="line">  obj[item] ? obj[item]++ : obj[item] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = obj[<span class="number">0</span>], char = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; obj[key]) &#123;</span><br><span class="line">    max = obj[key]</span><br><span class="line">    char = key</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'char :'</span>, char);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'max :'</span>, max);</span><br></pre></td></tr></table></figure><h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><ul><li>Boolean字面量：true和false，区分大小写</li><li>计算机内部存储：true为1，false为0</li></ul><h2 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h2><ol><li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</li><li>null表示一个空，变量的值如果想为null，必须手动设置</li></ol><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ul><li>在源代码中一个固定值的表示法。</li></ul><h1 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h1><ul><li>Object</li></ul><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><ul><li><p>如何使用谷歌浏览器，快速的查看数据类型？</p></li><li><p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p></li></ul><h2 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h2><ul><li>toString()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());</span><br></pre></td></tr></table></figure><ul><li>String()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>()函数存在的意义：有些值没有toString()，这个时候可以使用<span class="built_in">String</span>()。比如：<span class="literal">undefined</span>和<span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>拼接字符串方式</li><li>num  +  “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</li></ul><h2 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h2><ul><li>Number()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回<span class="literal">NaN</span></span><br></pre></td></tr></table></figure><ul><li>parseInt()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12.3abc"</span>);  <span class="comment">// 返回12，如果第一个字符是数字会解析直到遇到非数字结束</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"abc123"</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就直接返回NaN</span></span><br></pre></td></tr></table></figure><ul><li>parseFloat()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>()把字符串转换成浮点数</span><br><span class="line"><span class="built_in">parseFloat</span>()和<span class="built_in">parseInt</span>非常相似，不同之处在与</span><br><span class="line"><span class="built_in">parseFloat</span>会解析第一个. 遇到第二个.或者非数字结束</span><br><span class="line">如果解析的内容里只有整数，解析成整数</span><br></pre></td></tr></table></figure><ul><li>+，-0等运算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'500'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);<span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str);<span class="comment">// 取负</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>); <span class="comment">// number: 500</span></span><br></pre></td></tr></table></figure><h2 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h2><ul><li>Boolean()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="string">''</span>(空字符串) <span class="literal">null</span> <span class="literal">undefined</span> <span class="literal">NaN</span> 会转换成<span class="literal">false</span>  </span><br><span class="line">其它都会转换成<span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h1><ul><li>创建 <code>Date</code> 实例用来处理日期和时间。</li><li>Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());<span class="comment">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line">或now.getTime()</span><br></pre></td></tr></table></figure><h2 id="Date构造函数的参数"><a href="#Date构造函数的参数" class="headerlink" title="Date构造函数的参数"></a>Date构造函数的参数</h2><ol><li>毫秒数 1498099000356        new Date(1498099000356)</li><li>日期格式字符串  ‘2015-5-1’     new Date(‘2015-5-1’)</li><li>年、月、日    new Date(2015, 4, 1)   // 月份从0开始</li></ol><h2 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toString()<span class="comment">// 转换成字符串</span></span><br><span class="line">valueOf()<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line">toDateString()</span><br><span class="line">toTimeString()</span><br><span class="line">toLocaleDateString()</span><br><span class="line">toLocaleTimeString()</span><br></pre></td></tr></table></figure><h2 id="获取日期指定部分"><a href="#获取日期指定部分" class="headerlink" title="获取日期指定部分"></a>获取日期指定部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getTime()    <span class="comment">// 返回毫秒数和valueOf()结果一样，</span></span><br><span class="line">  <span class="comment">// valueOf()内部调用的getTime()</span></span><br><span class="line">getMilliseconds() </span><br><span class="line">getSeconds()  <span class="comment">// 返回0-59</span></span><br><span class="line">getMinutes()  <span class="comment">// 返回0-59</span></span><br><span class="line">getHours()    <span class="comment">// 返回0-23</span></span><br><span class="line">getDay()      <span class="comment">// 返回星期几 0周日   6周6</span></span><br><span class="line">getDate()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">getMonth()    <span class="comment">// 返回月份，***从0开始***</span></span><br><span class="line">getFullYear() <span class="comment">//返回4位的年份  如 2016</span></span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTowNum</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  num = num &lt; <span class="number">10</span> ? <span class="string">'0'</span> + num : num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果date不是日期对象，返回</span></span><br><span class="line">  <span class="keyword">if</span> (!d <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> year = d.getFullYear(),</span><br><span class="line">    month = d.getMonth() + <span class="number">1</span>, </span><br><span class="line">    date = d.getDate(), </span><br><span class="line">    hour = d.getHours(), </span><br><span class="line">    minute = d.getMinutes(), </span><br><span class="line">    second = d.getSeconds();</span><br><span class="line">  </span><br><span class="line">  month = getTowNum(month)</span><br><span class="line">  date = getTowNum(date)</span><br><span class="line">  hour = getTowNum(hour)</span><br><span class="line">  minute = getTowNum(minute)</span><br><span class="line">  second = getTowNum(second)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'formatDate(nowDate) :'</span>, formatDate(nowDate));</span><br></pre></td></tr></table></figure><h3 id="计算时间差，返回相差的天-时-分-秒"><a href="#计算时间差，返回相差的天-时-分-秒" class="headerlink" title="计算时间差，返回相差的天/时/分/秒"></a>计算时间差，返回相差的天/时/分/秒</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInterval</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// interval间距</span></span><br><span class="line">  <span class="keyword">let</span> day, hour, minute, second, interval;</span><br><span class="line">  interval = end - start;</span><br><span class="line">  interval /= <span class="number">1000</span>; <span class="comment">// 得到秒数</span></span><br><span class="line">  day = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  hour = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">  minute = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">  second = <span class="built_in">Math</span>.round(interval % <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day: day,</span><br><span class="line">    hour: hour,</span><br><span class="line">    minute: minute,</span><br><span class="line">    second: second</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> futureDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'getInterval(nowDate, futureDate) :'</span>, getInterval(nowDate, futureDate));</span><br></pre></td></tr></table></figure><h1 id="数组与字符串的转换"><a href="#数组与字符串的转换" class="headerlink" title="数组与字符串的转换"></a>数组与字符串的转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'shululqy'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr.toString() :'</span>, arr.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'arr.join() :'</span>, arr.join());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str.split('</span>,<span class="string">') :'</span>, str.split(<span class="string">''</span>).join(<span class="string">''</span>));</span><br></pre></td></tr></table></figure><h2 id="面试-反转数组"><a href="#面试-反转数组" class="headerlink" title="面试-反转数组"></a>面试-反转数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[<span class="keyword">this</span>.length - i - <span class="number">1</span>];</span><br><span class="line">    arr[arr.length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myReverse(array));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.reverse());</span><br></pre></td></tr></table></figure><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到数组中每一个a出现的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span> (<span class="params">array, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">//if (n === array[i]) &#123;</span></span><br><span class="line">    <span class="comment">//  arr.push(i)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    n === array[i] &amp;&amp; arr.push(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> position = arr.map( <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>).toString()</span><br><span class="line">  <span class="keyword">return</span> position</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( getPosition(array, <span class="string">'a'</span>)); <span class="comment">//2,4,6</span></span><br></pre></td></tr></table></figure><h2 id="面试-编写方法-数组去重"><a href="#面试-编写方法-数组去重" class="headerlink" title="面试-编写方法-数组去重"></a>面试-编写方法-数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uni</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.indexOf(array[i]) === <span class="number">-1</span>) &#123; <span class="comment">//indexOf === -1 就是没找到</span></span><br><span class="line">      arr.push(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'uni(array) :'</span>, uni(array));</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/ECMAScript/js-%E7%BB%84%E6%88%90-ECMAScript-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://shulu520.com/npm/npm/</link>
      <guid>https://shulu520.com/npm/npm/</guid>
      <pubDate>Wed, 31 Jul 2019 15:09:04 GMT</pubDate>
      <description>
      
        npm nrm 更爽的使用npm install
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;随意切换 npm 镜像源。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="nrm（node-registry-manager）"><a href="#nrm（node-registry-manager）" class="headerlink" title="nrm（node registry manager）"></a>nrm（node registry manager）</h1><ul><li>nrm 可以解决 npm 镜像访问慢的问题，还可以对各个 npm 的镜像进行速度测试，随意切换 npm 镜像源。</li></ul><h2 id="安装-nrm"><a href="#安装-nrm" class="headerlink" title="安装 nrm"></a>安装 nrm</h2><ul><li>npm install nrm -g</li><li>nrm 是 npm 的一个模块，我们可以直接使用 npm 进行安装。</li></ul><h2 id="对镜像源进行测速"><a href="#对镜像源进行测速" class="headerlink" title="对镜像源进行测速"></a>对镜像源进行测速</h2><ul><li>nrm test</li><li>我们可以使用 nrm 对 npm 的源进行测速，然后使用当前网络下最快的源。</li><li>*代表当前源，从我目前的网速来看，这几个源的状态都还不错，我还是使用 npm 源，因为不会有一些奇怪的 bug 产生。根据你的网速自行选择，如果 npm 源速度不错的话，还是建议使用 npm 源，其次才是 cnpm 和 taobao。</li></ul><h2 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h2><ul><li>nrm use taobao</li><li>我们在切换源之前要知道具体的源对应的链接，这个时候如果去网上找的话，那就太麻烦了，nrm 也就没什么作用了。</li><li>我们切换源的时候，直接使用简称就可以.这个时候再通过 nrm ls 查看源的列表，就会发现我们切换成功了。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/npm/npm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>H5-newApi</title>
      <link>https://shulu520.com/H5/H5-newApi/</link>
      <guid>https://shulu520.com/H5/H5-newApi/</guid>
      <pubDate>Wed, 31 Jul 2019 08:43:44 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width:100%;height:1px;background-color:pink;opacity:.7&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="online网络状态"><a href="#online网络状态" class="headerlink" title="online网络状态"></a>online网络状态</h2><ul><li>我们可以通过window.navigator.onLine来检测，用户当前的网络状况，返回一个布尔值， 但是不同浏览器会存在差异.</li><li>所以HTML5 给我们提供了2个事件: online和offline </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 当网络连接到时候  弹出 p 显示网络连接 然后消失</span><br><span class="line">window.addEventListener(&apos;online&apos;, function() &#123;</span><br><span class="line">  $(&quot;.tips&quot;).text(&quot;网络已连接&quot;).fadeIn(500).delay(1000).fadeOut();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">2. 当网络断开到时候  弹出 p 显示网络已断开 然后消失</span><br><span class="line">window.addEventListener(&apos;offline&apos;, function() &#123;</span><br><span class="line">  $(&quot;.tips&quot;).text(&quot;哎呀，网络断开了&quot;).fadeIn(500).delay(1000).fadeOut();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="dom-requestFullScreen-全屏显示"><a href="#dom-requestFullScreen-全屏显示" class="headerlink" title="dom.requestFullScreen()全屏显示"></a>dom.requestFullScreen()全屏显示</h2><ul><li>全屏显示可以是任意元素</li><li>H5 API 存在兼容性问题  ie9 +  </li><li>即使高版本浏览器有兼容性问题  </li><li>不同浏览器需要添加不同的前缀 webkit  moz  o  ms </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/* 注意兼容性问题  全屏显示伪类选择器 */</span><br><span class="line">div:-webkit-full-screen &#123;   </span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;img src=&quot;pic1.png&quot; height=&quot;300&quot;  alt=&quot;&quot;&gt;</span><br><span class="line">&lt;button id=&quot;full&quot;&gt;全屏显示&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;cancelFull&quot;&gt;取消全屏&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;isFull&quot;&gt;是否全屏&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">let div = document.querySelector(&quot;div&quot;);</span><br><span class="line">// 1 单击全屏显示</span><br><span class="line">document.querySelector(&quot;#full&quot;).onclick = function() &#123;</span><br><span class="line">// 能力检测  做一个兼容性的解决方法</span><br><span class="line">  if(div.requestFullScreen) &#123;  // 正常浏览器 </span><br><span class="line">    div.requestFullScreen();</span><br><span class="line"></span><br><span class="line">  &#125; else if (div.webkitRequestFullScreen) &#123;  // webkit 内核</span><br><span class="line">    div.webkitRequestFullScreen();</span><br><span class="line"></span><br><span class="line">  &#125; else if (div.mozRequestFullScreen) &#123;  // moz</span><br><span class="line">    div.mozRequestFullScreen();</span><br><span class="line"></span><br><span class="line">  &#125; else if (div.msRequestFullscreen) &#123;  </span><br><span class="line">    // ms 微软  这里面有个坑 别掉进去了</span><br><span class="line">    div.msRequestFullscreen(); </span><br><span class="line">    // ms 里面这样写msRequestFullscreen()  s是小写的  </span><br><span class="line"></span><br><span class="line">  &#125; else &#123;  // 欧朋</span><br><span class="line">    div.oRequestFullScreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2 取消全屏  跟元素没有关系  跟 document</span><br><span class="line">document.querySelector(&quot;#cancelFull&quot;).onclick = function() &#123;</span><br><span class="line">  document.webkitCancelFullScreen();  // document 退出全屏</span><br><span class="line">&#125;</span><br><span class="line">// 3 是否全屏显示</span><br><span class="line">document.querySelector(&quot;#isFull&quot;).onclick = function() &#123;</span><br><span class="line">  alert(document.webkitIsFullScreen); // webkit是否存在 全屏状态</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="input-type-file文件读取并显示"><a href="#input-type-file文件读取并显示" class="headerlink" title="input type=file文件读取并显示"></a>input type=file文件读取并显示</h2><ul><li>demo-可以把上传的文件，文本内容显示到页面？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; multiple &gt; //multiple可选择多个文件</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">1. 上传我们的文件 </span><br><span class="line">let file = document.querySelector(&quot;input&quot;);</span><br><span class="line">let div = document.querySelector(&quot;div&quot;);</span><br><span class="line"></span><br><span class="line">当input发生改变的时候 下拉菜单 select 也是这个事件 onchange</span><br><span class="line">file.onchange = function() &#123; </span><br><span class="line"></span><br><span class="line">  console.log(this.files);  // 上传文件组成的集合 </span><br><span class="line"></span><br><span class="line">  2. 选择我们要的文件， 进行读取文件里面的内容</span><br><span class="line">  let reader = new FileReader();  // 初始化一个文件读取对象reader </span><br><span class="line"></span><br><span class="line">    reader.readAsText(this.files[0]); // 读取this.files[0] 第一个文件对象</span><br><span class="line"></span><br><span class="line">    3. 读取完毕把读取的内容显示到页面中</span><br><span class="line">    reader.onload = function() &#123;</span><br><span class="line">      div.innerHTML = this.result; //result存储着读取后的内容，这里为文本</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上传完毕图片显示缩略图(自己写img的宽高)到页面上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; multiple &gt; </span><br><span class="line">&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;100&quot;&gt;</span><br><span class="line"></span><br><span class="line">let file = document.querySelector(&quot;input&quot;);</span><br><span class="line">let img = document.querySelector(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">file.onchange = function() &#123; </span><br><span class="line"></span><br><span class="line">  let reader = new FileReader();  </span><br><span class="line">  reader.readAsDataURL(this.files[0]); </span><br><span class="line"></span><br><span class="line">  reader.onload = function() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(this.result); // result为 data: URL 即base64格式的字符串</span><br><span class="line">    </span><br><span class="line">    img.src = this.result; // 把读取的内容赋值给图片 src  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="files对象"><a href="#files对象" class="headerlink" title="files对象"></a>files对象</h3><ul><li>由于HTML5中我们可以通过为表单元素添加multiple属性，因此我们通过input上传文件后得到的是一个files对象（伪数组形式）。</li></ul><h3 id="FileReader对象"><a href="#FileReader对象" class="headerlink" title="FileReader对象"></a>FileReader对象</h3><ul><li><p>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容.</p></li><li><p>let reader = new FileReader; 可以实例化一个对象</p></li><li><p>实例方法</p></li><li>FileReader.readAsDataURL() 读取结果为data: URL格式的字符串</li><li><p>FileReader.readAsText() 读取结果为文本字符串</p></li><li><p>事件监听</p><ul><li>onload 当读取完成时触发</li></ul></li><li><p>属性</p><ul><li>result 文件读取结果内容</li></ul></li></ul><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><ul><li>谷歌地理位置定位navigator.geolocation，咱们不用</li></ul><h3 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h3><ul><li><a href="http://lbsyun.baidu.com/" target="_blank" rel="noopener">百度地图api</a></li><li>有地理名片等等好多的功能</li></ul><h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><ul><li>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</li><li>draggable 属性：就是标签元素要设置draggable=true，否则不会有效果 </li><li>注意：链接和图片默认是可拖动的，不需要 draggable 属性。</li><li><a href="https://blog.csdn.net/baidu_25343343/article/details/53215193" target="_blank" rel="noopener">csdn</a></li></ul><h3 id="拖拽和释放"><a href="#拖拽和释放" class="headerlink" title="拖拽和释放"></a>拖拽和释放</h3><ul><li>拖拽：drag</li><li>释放：drop</li><li>拖拽指的是鼠标点击源对象后一直移动对象不松手，一但松手即释放了</li></ul><h3 id="拖拽API的相关事件"><a href="#拖拽API的相关事件" class="headerlink" title="拖拽API的相关事件"></a>拖拽API的相关事件</h3><ul><li>拖拽API总共就是7个函数！！</li></ul><p><strong>被拖动的源对象可以触发的事件：</strong></p><ol><li>ondragstart：源对象开始被拖动</li><li>ondrag：源对象被拖动过程中(鼠标可能在移动也可能未移动)</li><li>ondragend：源对象被拖动结束</li></ol><p><strong>拖动源对象可以进入到上方的目标对象可以触发的事件：</strong></p><ol><li>ondragenter：目标对象被源对象拖动着进入</li><li>ondragover：目标对象被源对象拖动着悬停在上方</li><li>ondragleave：源对象拖动着离开了目标对象</li><li>ondrop：源对象拖动着在目标对象上方释放/松手</li></ol><h3 id="在拖动的源对象事件和目标对象事件间传递数据"><a href="#在拖动的源对象事件和目标对象事件间传递数据" class="headerlink" title="在拖动的源对象事件和目标对象事件间传递数据"></a>在拖动的源对象事件和目标对象事件间传递数据</h3><ul><li>HTML5为所有的拖动相关事件提供了一个新的属性：</li><li>e.dataTransfer { } 数据传递对象</li><li><p>用于在源对象和目标对象的事件间传递数据</p></li><li><p>源对象上的事件处理中保存数据：</p></li><li><p>e.dataTransfer.setData( k, v );  k-v必须都是string类型</p></li><li><p>目标对象上的事件处理中读取数据：</p></li><li>let v = e.dataTransfer.getData( k );</li></ul><h3 id="HTML5新增的文件操作对象："><a href="#HTML5新增的文件操作对象：" class="headerlink" title="HTML5新增的文件操作对象："></a>HTML5新增的文件操作对象：</h3><ul><li><p>File： 代表一个文件对象</p></li><li><p>FileList： 代表一个文件列表对象，类数组</p></li><li><p>FileReader：用于从文件中读取数据</p></li><li><p>FileWriter：用于向文件中写出数据</p></li><li><p>相关函数：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div.ondrop = function(e)&#123;</span><br><span class="line"></span><br><span class="line">  let file = e.dataTransfer.files[0]; //找到拖放的文件</span><br><span class="line"></span><br><span class="line">  let reader = new FileReader();   //创建文件读取器</span><br><span class="line"></span><br><span class="line">  reader.readAsURLData(file);    //读取文件内容</span><br><span class="line"></span><br><span class="line">  reader.onload = function()&#123;  //读取完成</span><br><span class="line"></span><br><span class="line">    img.src = reader.result;   //使用读取到的数据</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-从桌面-客户端电脑-拖拽上传头像"><a href="#demo-从桌面-客户端电脑-拖拽上传头像" class="headerlink" title="demo-从桌面(客户端电脑)拖拽上传头像"></a>demo-从桌面(客户端电脑)拖拽上传头像</h3><ul><li>好玩好玩</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">#container &#123;</span><br><span class="line">  border: 1px solid #aaa;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">  min-height: 400px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom</span><br><span class="line">&lt;h3&gt;请拖动您的照片到下方方框区域&lt;/h3&gt;</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//javascript</span><br><span class="line"></span><br><span class="line">//监听document的drop事件——取消其默认行为：在新窗口中打开图片</span><br><span class="line">document.ondragover = function(e)&#123;</span><br><span class="line">  e.preventDefault(); //使得drop事件可以触发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.ondrop = function(e)&#123;</span><br><span class="line">  e.preventDefault(); //阻止在新窗口中打开图片，否则仍然会执行下载操作！！！</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//监听div#container的drop事件，设法读取到释放的图片数据，显示出来</span><br><span class="line">container.ondragover = function(e)&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line">container.ondrop = function(e)&#123;</span><br><span class="line">  console.log(&apos;客户端拖动着一张图片释放了...&apos;)</span><br><span class="line">  //当前的目标对象读取拖放源对象存储的数据</span><br><span class="line">  //console.log(e.dataTransfer); //显示有问题</span><br><span class="line">  //console.log(e.dataTransfer.files.length); //拖进来的图片的数量</span><br><span class="line">  let f0 = e.dataTransfer.files[0];</span><br><span class="line">  //console.log(f0); //文件对象 File</span><br><span class="line"></span><br><span class="line">  //从文件对象中读取数据</span><br><span class="line">  let fr = new FileReader();</span><br><span class="line">  //fr.readAsText(f0); //从文件中读取文本字符串</span><br><span class="line">  fr.readAsDataURL(f0); //从文件中读取URL数据</span><br><span class="line">  fr.onload = function()&#123;</span><br><span class="line">    console.log(&apos;读取文件完成&apos;)</span><br><span class="line">    console.log(fr.result);</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = fr.result; //URL数据</span><br><span class="line">    container.appendChild(img);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-元素单向拖动"><a href="#demo-元素单向拖动" class="headerlink" title="demo-元素单向拖动"></a>demo-元素单向拖动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(2) &#123;</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  height: 25px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  line-height: 25px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">  &lt;p id=&quot;p1&quot; draggable=&quot;true&quot;&gt;拖拽内容1&lt;/p&gt;</span><br><span class="line">  &lt;p id=&quot;p2&quot; draggable=&quot;true&quot;&gt;拖拽内容2&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//javascript</span><br><span class="line">let obj = null; // 用于存放我们拖放对象 源对象</span><br><span class="line">document.ondragstart = function(event) &#123;</span><br><span class="line"></span><br><span class="line">  obj = event.target;  // 把当前对象给 obj 然后追加到 新目标对象里面就阔以了</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let target = document.querySelector(&quot;#div2&quot;);</span><br><span class="line"></span><br><span class="line">target.ondragover = function(e) &#123;</span><br><span class="line">  // 如果想要触发 ondrop 事件 则需要在over 里面 阻止  默认行为</span><br><span class="line">  return false;</span><br><span class="line">  // e.preventDefault()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">target.ondrop = function() &#123;</span><br><span class="line">  // 目标对象. appendChild(源对象)</span><br><span class="line">  this.appendChild(obj);</span><br><span class="line">    // 拖拽的时候 ，不用删除原来的 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-垃圾箱效果"><a href="#demo-垃圾箱效果" class="headerlink" title="demo-垃圾箱效果"></a>demo-垃圾箱效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//style</span><br><span class="line">div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(2) &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  line-height: 200px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  height: 25px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  line-height: 25px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">  &lt;p id=&quot;p1&quot; class=&quot;drag&quot; draggable=&quot;true&quot;&gt;拖拽内容1&lt;/p&gt;</span><br><span class="line">  &lt;p id=&quot;p2&quot; class=&quot;drag&quot; draggable=&quot;true&quot;&gt;拖拽内容2&lt;/p&gt;</span><br><span class="line">  &lt;p id=&quot;p3&quot; class=&quot;drag&quot; draggable=&quot;true&quot;&gt;拖拽内容3&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;垃圾箱&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">let dragList = document.querySelectorAll(&apos;.drag&apos;);//找到全部p元素</span><br><span class="line">for(let i=0; i&lt;dragList.length; i++)&#123; //遍历p元素</span><br><span class="line">  let p = dragList[i];</span><br><span class="line">  p.ondragstart = function(e) &#123;</span><br><span class="line">    e.dataTransfer.setData(&apos;PlaneID&apos;,this.id);//保存数据--该img元素的id</span><br><span class="line">      console.log(&apos;this.id :&apos;, this.id); //元素的id属性值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let target = document.querySelector(&quot;#div2&quot;);</span><br><span class="line"></span><br><span class="line">target.ondragover = function(e) &#123;</span><br><span class="line">  return false;</span><br><span class="line">  // e.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target.ondrop = function(e) &#123;</span><br><span class="line">  //删除被拖动的源对象</span><br><span class="line">  let id = e.dataTransfer.getData(&apos;PlaneID&apos;);//得到数据--id值</span><br><span class="line">  let p = document.getElementById(id); //根据id值找到相关的元素</span><br><span class="line">  p.parentNode.removeChild(p);  //从父元素中删除子节点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-来回拖动元素"><a href="#demo-来回拖动元素" class="headerlink" title="demo-来回拖动元素"></a>demo-来回拖动元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line">section&#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  width: 606px;</span><br><span class="line">  height: 202px;</span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(2) &#123;</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">&#125;</span><br><span class="line">div:nth-child(3)&#123;</span><br><span class="line">  border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  height: 25px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  line-height: 25px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom</span><br><span class="line">&lt;section id=&quot;section&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;p1&quot; draggable=&quot;true&quot;&gt;拖拽内容1&lt;/p&gt;</span><br><span class="line">    &lt;p id=&quot;p2&quot; draggable=&quot;true&quot;&gt;拖拽内容2&lt;/p&gt;</span><br><span class="line">    &lt;p id=&quot;p3&quot; draggable=&quot;true&quot;&gt;拖拽内容3&lt;/p&gt;</span><br><span class="line">    &lt;p id=&quot;p4&quot; draggable=&quot;true&quot;&gt;拖拽内容4&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">let section = document.getElementById(&apos;section&apos;)</span><br><span class="line">section.ondragstart = function(event) &#123;</span><br><span class="line">  // 当我们开始拖拽的时候，就存储数据</span><br><span class="line">  // 记录 当前源对象的id 名字</span><br><span class="line">  event.dataTransfer.setData(&quot;dragId&quot;, event.target.id);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">section.ondragover = function(e) &#123;</span><br><span class="line">  return false;</span><br><span class="line">  // e.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">section.ondrop = function(event) &#123;</span><br><span class="line">  </span><br><span class="line">  // 获取 dataTransfer里面的数据</span><br><span class="line">  var id = event.dataTransfer.getData(&quot;dragId&quot;);</span><br><span class="line">  event.target.appendChild(document.getElementById(id));</span><br><span class="line">  // 因为我们追加的 源对象p  id 只是id名字，需要通过id 获取元素 追加到目标对象里面</span><br><span class="line">  // 所以我们 document.getElementById(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="storage本地存储"><a href="#storage本地存储" class="headerlink" title="storage本地存储"></a>storage本地存储</h2><ul><li>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</li></ul><h3 id="存储特性"><a href="#存储特性" class="headerlink" title="存储特性"></a>存储特性</h3><ol><li><p>设置、读取方便、页面刷新不丢失数据</p></li><li><p>容量较大，sessionStorage约5M、localStorage约20M</p></li><li><p>只能存储字符串，可以将对象JSON.stringify() 编码后存储</p></li></ol><h3 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h3><ul><li><p>setItem(key, value) 设置存储内容</p></li><li><p>getItem(key) 读取存储内容</p></li><li><p>removeItem(key) 删除键值为key的存储内容</p></li><li><p>clear() 清空所有存储内容</p></li></ul><h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><ol><li><p>生命周期为关闭浏览器窗口</p></li><li><p>在同一个窗口(页面)下数据可以共享</p></li></ol><ul><li>即小范围 短周期 </li></ul><h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><ol><li><p>永久生效，除非手动删除 关闭页面也会存在</p></li><li><p>可以多窗口（页面）共享（同一浏览器可以共享）</p></li></ol><ul><li>即大范围 长周期</li></ul><h3 id="其它新的存储方案"><a href="#其它新的存储方案" class="headerlink" title="其它新的存储方案"></a>其它新的存储方案</h3><ul><li>WebSQL</li><li>IndexDB</li></ul><h3 id="demo-window-sessionStorage"><a href="#demo-window-sessionStorage" class="headerlink" title="demo-window.sessionStorage"></a>demo-window.sessionStorage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;username&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;button id=&quot;setData&quot;&gt;设置数据&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;getData&quot;&gt;获取数据&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;delData&quot;&gt;删除数据&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;getAge&quot;&gt;getAge&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var username = document.querySelector(&quot;#username&quot;);</span><br><span class="line">// 点击按钮存取数据 </span><br><span class="line">window.sessionStorage.setItem(&quot;age&quot;, 18);</span><br><span class="line">window.sessionStorage.setItem(&quot;address&quot;, &quot;北京&quot;);</span><br><span class="line"></span><br><span class="line">getAge.onclick = function () &#123;</span><br><span class="line">  alert(window.sessionStorage.getItem(&quot;address&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#setData&quot;).onclick = function() &#123;</span><br><span class="line">// 点击之后得到 username 里面值</span><br><span class="line">  var val = username.value;  </span><br><span class="line">  // 存储数据</span><br><span class="line">  // window.sessionStorage.setItem(key, value) 设置存储内容</span><br><span class="line">  window.sessionStorage.setItem(&quot;username&quot;, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  // 点击按钮获得数据 </span><br><span class="line">document.querySelector(&quot;#getData&quot;).onclick = function() &#123;</span><br><span class="line"></span><br><span class="line">  // 获得数据</span><br><span class="line">  // window.sessionStorage.getItem(key) 读取存储内容</span><br><span class="line">  alert(window.sessionStorage.getItem(&quot;username&quot;)) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#delData&quot;).onclick = function() &#123;</span><br><span class="line"></span><br><span class="line">  // window.sessionStorage.removeItem(key) 删除键值为key的存储内容</span><br><span class="line">  // window.sessionStorage.removeItem(&quot;username&quot;);</span><br><span class="line"></span><br><span class="line">  // 删除所有的 数据 </span><br><span class="line">  window.sessionStorage.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-window-localStorage"><a href="#demo-window-localStorage" class="headerlink" title="demo-window.localStorage"></a>demo-window.localStorage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;username&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">&lt;button id=&quot;setData&quot;&gt;设置数据-userName&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;getData&quot;&gt;获取数据-userName&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;delData&quot;&gt;删除数据-userName&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">var username = document.querySelector(&quot;#username&quot;);</span><br><span class="line"></span><br><span class="line">  window.localStorage.setItem(&quot;age&quot;, 18);</span><br><span class="line">  window.localStorage.setItem(&quot;address&quot;, &quot;北京&quot;);</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#setData&quot;).onclick = function() &#123;</span><br><span class="line">    var val = username.value;  </span><br><span class="line">    window.localStorage.setItem(&quot;username&quot;, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#getData&quot;).onclick = function() &#123;</span><br><span class="line">  alert(window.localStorage.getItem(&quot;username&quot;)) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#delData&quot;).onclick = function() &#123;</span><br><span class="line">  window.localStorage.removeItem(&quot;username&quot;);</span><br><span class="line">  // 删除所有的 数据 </span><br><span class="line">  // window.localStorage.clear();  这个清楚要慎用 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="manifest-appcache应用缓存"><a href="#manifest-appcache应用缓存" class="headerlink" title="manifest-appcache应用缓存"></a>manifest-appcache应用缓存</h2><ul><li>HTML5中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个cache manifest文件。</li></ul><h3 id="缓存优势"><a href="#缓存优势" class="headerlink" title="缓存优势"></a>缓存优势</h3><ol><li><p>可配置需要缓存的资源</p></li><li><p>网络无连接应用仍可用</p></li><li><p>本地读取缓存资源，提升访问速度，增强用户体验</p></li><li><p>减少请求，缓解服务器负担</p></li></ol><h3 id="缓存清单"><a href="#缓存清单" class="headerlink" title="缓存清单"></a>缓存清单</h3><ul><li><p>一个普通文本文件，其中列出了浏览器应缓存以供离线访问的资源，推荐使用.appcache为后缀名</p></li><li><p>例如我们创建了一个名为demo.appcache的文件，然后在需要应用缓存在页面的根元素(html)添加属性manifest=”demo.appcache”，路径要保证正确。</p></li></ul><h3 id="manifest文件格式"><a href="#manifest文件格式" class="headerlink" title="manifest文件格式"></a>manifest文件格式</h3><ol><li><p>顶行写CACHE MANIFEST</p></li><li><p>CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等</p></li><li><p>NETWORK: 换行 指定需要在线访问的资源，可使用通配符</p></li><li><p>FALLBACK: 换行 当被缓存的文件找不到时的备用资源</p></li></ol><h3 id="缓存其它知识"><a href="#缓存其它知识" class="headerlink" title="缓存其它知识"></a>缓存其它知识</h3><ol><li><p>CACHE: 可以省略，这种情况下将需要缓存的资源写在CACHE MANIFEST</p></li><li><p>可以指定多个CACHE: NETWORK: FALLBACK:，无顺序限制</p></li><li><p>＃表示注释，只有当demo.appcache文件内容发生改变时或者手动清除缓存后，才会重新缓存。</p></li><li><p>chrome 可以通过chrome://appcache-internals/工具和离线（offline）模式来调试管理应用缓存</p></li></ol><h3 id="demo-图片缓存"><a href="#demo-图片缓存" class="headerlink" title="demo-图片缓存"></a>demo-图片缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot; manifest=&quot;study.appcache&quot;&gt;</span><br><span class="line"> &lt;!-- study.appcache 引入 缓存清单 --&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;缓存&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;images/img1.jpg&quot; &gt;</span><br><span class="line">&lt;img src=&quot;images/img2.jpg&quot; &gt;</span><br><span class="line">&lt;img src=&quot;images/img3.jpg&quot; &gt;</span><br><span class="line">&lt;img src=&quot;images/img4.jpg&quot; &gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>缓存清单study.appcache文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"># 上面必须是第一行 </span><br><span class="line">CACHE:</span><br><span class="line"></span><br><span class="line">#此部分写需要缓存的资源 （#是注释的意思）</span><br><span class="line"></span><br><span class="line">./images/img1.jpg</span><br><span class="line">./images/img2.jpg</span><br><span class="line">./images/img3.jpg</span><br><span class="line">./images/img4.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NETWORK:</span><br><span class="line"></span><br><span class="line">#此部分要写需要有网络才可访问的资源，无网络不访问</span><br><span class="line"></span><br><span class="line">./images/img1.jpg</span><br><span class="line">./images/img2.jpg</span><br><span class="line"></span><br><span class="line">#*</span><br><span class="line"></span><br><span class="line">FALLBACK:</span><br><span class="line"></span><br><span class="line">#当访问不到某个资源的情况下，自动由另一个资源替换</span><br><span class="line"></span><br><span class="line">./images/img4.jpg  ./images/img5.jpg</span><br></pre></td></tr></table></figure><h2 id="audio-video-多媒体"><a href="#audio-video-多媒体" class="headerlink" title="audio/video-多媒体"></a>audio/video-多媒体</h2><ul><li><a href="https://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp" target="_blank" rel="noopener">w3c</a></li></ul><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li>load() 重新加载音频/视频元素</li><li>play() 开始播放音频/视频</li><li>pause() 暂停当前播放的音频/视频</li></ul><h3 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h3><ul><li>autoplay    设置或返回是否在加载完成后随即播放音频/视频</li><li>controls    设置或返回音频/视频是否显示控件（比如播放/暂停等）</li><li>currentSrc    返回当前音频/视频的 URL</li><li>currentTime    设置或返回音频/视频中的当前播放位置（以秒计）</li><li>duration    返回当前音频/视频的长度（以秒计）</li><li>ended    返回音频/视频的播放是否已结束</li><li>loop    设置或返回音频/视频是否应在结束时重新播放</li><li>paused    设置或返回音频/视频是否暂停</li><li>等等</li></ul><h3 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h3><ul><li>oncanplay 当浏览器可以播放音频/视频时  </li><li>ontimeupdate 当目前的播放位置已更改时</li><li>ended    当目前的播放列表已结束时</li><li>error    当在音频/视频加载期间发生错误时</li><li>progress    当浏览器正在下载音频/视频时</li><li><p>等等</p></li><li><p><a href="https://www.awaimai.com/2053.html" target="_blank" rel="noopener">大神博客video.js</a></p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/H5/H5-newApi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>H5-Document-header</title>
      <link>https://shulu520.com/H5/H5-Document-header/</link>
      <guid>https://shulu520.com/H5/H5-Document-header/</guid>
      <pubDate>Wed, 31 Jul 2019 08:43:12 GMT</pubDate>
      <description>
      
        HTML5文档头部分重点知识
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="HTML5头部分"><a href="#HTML5头部分" class="headerlink" title="HTML5头部分"></a>HTML5头部分</h2><ul><li>文档元数据</li><li>元数据（Metadata）含有页面的相关信息，包括样式、脚本及数据，能帮助一些软件（例如 搜索引擎、浏览器 等等）更好地运用和渲染页面。对于样式和脚本的元数据，可以直接在网页里定义，也可以链接到包含相关信息的外部文件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;/&gt;</span><br><span class="line">  &lt;title&gt;shulu&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;/&gt;</span><br><span class="line">  &lt;meta name=&quot;description&quot; content=&quot;网站描述内容&quot;/&gt;</span><br><span class="line">  &lt;meta name=&quot;keywords&quot; content=&quot;网站关键字&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h3 id="文档版本类型声明"><a href="#文档版本类型声明" class="headerlink" title="文档版本类型声明"></a>文档版本类型声明</h3><ul><li>HTML5的文档类型，参照淘宝网</li><li><code>&lt;!DOCTYPE html&gt;</code></li></ul><h3 id="规定网页内容使用的语言"><a href="#规定网页内容使用的语言" class="headerlink" title="规定网页内容使用的语言"></a>规定网页内容使用的语言</h3><ul><li>简体中文，参照淘宝网</li><li><code>&lt;html lang=&quot;zh-CN&quot;&gt;</code></li></ul><h3 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h3><ul><li>万国语，参照淘宝网</li><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li></ul><h3 id="强制IE浏览器渲染方式"><a href="#强制IE浏览器渲染方式" class="headerlink" title="强制IE浏览器渲染方式"></a>强制IE浏览器渲染方式</h3><ul><li>对于IE浏览器，如果用户安装了GCF，则使用GCF来渲染页面，如果未安装GCF则使用最高版本的IE内核来进行渲染。</li><li>Google Chrome Frame(谷歌内嵌浏览器框架GCF) 参照淘宝网</li><li><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;/&gt;</code></li></ul><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><ul><li>网站的标题</li></ul><h3 id="网站描述内容"><a href="#网站描述内容" class="headerlink" title="网站描述内容"></a>网站描述内容</h3><p><code>&lt;meta name=&quot;description&quot; content=&quot;网站描述内容&quot;/&gt;</code></p><h3 id="网站关键字"><a href="#网站关键字" class="headerlink" title="网站关键字"></a>网站关键字</h3><p><code>&lt;meta name=&quot;keywords&quot; content=&quot;网站关键字&quot;/&gt;</code></p><h3 id="视口设置"><a href="#视口设置" class="headerlink" title="视口设置"></a>视口设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;/&gt;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/H5/H5-Document-header/#disqus_thread</comments>
    </item>
    
    <item>
      <title>H5-Element</title>
      <link>https://shulu520.com/H5/H5-Element/</link>
      <guid>https://shulu520.com/H5/H5-Element/</guid>
      <pubDate>Mon, 29 Jul 2019 12:45:36 GMT</pubDate>
      <description>
      
        HTML5元素标签学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp; HTML5是Web中核心语言HTML的新规范，现在先学习H5的基础部分-H5新元素。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="先学习HTML常见的元素标签"><a href="#先学习HTML常见的元素标签" class="headerlink" title="先学习HTML常见的元素标签"></a>先学习HTML常见的元素标签</h2><ul><li>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element" target="_blank" rel="noopener">MDN-HTML-Element</a></li></ul><h3 id="html标签："><a href="#html标签：" class="headerlink" title="html标签："></a>html标签：</h3><ul><li>作用所有HTML中标签的一个根节点。</li></ul><h3 id="head标签："><a href="#head标签：" class="headerlink" title="head标签："></a>head标签：</h3><ul><li>作用：用于存放：title,meta,base,style,script,link</li><li>注意在head标签中我们必须要设置的标签是title</li></ul><h3 id="title标签："><a href="#title标签：" class="headerlink" title="title标签："></a>title标签：</h3><ul><li>作用：让页面拥有一个属于自己的标题。</li></ul><h3 id="body标签："><a href="#body标签：" class="headerlink" title="body标签："></a>body标签：</h3><ul><li>作用：页面在的主体部分，用于存放所有的HTML标签：</li></ul><h3 id="h系列标题标签"><a href="#h系列标题标签" class="headerlink" title="h系列标题标签"></a>h系列标题标签</h3><ul><li><p>单词缩写:head头部即标题 </p></li><li><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即<br><code>&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</code></p></li></ul><blockquote><p>注意：h1 标签因为重要，尽量少用, 一般h1都是给logo使用。</p></blockquote><h3 id="p段落标签"><a href="#p段落标签" class="headerlink" title="p段落标签"></a>p段落标签</h3><ul><li>单词缩写:paragraph段落</li><li>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</li></ul><h3 id="div-span标签"><a href="#div-span标签" class="headerlink" title="div span标签"></a>div span标签</h3><ul><li>div、span 是没有语义的，是我们网页布局主要的2个盒子。</li><li><p>div 就是division的缩写，分割，分区的意思。</p></li><li><p>span, 跨度，跨距；范围    </p></li></ul><h3 id="img图像标签"><a href="#img图像标签" class="headerlink" title="img图像标签"></a>img图像标签</h3><ul><li>单词缩写：image图像</li><li>src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</li></ul><h3 id="a链接标签锚点定位"><a href="#a链接标签锚点定位" class="headerlink" title="a链接标签锚点定位"></a>a链接标签锚点定位</h3><ul><li>单词缩写:anchor 的缩写 。基本解释 锚, 铁锚.</li><li>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</span><br><span class="line"></span><br><span class="line">target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">1.外部链接 需要添加 http:// www.baidu.com</span><br><span class="line"></span><br><span class="line">2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a &gt;</span><br><span class="line"></span><br><span class="line">3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=&quot;#&quot;)，表示该链接暂时为一个空链接。</span><br><span class="line"></span><br><span class="line">4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</span><br><span class="line"></span><br><span class="line">锚点定位:</span><br><span class="line"></span><br><span class="line">通过创建锚点链接，用户能够快速定位到目标内容。</span><br><span class="line">创建锚点链接分为两步：</span><br><span class="line"></span><br><span class="line">1.使用href=”#id名“链接文本创建链接文本。</span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br></pre></td></tr></table></figure><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><ul><li><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释语句 --&gt;</span><br></pre></td></tr></table></figure></li><li><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p></li></ul><h3 id="ul无序列表"><a href="#ul无序列表" class="headerlink" title="ul无序列表"></a>ul无序列表</h3><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line"></span><br><span class="line">&lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br></pre></td></tr></table></figure><h3 id="ol有序列表"><a href="#ol有序列表" class="headerlink" title="ol有序列表"></a>ol有序列表</h3><ul><li>所有特性基本与ul 一致。但是实际工作中，较少用 ol .</li></ul><h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><ul><li>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</li><li>用的还可以：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;名词1&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;dt&gt;名词2&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释2&lt;/dd&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h2 id="Web组件元素"><a href="#Web组件元素" class="headerlink" title="Web组件元素"></a>Web组件元素</h2><ul><li>slot 插槽</li><li>template HTML内容模板</li></ul><h2 id="table表格标签"><a href="#table表格标签" class="headerlink" title="table表格标签"></a>table表格标签</h2><ul><li>存在即是合理的。表格的现在还是较为常用的一种标签，但不是用来布局，常见为处理表格式数据。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">MDN-table</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">创建简单的表格</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th colspan=&quot;3&quot;&gt;表头文本会加粗居中&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;单元格&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;单元格&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;单元格&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">table: 用于定义一个表格。</span><br><span class="line"></span><br><span class="line">tr: 用于定义表格中的一行，必须嵌套在table标签中，在 table 中包含几对 tr，就有几行表格。</span><br><span class="line"></span><br><span class="line">td：用于定义表格中的单元格，必须嵌套在tr标签中，一对 tr中包含几对td，就表示该行中有多少列（或多少个单元格）。</span><br><span class="line"></span><br><span class="line">th: 表头标签,表头一般位于表格的第一行或第一列，其文本加粗居中.</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</span><br><span class="line">2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</span><br><span class="line"></span><br><span class="line">表格结构（了解）</span><br><span class="line">在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，此处不在赘述）</span><br><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。</span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。</span><br><span class="line"></span><br><span class="line">合并单元格</span><br><span class="line">跨行合并：rowspan  跨列合并：colspan</span><br><span class="line"></span><br><span class="line">表格不要纠结于外观，那是CSS 的作用。</span><br></pre></td></tr></table></figure><h2 id="form表单标签-掌握"><a href="#form表单标签-掌握" class="headerlink" title="form表单标签(掌握)"></a>form表单标签(掌握)</h2><ul><li><p>现实中的表单，类似我们去银行办理信用卡填写的单子。目的是为了收集用户信息。</p></li><li><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p></li><li><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p></li><li><p>表单控件：包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p></li><li><p>提示信息：一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p></li><li><p>表单域：他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p></li></ul><h3 id="input标签-控件-重点"><a href="#input标签-控件-重点" class="headerlink" title="input标签 控件(重点)"></a>input标签 控件(重点)</h3><ul><li>表单 <code>&lt;input&gt;</code>类型type,如果未指定此属性，则采用的默认类型为text.</li><li>以下为type属性的常见类型：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">checkbox： </span><br><span class="line">复选框。使用 checked 属性指示控件是否被选择。</span><br><span class="line"></span><br><span class="line">file：</span><br><span class="line">此控件可以让用户选择文件。使用 accept 属性可以定义控件可以选择的文件类型。</span><br><span class="line"></span><br><span class="line">password：</span><br><span class="line">一个值被遮盖的单行文本字段。使用 maxlength 指定可以输入的值的最大长度 。</span><br><span class="line"></span><br><span class="line">radio：</span><br><span class="line">单选按钮。在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值。</span><br><span class="line"></span><br><span class="line">reset：</span><br><span class="line">用于将表单所内容设置为空的按钮。</span><br><span class="line"></span><br><span class="line">submit：</span><br><span class="line">用于提交表单的按钮。</span><br><span class="line"></span><br><span class="line">tel: </span><br><span class="line">HTML5新类型，tel类型的元素用于让用户输入和编辑电话号码。其中最明显的就是移动浏览器— 特别是在手机上 — 可能会选择提供为输入电话号码而优化的自定义键盘。使用电话号码的特定输入类型也使添加自定义验证和处理电话号码更方便。</span><br><span class="line"></span><br><span class="line">email</span><br><span class="line">输入邮箱格式</span><br><span class="line"></span><br><span class="line">search</span><br><span class="line">搜索框（体现语义化）</span><br></pre></td></tr></table></figure><ul><li>全局 <code>&lt;input&gt;</code> 属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">type </span><br><span class="line">要呈现的控件类型.</span><br><span class="line"></span><br><span class="line">accept </span><br><span class="line">如果该元素的 type 属性的值是file,则该属性表明了服务器端可接受的文件类型；否则它将被忽略。</span><br><span class="line"></span><br><span class="line">autocomplete  HTML5新属性</span><br><span class="line">这个属性表示这个控件的值是否可被浏览器自动填充。</span><br><span class="line"></span><br><span class="line">autofocus  HTML5</span><br><span class="line">这个布尔属性允许您指定的表单控件在页面加载时具有焦点（自动获得焦点）</span><br><span class="line"></span><br><span class="line">checked</span><br><span class="line">如果该元素的type属性的值为radio或者checkbox,则该布尔属性的存在与否表明了该控件是否是默认选择状态.</span><br><span class="line"></span><br><span class="line">disabled</span><br><span class="line">这个布尔属性表示此表单控件不可用。特别是在禁用的控件中，click 事件将不会被分发 。并且，禁用的控件的值在提交表单时也不会被提交。</span><br><span class="line"></span><br><span class="line">max  HTML5 </span><br><span class="line">此项目的最大（数字或日期时间）值，且不得小于其最小值（min属性）值。</span><br><span class="line"></span><br><span class="line">min  HTML5 </span><br><span class="line">此项目的最小（数字或日期时间）值，且不得大于其最大值（最大属性）值。</span><br><span class="line"></span><br><span class="line">minlength 元素值的长度 属性为输入的最小长度;</span><br><span class="line"></span><br><span class="line">maxlength  HTML5 元素值的长度</span><br><span class="line">如果 type 的值是text, email, search, password, tel, 或 url，那么这个属性指明了用户最多可以输入的字符个数（按照Unicode编码方式计数）.译者注:ie10+</span><br><span class="line"></span><br><span class="line">name</span><br><span class="line">控件的名称，与表单数据一起提交。</span><br><span class="line"></span><br><span class="line">pattern  HTML5</span><br><span class="line">检查控件值的正则表达式.。pattern必须匹配整个值，而不仅仅是某些子集.。使用title属性来描述帮助用户的模式.。当类型属性的值为text, search, tel, url 或 email时，此属性适用，否则将被忽略。译者注:ie10+</span><br><span class="line"></span><br><span class="line">placeholder HTML5</span><br><span class="line">提示用户输入框的作用。</span><br><span class="line"></span><br><span class="line">required HTML5</span><br><span class="line">这个属性指定用户在提交表单之前必须为该元素填充值. </span><br><span class="line"></span><br><span class="line">multiple </span><br><span class="line">多文件上传，input type=file</span><br><span class="line"></span><br><span class="line">size</span><br><span class="line">控件的初始大小。可以使用 size 属性来控制输入框的物理大小</span><br><span class="line"></span><br><span class="line">value</span><br><span class="line">控件的初始值. 此属性是可选的.</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">提供建议值</span><br></pre></td></tr></table></figure><ul><li>input 元素造型, 你可以使用各种与颜色相关的属性来设置input元素的样式。与文本输入相关的元素特有的一个不常见的特性是CSS  caret-color属性，该属性允许你设置用于绘制文本输入插入符的颜色.</li></ul><h3 id="input的demo-输入电话号码"><a href="#input的demo-输入电话号码" class="headerlink" title="input的demo-输入电话号码"></a>input的demo-输入电话号码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #telNo&#123;</span><br><span class="line">    caret-color: red; /* 插入光标的颜色 */</span><br><span class="line">  &#125;</span><br><span class="line">  #telNo:invalid+span:after &#123;</span><br><span class="line">    position: absolute; content: &apos;✖&apos;;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    color: #8b0000;</span><br><span class="line">  &#125;</span><br><span class="line">  #telNo:valid+span:after &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: &apos;✓&apos;;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    color: #009000;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;form &gt;</span><br><span class="line">  &lt;fieldset&gt; //控件组 效果就是一个边框线</span><br><span class="line">    &lt;legend&gt;输入电话号码&lt;/legend&gt; //内容相关说明</span><br><span class="line">      &lt;label for=&quot;telNo&quot;&gt;Phone number: &lt;/label&gt;</span><br><span class="line">      &lt;input id=&quot;telNo&quot; size=&quot;12&quot; autofocus name=&quot;telNo&quot; type=&quot;tel&quot; placeholder=&quot;请输入电话号码&quot; maxlength=&quot;11&quot; required  list=&quot;defaultTels&quot; pattern=&quot;^(0|86|17951)?(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]&#123;8&#125;$&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;validity&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;datalist id=&quot;defaultTels&quot;&gt; //选项建议列表</span><br><span class="line">        &lt;option value=&quot;13161122239&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;15161122239&quot;&gt;</span><br><span class="line">      &lt;/datalist&gt;</span><br><span class="line">  &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h3><ul><li><p>label 标签为 input 元素定义标注（标签）。</p></li><li><p>作用：用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点.</p></li><li><p>如何绑定元素呢？for 属性规定 label 与哪个表单元素绑定。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for=&quot;male&quot;&gt;Male&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot; value=&quot;male&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h3><ul><li>如果需要输入大量的信息.通过textarea控件可以轻松地创建多行文本输入框.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea cols=&quot;每行中的字符数&quot; rows=&quot;显示的行数&quot;&gt;</span><br><span class="line">  文本内容</span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><h3 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;选项3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="form表单域"><a href="#form表单域" class="headerlink" title="form表单域"></a>form表单域</h3><ul><li>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;&gt;</span><br><span class="line">  各种表单控件……</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>常用属性：</li></ul><ol><li>Action</li></ol><ul><li>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li></ul><ol start="2"><li>method</li></ol><ul><li>用于设置表单数据的提交方式，其取值为get或post。</li></ul><ol start="3"><li>name</li></ol><ul><li><p>用于指定表单的名称，以区分同一个页面中的多个表单。</p></li><li><p>注意：每个表单都应该有自己表单域。</p></li></ul><h2 id="HTML5-新标签"><a href="#HTML5-新标签" class="headerlink" title="HTML5 新标签"></a>HTML5 新标签</h2><ul><li>XHTML属于XML，是HTML进行XML严格化的结果</li><li>HTML5不属于XML，比XHTML宽松，比如input属性checked直接写这样就行了,而不用写checked=”checked”。</li></ul><h3 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h3><ul><li>所谓标签语义化，就是指标签的含义。</li></ul><h3 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h3><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><ul><li><p>核心：合适的地方给一个最为合理的标签。</p></li><li><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p></li><li><p>不管是谁都能看懂这块内容是什么。</p></li><li><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p></li></ul><h3 id="HTML5样式标签"><a href="#HTML5样式标签" class="headerlink" title="HTML5样式标签"></a>HTML5样式标签</h3><ul><li>em 语义化的标签表强调，而i标签是纯样式的标签，表斜体，H5不推荐使用，一般用来做图标。</li></ul><h3 id="H5常用结构新标签"><a href="#H5常用结构新标签" class="headerlink" title="H5常用结构新标签"></a>H5常用结构新标签</h3><ul><li>header：定义文档的页眉</li><li>nav：定义导航链接的部分</li><li>footer：定义文档或节的页脚</li><li>article：标签规定独立的自包含内容</li><li>section：定义文档中的节（section、区段）</li><li>aside：定义其所处内容之外的内容,如广告</li></ul><h3 id="article"><a href="#article" class="headerlink" title="article"></a>article</h3><ul><li>元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</li></ul><h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><ul><li>表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题 (h1-h6 元素) 作为子节点来辨识每一个section。</li></ul><h3 id="audio标签-多媒体"><a href="#audio标签-多媒体" class="headerlink" title="audio标签 多媒体"></a>audio标签 多媒体</h3><ul><li>用于在文档中表示音频内容。</li><li>autoplay 自动播放</li><li>controls 是否显不默认播放控件</li><li>loop 循环播放</li><li>更多关于audio的内容查看本博客H5-audio专栏部分。</li></ul><h3 id="video标签-多媒体"><a href="#video标签-多媒体" class="headerlink" title="video标签 多媒体"></a>video标签 多媒体</h3><ul><li>HTML5通过video标签来解决音频播放的问题。</li><li>autoplay 自动播放</li><li>controls 是否显示默认播放控件</li><li>loop 循环播放</li><li>width 设置播放窗口宽度</li><li>height 设置播放窗口的高度</li><li>更多关于video的内容查看本博客H5-video专栏部分。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/H5/H5-Element/#disqus_thread</comments>
    </item>
    
    <item>
      <title>browser-core</title>
      <link>https://shulu520.com/browser/browser-core/</link>
      <guid>https://shulu520.com/browser/browser-core/</guid>
      <pubDate>Sun, 28 Jul 2019 13:15:31 GMT</pubDate>
      <description>
      
        browser主流浏览器及其内核以及web标准相关知识
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;了解主流浏览器的核心-内核，为了应付面试，也有助于我们在不同内核的浏览器中测试网页的渲染效果。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="browser主流浏览器及其内核"><a href="#browser主流浏览器及其内核" class="headerlink" title="browser主流浏览器及其内核"></a>browser主流浏览器及其内核</h2><ul><li>浏览器内核是浏览器的核心，也称“渲染引擎”，用来解释网页语法并渲染到网页上。</li><li>浏览器内核决定了浏览器该如何显示网页内容以及页面的格式信息。</li><li>不同的浏览器内核对网页的语法解释也不同，因此网页开发者需要在不同内核的浏览器中测试网页的渲染效果。</li></ul><h2 id="browser国际市场"><a href="#browser国际市场" class="headerlink" title="browser国际市场"></a>browser国际市场</h2><ol><li>1994年诞生IE浏览器；</li></ol><ul><li>IE浏览器内核：Trident内核，也是俗称的IE内核；</li></ul><ol start="2"><li>1995年诞生Opera浏览器；</li></ol><ul><li>Opera浏览器内核：最初是自己的Presto内核，后来加入谷歌大军，从Webkit又到了Blink内核；</li></ul><ol start="3"><li>2003年诞生Safari浏览器； </li></ol><ul><li>Safari浏览器内核：Webkit内核；</li></ul><ol start="4"><li>2004年诞生Firefox浏览器；</li></ol><ul><li>Firefox浏览器内核：Gecko内核，俗称Firefox内核；</li></ul><ol start="5"><li>2008年诞生Chrome浏览器；</li></ol><ul><li>Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，2013年以后到现在是Blink内核；</li></ul><h2 id="browser国内市场"><a href="#browser国内市场" class="headerlink" title="browser国内市场"></a>browser国内市场</h2><ol start="6"><li>360浏览器、 猎豹浏览器内核：IE+Chrome双内核；</li><li>搜狗、 遨游、 QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）；</li><li>百度浏览器、 世界之窗内核：IE内核；</li><li>2345浏览器内核：好像以前是IE内核，现在也是IE+Chrome双内核了；</li><li>UC浏览器内核：这个众口不一，UC说是他们自己研发的U3内核，但好像还是基于Webkit和Trident，还有说是基于火狐内核。</li></ol><h2 id="移动端的浏览器内核"><a href="#移动端的浏览器内核" class="headerlink" title="移动端的浏览器内核"></a>移动端的浏览器内核</h2><ul><li>移动端的浏览器内核主要说的是系统内置浏览器的内核。</li><li>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等。</li><li>其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit。</li><li>Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink。</li><li>Windows Phone 8 系统浏览器内核是 Trident。</li></ul><h2 id="browser有关说明"><a href="#browser有关说明" class="headerlink" title="browser有关说明"></a>browser有关说明</h2><ul><li><p>大家的误解，一直认为的chrome内核就是由苹果公司最先选择的算是KHTML引擎的分支-Webkit，这大概是苹果公司至今说不清道不明的伤痛吧~~chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多。</p></li><li><p>2013年4月3日，谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器内核 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实Blink引擎就是也就是Webkit的分支，就像Webkit是KHTML的分支一样。Blink引擎现在是谷歌公司与Opera Software共同研发。</p></li><li><p>win10 edge浏览器 EdgeHTML内核; 据有关消息，微软即将发布的新版 Edge 浏览器很可能同时包含谷歌的 Blink 和 自身的Trident两个浏览器内核，方便浏览器给那些为 IE 设计的网站提供向后兼容性。换句话说，就是要把未来的Windows 10默认浏览器替换成只是换了一个皮肤的Chrome。采用Chromium内核的Edge浏览器测试版已经放出了安装包。在用完之后，我最惊叹的一点，就是它能做得多么像是Chrome。这款Edge基本上可以让一个习惯使用Chrome的用户无缝切换，菜单布局，功能设置等等分毫不差。为了做到体验上的完全对接，Edge这一测试版甚至连浏览器标签页一行、后退前进等按钮和地址栏一行和书签栏一行的高度都做到了跟Chrome平齐。</p></li><li><p>还有在手机微信上内嵌的浏览器，因为它采用QQ浏览器的X5内核，同时因为跟微信深度耦合，并且要调用很多通过微信实现的系统能力，所以出现了有些网页必须专门适配微信的局面。</p></li></ul><h2 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h2><ul><li>通过了解以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。通过web标准的约束，尽量使同一套代码在不同的浏览器有相同的结构、表现和行为。</li></ul><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><ol><li>让Web的发展前景更广阔 </li><li>内容能被更广泛的设备访问</li><li>更容易被搜寻引擎搜索</li><li>降低网站流量费用</li><li>使网站更易于维护</li><li>提高页面浏览速度</li></ol><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><ul><li>Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。</li><li><p>主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p></li><li><p>结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。</p></li><li>样式标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。</li><li>行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/browser/browser-core/#disqus_thread</comments>
    </item>
    
    <item>
      <title>sass</title>
      <link>https://shulu520.com/sass/css3-sass/</link>
      <guid>https://shulu520.com/sass/css3-sass/</guid>
      <pubDate>Sat, 27 Jul 2019 14:41:58 GMT</pubDate>
      <description>
      
        css预处理器-sass学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;学习使用css预处理器sass让我们更爽地敲css代码。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css预处理器-sass介绍"><a href="#css预处理器-sass介绍" class="headerlink" title="css预处理器-sass介绍"></a>css预处理器-sass介绍</h2><ul><li>sass使用ruby语言编写，下载使用有些不方便，使用cnpm成功率高</li><li>vscode 下载EasySass运行插件。</li><li><strong>注意</strong>：下载的是node-sass, sass的文件后缀是.scss</li></ul><ol><li>项目是npm init 过的</li><li>cnpm install node-sass </li><li>编写.scss后缀的文件后，自动会生成对应文件名的.css文件,以及压缩过的对应文件名的.min.css文件</li></ol><h2 id="css预处理器的作用"><a href="#css预处理器的作用" class="headerlink" title="css预处理器的作用"></a>css预处理器的作用</h2><ul><li>帮助我们更好的组织css代码</li><li>提高代码的复用率</li><li>提升可维护性</li></ul><h2 id="sass嵌套"><a href="#sass嵌套" class="headerlink" title="sass嵌套"></a>sass嵌套</h2><ul><li>选择器之间可以嵌套</li><li>反映层级和约束</li></ul><h2 id="sass变量"><a href="#sass变量" class="headerlink" title="sass变量-$"></a>sass变量-$</h2><ul><li>复用常用的个别属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">$fontSize: 18px;</span><br><span class="line">$bgColor: red;</span><br><span class="line"></span><br><span class="line">//使用变量</span><br><span class="line">.child&#123;</span><br><span class="line">  font-size: $font-size + 2px;</span><br><span class="line">  background-color: $bgColor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass运算"><a href="#sass运算" class="headerlink" title="sass运算"></a>sass运算</h2><ul><li>支持加减乘除多种运算。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: $font-size + 2px;</span><br></pre></td></tr></table></figure><h2 id="sass混入-Mixin"><a href="#sass混入-Mixin" class="headerlink" title="sass混入-Mixin"></a>sass混入-Mixin</h2><ul><li>复用css代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$color: pink;</span><br><span class="line">$bgColor: blue;</span><br><span class="line">$fontSize: 18px;</span><br><span class="line"></span><br><span class="line">//定义混入</span><br><span class="line">//注意：这里base是一个代码片段的名字</span><br><span class="line">@mixin base($color, $h, $bgc, $fontSize)&#123;</span><br><span class="line">  color: $color;</span><br><span class="line">  height: $h;</span><br><span class="line">  background: $bgc;</span><br><span class="line">  font-size: $fontSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用混入</span><br><span class="line">.wrap&#123;</span><br><span class="line">  @include base(yellow, 300px, $bgColor, $fontSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass继承-extend"><a href="#sass继承-extend" class="headerlink" title="sass继承-extend"></a>sass继承-extend</h2><ul><li>复用css代码片段</li><li>生成的样式中，样式片段没有重复</li><li>@extend会增加选择器之间的联系，然后把他们堆在一起。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 一个普通的类就是一个extend</span><br><span class="line">.button&#123;</span><br><span class="line">  color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用extend</span><br><span class="line">h2&#123;</span><br><span class="line">  @extend .button;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass中mixin的优缺点"><a href="#sass中mixin的优缺点" class="headerlink" title="sass中mixin的优缺点"></a>sass中mixin的优缺点</h2><ul><li><p>优点：@mixin主要的优势就是它能够接受参数。</p></li><li><p>优点：还能直接给@mixin传递样式片段。 </p></li><li><p>缺点：生成的代码会变得肿胀。</p></li></ul><h2 id="sass中extend的优缺点"><a href="#sass中extend的优缺点" class="headerlink" title="sass中extend的优缺点"></a>sass中extend的优缺点</h2><ul><li><p>优点：生成的样式中，样式片段没有重复。</p></li><li><p>缺点：@extend会增加选择器之间的联系，然后把他们堆在一起。被继承的选择器和继承别人的选择器可能会在样式表的不同位置，这就导致维护困难，放置顺序，或者需要差异化的一些问题。</p></li><li><p>缺点：@extend命令不够灵活。不能向它传递参数，它原本是啥样就是啥样。</p></li></ul><h2 id="sass中mixin-vs-extend"><a href="#sass中mixin-vs-extend" class="headerlink" title="sass中mixin vs extend"></a>sass中mixin vs extend</h2><ul><li>@mixin和@extend都能帮助你模块化代码，然后更加方便地在样式表中复用一些样式片段。</li><li>从结果上看，mixin是直接把代码复制过来，而extend是将有公共样式的选择器提取出来，用分组选择器把他们放在一起。</li><li><p>你可能会问，到底什么时候使用@mixin，什么时候使用@extend?</p></li><li><p><strong>总结：</strong>在大作数情况下@mixin会比@extend更好，但是它们俩都有自己的一席之地。当样式和选择器之间的关系在某些方面比较紧密的时候，使用@extend。除此之外，你可以使用@mixin在任何地方。</p></li></ul><h2 id="sass循环-loop"><a href="#sass循环-loop" class="headerlink" title="sass循环-loop"></a>sass循环-loop</h2><ul><li>生成一些复杂有规律的代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//直接使用for循环，生成各自宽度的col-1 ~ col-12的css代码片段。</span><br><span class="line">@for $i from 1 to 12 &#123;</span><br><span class="line">  .col-#&#123;$i&#125;&#123;</span><br><span class="line">    width: 1000px/12*$i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass文件模块化-import"><a href="#sass文件模块化-import" class="headerlink" title="sass文件模块化@import"></a>sass文件模块化@import</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./header&quot;; .scss后缀可以省略</span><br><span class="line">@import &quot;./nav&quot;; </span><br><span class="line">@import &quot;./footer&quot;</span><br></pre></td></tr></table></figure><h2 id="sass中css预处理器框架"><a href="#sass中css预处理器框架" class="headerlink" title="sass中css预处理器框架"></a>sass中css预处理器框架</h2><ul><li>Compass</li><li>提供现成的mixin, 类似js类库，封装常用功能。 </li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/sass/css3-sass/#disqus_thread</comments>
    </item>
    
    <item>
      <title>less</title>
      <link>https://shulu520.com/less/css3-less/</link>
      <guid>https://shulu520.com/less/css3-less/</guid>
      <pubDate>Sat, 27 Jul 2019 14:33:18 GMT</pubDate>
      <description>
      
        css预处理器-less学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;学习使用css预处理器less让我们更爽地敲css代码。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css预处理器-less介绍"><a href="#css预处理器-less介绍" class="headerlink" title="css预处理器-less介绍"></a>css预处理器-less介绍</h2><ul><li>less使用nodejs编写，下载使用都方便</li><li>vscode 下载EasyLess运行插件。</li></ul><ol><li>项目是npm init 过的</li><li>npm i less 即可使用</li><li>编写.less后缀的文件后，自动会生成对应文件名的.css文件</li></ol><h2 id="css预处理器的作用"><a href="#css预处理器的作用" class="headerlink" title="css预处理器的作用"></a>css预处理器的作用</h2><ul><li>帮助我们更好的组织css代码</li><li>提高代码的复用率</li><li>提升可维护性</li></ul><h2 id="less嵌套"><a href="#less嵌套" class="headerlink" title="less嵌套"></a>less嵌套</h2><ul><li>选择器之间可以嵌套</li><li>反映层级和约束</li></ul><h2 id="less变量"><a href="#less变量" class="headerlink" title="less变量-@"></a>less变量-@</h2><ul><li>复用常用的个别属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">@font-size: 18px;</span><br><span class="line">@bgColor: red; </span><br><span class="line"></span><br><span class="line">//使用变量</span><br><span class="line">.child&#123;</span><br><span class="line">  font-size: @font-size + 2px;</span><br><span class="line">  background-color: @bgColor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less运算"><a href="#less运算" class="headerlink" title="less运算"></a>less运算</h2><ul><li>支持加减乘除多种运算。</li></ul><h2 id="less混入-Mixin"><a href="#less混入-Mixin" class="headerlink" title="less混入-Mixin"></a>less混入-Mixin</h2><ul><li>复用常用的css代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@color: pink;</span><br><span class="line">@bgColor: blue;</span><br><span class="line">@fontSize: 18px;</span><br><span class="line"></span><br><span class="line">//定义混入</span><br><span class="line">//注意：这里.base是一个类名</span><br><span class="line">.base(@color, @h, @bgc, @fontSize)&#123;</span><br><span class="line">  color: @color;</span><br><span class="line">  height: @h;</span><br><span class="line">  background: @bgc;</span><br><span class="line">  font-size: @fontSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用混入</span><br><span class="line">.wrap&#123;</span><br><span class="line">  .base(yellow, 300px, @bgColor, @fontSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less继承-extend"><a href="#less继承-extend" class="headerlink" title="less继承-extend"></a>less继承-extend</h2><ul><li>复用css代码片段</li><li>生成的样式中，样式片段没有重复</li><li>&amp;:extend()会增加选择器之间的联系，然后把他们堆在一起。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 一个普通的类就是一个extend</span><br><span class="line">.box&#123;</span><br><span class="line">  color: @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用extend</span><br><span class="line">h2&#123;</span><br><span class="line">  &amp;:extend(.box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less中mixin和extend的优缺点"><a href="#less中mixin和extend的优缺点" class="headerlink" title="less中mixin和extend的优缺点"></a>less中mixin和extend的优缺点</h2><ul><li>同sass中的一样，<a href="https://shulu520.com/css3-sass/sass">参考sass部分</a></li></ul><h2 id="less循环"><a href="#less循环" class="headerlink" title="less循环"></a>less循环</h2><ul><li>生成一些复杂有规律的代码片段</li><li>less中没有循环的方法,但是我们可以在mixin中使用递归方法模拟循环。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//在mixin中使用递归方法模拟循环。</span><br><span class="line">.gen-col(@n) when (@n &gt; 0) &#123;</span><br><span class="line">  .gen-col(@n - 1);</span><br><span class="line">  .col-@&#123;n&#125; &#123;</span><br><span class="line">    width: 1000px/12*@n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用循环，生成各自宽度的col-1 ~ col-12的css代码片段。</span><br><span class="line">.gen-col(12);</span><br></pre></td></tr></table></figure><h2 id="less文件模块化-import"><a href="#less文件模块化-import" class="headerlink" title="less文件模块化@import"></a>less文件模块化@import</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./header&quot;; .less后缀可以省略</span><br><span class="line">@import &quot;./nav&quot;; </span><br><span class="line">@import &quot;./footer&quot;;</span><br></pre></td></tr></table></figure><h2 id="less中css预处理器框架"><a href="#less中css预处理器框架" class="headerlink" title="less中css预处理器框架"></a>less中css预处理器框架</h2><ul><li>Lesshat</li><li>EST(百度大牛编写)</li><li>提供现成的mixin, 类似js类库，封装常用功能。</li></ul><h3 id="EST的介绍使用"><a href="#EST的介绍使用" class="headerlink" title="EST的介绍使用"></a>EST的介绍使用</h3><ul><li>est 是一个基于 Less 的样式工具库，帮助您更轻松地书写 Less 代码。</li><li>est 提供了一系列方便快捷的 mixin，只在调用时才输出代码。est 不希望提供直接给 HTML 调用的类名，用「样式类」污染 HTML 代码的语义。当然您也可以根据自己的项目需求基于 est 搭建样式类库，提供类名接口来进行快速开发。</li></ul><p><a href="http://ecomfe.github.io/est/" target="_blank" rel="noopener">官网教程</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">使用 Git 获取代码：</span><br><span class="line">git clone https://github.com/ecomfe/est.git</span><br><span class="line"></span><br><span class="line">然后在 Less 代码中引入。</span><br><span class="line">@import &quot;est/src/all.less&quot;;</span><br><span class="line"></span><br><span class="line">官网导航介绍：</span><br><span class="line"></span><br><span class="line">variables 全局变量设置。</span><br><span class="line"></span><br><span class="line">normalize 用来归一化不同浏览器下的页面样式。</span><br><span class="line"></span><br><span class="line">reset 进行全局样式重置。即 .global-reset()</span><br><span class="line"></span><br><span class="line">shapes 提供绘制基本形状的功能</span><br><span class="line"></span><br><span class="line">effects 提供预设视觉效果。</span><br><span class="line"></span><br><span class="line">layout 提供常见的基础布局。</span><br><span class="line"></span><br><span class="line">grid 帮助生成自定义的栅格布局。 </span><br><span class="line"></span><br><span class="line">clockhand 提供顺时针简写的功能。</span><br><span class="line"></span><br><span class="line">typography 文字排版相关功能。</span><br><span class="line"></span><br><span class="line">util 常用辅助类工具函数。</span><br><span class="line"></span><br><span class="line">compatibility 提供基础的兼容性封装。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ...your own awesome less code starts here...</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/less/css3-less/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-BFC</title>
      <link>https://shulu520.com/css3/css3-BFC/</link>
      <guid>https://shulu520.com/css3/css3-BFC/</guid>
      <pubDate>Mon, 22 Jul 2019 14:18:55 GMT</pubDate>
      <description>
      
        css3 块级格式化上下文知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;BFC就是页面上的一个独立容器，容器里面的元素不会影响到外面的元素，反之亦然。学习页面布局，css-BFC的知识要重点掌握。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC-块级格式化上下文"></a>BFC-块级格式化上下文</h2><h3 id="BFC规则、特性"><a href="#BFC规则、特性" class="headerlink" title="BFC规则、特性"></a>BFC规则、特性</h3><ul><li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻box的margin会发生重叠</li><li>BFC的区域不会与float box的重叠，紧贴着浮动盒子的边缘</li><li>计算BFC的高度时，浮动元素也参与计算。</li><li>BFC就是页面上的一个独立容器，容器里面的元素不会影响到外面的元素，反之亦然。</li></ul><h3 id="块级元素的BFC创立条件"><a href="#块级元素的BFC创立条件" class="headerlink" title="块级元素的BFC创立条件"></a>块级元素的BFC创立条件</h3><ul><li>float属性不为none</li><li>position属性为absolute或fixed</li><li>display属性为inline-block、table相关、flex</li><li>overflow属性不为visible(以上最常用的是overflow: hidden, 副作用少)</li></ul><h3 id="BFC的用途"><a href="#BFC的用途" class="headerlink" title="BFC的用途"></a>BFC的用途</h3><ul><li>清除浮动: 这时可以让父元素生成BFC，即解决子因子元素浮动而父级高度塌陷问题</li><li>解决外边距合并问题：假设有两个p元素，可以在其中一个p上包裹容器，然后触发其BFC，这样两个p就不在同一个BFC，因此就不会发生重叠</li><li>自适应两栏布局: 即左边盒子浮动，右边盒子触发BFC</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-BFC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-flex</title>
      <link>https://shulu520.com/css3/css3-flex/</link>
      <guid>https://shulu520.com/css3/css3-flex/</guid>
      <pubDate>Thu, 18 Jul 2019 13:58:53 GMT</pubDate>
      <description>
      
        css3-flex 弹性盒模型 常用知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><ul><li>规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间。</li><li>Flexbox即 Flexible Box Module（弹性盒模型）</li><li>Flexbox同一时间只能控制行或列中的一个维度。对于二维控制需要 grid网格布局。</li><li>主轴 即X轴方向(默认)</li><li>侧轴 即Y轴方向(默认) 侧轴垂直于主轴</li></ul><h2 id="flex-各个属性"><a href="#flex-各个属性" class="headerlink" title="flex 各个属性"></a>flex 各个属性</h2><h3 id="父元素-伸缩容器"><a href="#父元素-伸缩容器" class="headerlink" title="父元素-伸缩容器"></a>父元素-伸缩容器</h3><ul><li>display: flex; 声明使用伸缩布局</li><li>flex-direction: row(默认); 定义了主轴的方向(正方向或反方向)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: row;            x轴方向</span><br><span class="line">flex-direction: row-reverse;    -X轴方向</span><br><span class="line">flex-direction: column;         Y轴方向</span><br><span class="line">flex-direction: column-reverse; -Y轴方向</span><br></pre></td></tr></table></figure><ul><li>justify-content 主轴上项目的对齐方式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">justify-content: center;     居中排列 </span><br><span class="line">justify-content: start;      从行首起始位置开始排列 </span><br><span class="line">justify-content: end;        从行尾位置开始排列 </span><br><span class="line"></span><br><span class="line">justify-content: space-between;   均匀排列每个元素 首个元素放置于起点，末尾元素放置于终点 </span><br><span class="line">justify-content: space-around;    均匀排列每个元素 每个元素周围分配相同的空间 </span><br><span class="line">justify-content: space-evenly;    均匀排列每个元素 每个元素之间的间隔相等</span><br></pre></td></tr></table></figure><ul><li>align-items 侧轴上项目的对齐方式–针对单行即子元素只有一行(不换行)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">align-items: center; </span><br><span class="line">align-items: start;</span><br><span class="line">align-items: end; </span><br><span class="line">align-items: stretch; 拉伸子元素的高度以适应父元素的高度(子元素不给高度的情况)</span><br></pre></td></tr></table></figure><ul><li>align-content 侧轴上项目的对齐方式–针对多行即子元素有多行(换行)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">align-content: center;      将项目放置在中点 </span><br><span class="line">align-content: start;       最先放置项目 </span><br><span class="line">align-content: end;         最后放置项目 </span><br><span class="line"></span><br><span class="line">align-content: space-between;  均匀分布项目 第一项与起始点齐平，最后一项与终止点齐平 </span><br><span class="line">align-content: space-around;   均匀分布项目 项目在两端有一半大小的空间</span><br><span class="line">align-content: space-evenly;   均匀分布项目 项目周围有相等的空间 </span><br><span class="line">align-content: stretch;        均匀分布项目 拉伸‘自动’-大小的项目以充满容器</span><br></pre></td></tr></table></figure><ul><li>flex-wrap 是否允许子元素换行显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: nowrap;        默认不换行</span><br><span class="line">flex-wrap: wrap;          换行</span><br><span class="line">flex-wrap: wrap-reverse;  换行并反向显示</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//demo 水平垂直对齐三条属性就搞定</span><br><span class="line">html,body&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">#app&#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>flex-flow  简写属性 弹性流 flex-direction 和 flex-wrap 属性的简写</li></ul><h3 id="子元素-伸缩项目"><a href="#子元素-伸缩项目" class="headerlink" title="子元素-伸缩项目"></a>子元素-伸缩项目</h3><ul><li>flex: 1或2等无单位的数值，表示这个子元素占几份父元素的空间，当然子元素也可以指定宽度。简写属性， 是flex-grow、 flex-shrink 和 flex-basis 的简写。</li><li>order: -1或1、2等无单位的数值，表示子元素的排列顺序，数值越小排列越靠前</li><li>justify-self: 对齐主轴方向的某个项目</li><li>align-self 对齐侧轴方向的单个项目</li></ul><h3 id="扩展css属性"><a href="#扩展css属性" class="headerlink" title="扩展css属性"></a>扩展css属性</h3><ul><li>min-width: 如500px; 盒子可伸缩最小宽度</li><li>max-width: 如1000px; 盒子可伸缩最大宽度</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-flex/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-animation</title>
      <link>https://shulu520.com/css3/css3-animation/</link>
      <guid>https://shulu520.com/css3/css3-animation/</guid>
      <pubDate>Thu, 18 Jul 2019 04:34:45 GMT</pubDate>
      <description>
      
        硅谷css3-动画-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="动画定义-关键帧-keyframes"><a href="#动画定义-关键帧-keyframes" class="headerlink" title="动画定义 关键帧@keyframes"></a>动画定义 关键帧@keyframes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@keyframes animiationName&#123;</span><br><span class="line">  keyframes-selector&#123;</span><br><span class="line">      css-style;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animiationName:必写项，定义动画的名称</span><br><span class="line">keyframes-selector：必写项，动画持续时间的百分比,两个状态点的时候，可以用from、to,多组动画状态时使用百分比。</span><br><span class="line">  from：0%</span><br><span class="line">  to：100%</span><br><span class="line">css-style：css声明</span><br></pre></td></tr></table></figure><h2 id="动画使用-animation"><a href="#动画使用-animation" class="headerlink" title="动画使用 animation"></a>动画使用 animation</h2><ul><li>animation属性是一个简写属性形式: （可以用来描述可动画的属性）</li><li>可动画属性的列表：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties</a>        </li></ul><h3 id="简写属性animation"><a href="#简写属性animation" class="headerlink" title="简写属性animation"></a>简写属性animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">animation：</span><br><span class="line">  animation-name             动画名称</span><br><span class="line">  animation-duration         持续时间</span><br><span class="line">  animation-timing-function  速度曲线 (同过渡)</span><br><span class="line">  animation-delay            延时执行</span><br><span class="line">  animation-iteration-count  执行次数</span><br><span class="line">  animation-direction        动画方向</span><br><span class="line"></span><br><span class="line">  animation-fill-mode        </span><br><span class="line">    设置动画在执行之前和之后如何将样式应用于其目标。值forwards可以使其保持最终状态而不是恢复到原始状态(默认)</span><br><span class="line"></span><br><span class="line">  animation-play-state       设置动画状态    </span><br><span class="line">    running 当前动画正在运行。</span><br><span class="line">    paused 当前动画以被停止。</span><br></pre></td></tr></table></figure><ul><li>在每个动画定义中，顺序很重要：可以被解析为 <time>的第一个值被分配给animation-duration, 第二个分配给 animation-delay。</time></li></ul><h3 id="无缝滚动"><a href="#无缝滚动" class="headerlink" title="无缝滚动"></a>无缝滚动</h3><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-animation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-transform</title>
      <link>https://shulu520.com/css3/css3-transform/</link>
      <guid>https://shulu520.com/css3/css3-transform/</guid>
      <pubDate>Thu, 18 Jul 2019 04:33:48 GMT</pubDate>
      <description>
      
        硅谷css3-2D&amp;3D变形-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><ul><li>transform 属性 , 只对 <strong>block</strong> 级元素生效！</li></ul><h2 id="transform-2D"><a href="#transform-2D" class="headerlink" title="transform 2D"></a>transform 2D</h2><h3 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转 rotate"></a>旋转 rotate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform:rotate(angle/弧度);   </span><br><span class="line">正值:顺时针旋转  rotate(360deg/2Π)</span><br><span class="line">负值:逆时针旋转  rotate(-360deg/-2Π)</span><br><span class="line">只能设单值。正数表示顺时针旋转，负数表示逆时针旋转</span><br></pre></td></tr></table></figure><h3 id="平移-translate"><a href="#平移-translate" class="headerlink" title="平移 translate"></a>平移 translate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X方向平移:transform:  translateX(tx)</span><br><span class="line">Y方向平移:transform:  translateY(ty) </span><br><span class="line">二维平移：transform:  translate(tx[, ty])； 如果ty没有指定，它的值默认为0。</span><br><span class="line"> </span><br><span class="line">可设单值，也可设双值。</span><br><span class="line">正数表示XY轴正向位移，负数为反向位移。设单值表示只X轴位移，Y轴坐标不变，</span><br><span class="line">例如transform: translate(100px);等价于transform: translate(100px,0);</span><br><span class="line"></span><br><span class="line">百分比：</span><br><span class="line">translateX(50%) 向右平移自己宽度的一半</span><br></pre></td></tr></table></figure><h3 id="拓展-定位的盒子居中对齐-优美写法"><a href="#拓展-定位的盒子居中对齐-优美写法" class="headerlink" title="拓展-定位的盒子居中对齐-优美写法"></a>拓展-定位的盒子居中对齐-优美写法</h3><ul><li>定位的盒子居中对齐优美写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%; //父级高度的50%</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);//自己宽高的50%，无需手动计算</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>定位的盒子居中对齐传统写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">写法一：</span><br><span class="line">/* </span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-top: -150px;</span><br><span class="line">  margin-left: -150px;</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125; </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">写法二：</span><br><span class="line">/*</span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  margin: auto;</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125; </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="倾斜-skew"><a href="#倾斜-skew" class="headerlink" title="倾斜 skew"></a>倾斜 skew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">transform:skewX(45deg);</span><br><span class="line">X方向倾斜:transform:  skewX(angle)</span><br><span class="line">  skewX(45deg):参数值以deg为单位 代表与y轴之间的角度</span><br><span class="line"></span><br><span class="line">Y方向倾斜:transform:  skewY(angle)</span><br><span class="line">  skewY(45deg):参数值以deg为单位 代表与x轴之间的角度</span><br><span class="line"></span><br><span class="line">二维倾斜:transform:  skew(ax[, ay]);  如果ay未提供，在Y轴上没有倾斜</span><br><span class="line">  skew(45deg,15deg):参数值以deg为单位 第一个参数代表与y轴之间的角度</span><br><span class="line">                                                                第二个参数代表与x轴之间的角度</span><br><span class="line">  单值时表示只X轴扭曲，Y轴不变，如transform: skew(30deg);等价于     transform: skew(30deg, 0);</span><br><span class="line">  考虑到可读性，不推荐用单值，应该用transform: skewX(30deg);。skewY表示只Y轴扭曲，X轴不变  </span><br><span class="line"></span><br><span class="line"> 正值:拉正斜杠方向的两个角</span><br><span class="line"> 负值:拉反斜杠方向的两个角</span><br></pre></td></tr></table></figure><h3 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放 scale"></a>缩放 scale</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">transform:scale(2);</span><br><span class="line">X方向缩放:transform:  scaleX(sx); </span><br><span class="line">Y方向缩放:transform:  scaleY(sy);</span><br><span class="line">二维缩放 :transform:  scale(sx[, sy]);  (如果sy 未指定，默认认为和sx的值相同)  </span><br><span class="line"></span><br><span class="line">要缩小请设0.01～0.99之间的值，要放大请设超过1的值。</span><br><span class="line">例如缩小一倍可以transform: scale(.5);</span><br><span class="line">  放大一倍可以transform: scale(2);</span><br><span class="line"></span><br><span class="line">如果只想X轴缩放，可以用scaleX(.5)相当于scale(.5, 1)。</span><br><span class="line">同理只想Y轴缩放，可以用scaleY(.5)相当于scale(1, .5)</span><br><span class="line"></span><br><span class="line">正值:缩放的程度</span><br><span class="line">负值:不推荐使用（有旋转效果）</span><br><span class="line">单值时表示只X轴,Y轴上缩放粒度一样，如transform: scale(2);等价于transform: scale(2,2);</span><br></pre></td></tr></table></figure><h3 id="基点的变换-transform-origin"><a href="#基点的变换-transform-origin" class="headerlink" title="基点的变换 transform-origin"></a>基点的变换 transform-origin</h3><ul><li>transform-origin 属性让你更改一个元素变形的基点。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  一个值：</span><br><span class="line">必须是&lt;length&gt;，&lt;percentage&gt;，或 left, center, right, top, bottom关键字中的一个。</span><br><span class="line"></span><br><span class="line">  两个值：</span><br><span class="line">其中一个必须是&lt;length&gt;，&lt;percentage&gt;，或left, center, right关键字中的一个。</span><br><span class="line">另一个必须是&lt;length&gt;，&lt;percentage&gt;，或top, center, bottom关键字中的一个。</span><br><span class="line"></span><br><span class="line">  三个值：</span><br><span class="line">前两个值和只有两个值时的用法相同。</span><br><span class="line">第三个值必须是&lt;length&gt;。它始终代表Z轴偏移量。</span><br></pre></td></tr></table></figure><h2 id="transform-3D"><a href="#transform-3D" class="headerlink" title="transform 3D"></a>transform 3D</h2><h3 id="3D缩放"><a href="#3D缩放" class="headerlink" title="3D缩放"></a>3D缩放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform: scaleZ(number)</span><br><span class="line">transform: scale3d(scaleX,scaleY,scaleZ);</span><br><span class="line"> </span><br><span class="line">如果只设置scaleZ(number)，你会发现元素并没有被扩大或压缩，scaleZ(number)需要和translateZ(length)配合使用，number乘以length得到的值，是元素沿Z轴移动的距离，从而使得感觉被扩大或压缩</span><br></pre></td></tr></table></figure><h3 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CSS3中的3D旋转主要包括四个功能函数</span><br><span class="line">rotateX(angle)</span><br><span class="line">    </span><br><span class="line">rotateY(angle)</span><br><span class="line">    </span><br><span class="line">rotateZ(angle)等价于rotate(angle)</span><br><span class="line">    </span><br><span class="line">rotate3d(x,y,z,angle)</span><br><span class="line">x, y, z分别接受一个数值(number),用来计算矢量方向(direction vector)，矢量方向是三维空间中的一条线, 从坐标系原点到x, y, z值确定的那个点，元素围绕这条线旋转angle指定的值</span><br></pre></td></tr></table></figure><h3 id="3D平移"><a href="#3D平移" class="headerlink" title="3D平移"></a>3D平移</h3><ul><li>translateZ  它不能是百分比 值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transform: translateZ(length)是3D Transformaton特有的，其他两个2D中就有</span><br><span class="line"></span><br><span class="line">translateZ  它不能是百分比 值</span><br><span class="line"></span><br><span class="line">transform: translate3d(translateX,translateY,translateZ);</span><br></pre></td></tr></table></figure><h3 id="景深perspective"><a href="#景深perspective" class="headerlink" title="景深perspective"></a>景深perspective</h3><ul><li><p>景深是指相机对焦点前后相对清晰的成像范围。在光学中，尤其是录影或是摄影，是一个描述在空间中，可以清楚成像的距离范围。虽然透镜只能够将光聚 到某一固定的距离，远离此点则会逐渐模糊，但是在某一段特定的距离内，影像模糊的程度是肉眼无法察觉的，这段距离称之为景深。</p></li><li><p>简单的理解，景深就是我们的肉眼距离显示器的距离，景深越大，元素离我们越远，效果就不好，在我们CSS3中，perspective用于激活一个3D空间，属性值就是景深大小（默认none无景深）</p></li><li><p>应用景深的元素称为“舞台元素”，舞台元素的所有后代元素都会受影响，（如果后代元素中也添加了perspective属性，效果会叠加而不是覆盖）</p></li><li><p>perspective、perspective-origin<strong>设置在父元素上</strong>，对后代元素起作用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transform: perspective(depth);</span><br><span class="line">depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。</span><br><span class="line"></span><br><span class="line">1000px被认为是个正常值</span><br><span class="line">若使用perspective()函数，那么他必须被放置在transform属性的首位，如果放在其他函数之后，则会被忽略</span><br><span class="line"></span><br><span class="line">perspective: depth;</span><br><span class="line">同perspective()函数一样，depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。他们唯一的区别是，perspective属性是被用于元素的后代元素，而不是元素本身；就是说，为某个元素设置perspective属性后，是对这个元素的子元素起作用，而不是这个元素本身。</span><br><span class="line"></span><br><span class="line">perspective-origin</span><br><span class="line">同perspective属性，也是设置在父元素上，对后代元素起作用。 这个属性来设置你在X, Y轴坐标确定的那个点来看这个元素，Z轴是被perspective属性设置的</span><br></pre></td></tr></table></figure><ul><li>1000px被认为是个正常值</li><li>若使用perspective()函数，那么他必须被放置在transform属性的首位，如果放在其他函数之后，则会被忽略</li><li>perspective属性是设置在容器被作用于后代元素，而不是容器元素本身</li></ul><h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><ul><li><strong>此功能某些浏览器尚在开发中</strong></li><li>属性 backface-visibility 指定当元素背面朝向观察者时是否可见。</li><li>visible 背面朝向用户时可见。</li><li>hidden 背面朝向用户时不可见。</li></ul><h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><ul><li><strong>此功能某些浏览器尚在开发中</strong></li><li>属性 transform-style 设置元素的子元素是位于 3D 空间中还是平面中。</li><li>flat 设置元素的子元素位于该元素的平面中。</li><li>preserve-3d 指示元素的子元素应位于 3D 空间中。</li></ul><h3 id="灭点"><a href="#灭点" class="headerlink" title="灭点"></a>灭点</h3><ul><li>指的是立体图形各条边的延伸线所产生的相交点。透视点的消失点</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-transform/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-transition</title>
      <link>https://shulu520.com/css3/css3-transition/</link>
      <guid>https://shulu520.com/css3/css3-transition/</guid>
      <pubDate>Wed, 17 Jul 2019 03:24:42 GMT</pubDate>
      <description>
      
        硅谷css3-过渡-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h2><h3 id="简写属性transition"><a href="#简写属性transition" class="headerlink" title="简写属性transition"></a>简写属性transition</h3><ul><li>transition是一个简写属性</li><li>CSS 过渡 由简写属性 transition 定义是最好的方式，可以避免属性值列表长度不一，节省调试时间 </li></ul><h3 id="默认值："><a href="#默认值：" class="headerlink" title="默认值："></a>默认值：</h3><ul><li>transition-delay: 0s 属性规定了在过渡效果开始作用之前需要等待的时间。</li><li>transition-duration: 0s 属性以秒或毫秒为单位指定过渡动画所需的时间。</li><li>transition-property: all 默认值为 all，表示所有可被动画的属性都表现出过渡动画</li><li>transition-timing-function: ease 通过这个函数会建立一条加速度曲线，因此在整个transition变化过程中，变化速度可以不断改变</li></ul><h3 id="transition-timing-function属性值"><a href="#transition-timing-function属性值" class="headerlink" title="transition-timing-function属性值"></a>transition-timing-function属性值</h3><ol><li>ease：（加速然后减速）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).</li><li>linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).</li><li>ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).</li><li>ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).</li><li>ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)</li><li>cubic-bezier： 贝塞尔曲线</li><li>step-start：等同于steps(1,start)</li></ol><ul><li>step-end：等同于steps(1,end)</li><li>steps(<integer>,[,[start|end]]?)</integer></li><li>第一个参数：必须为正整数，指定函数的步数</li><li>第二个参数：指定每一步的值发生变化的时间点（默认值end）</li></ul><h3 id="当属性值的列表长度不一致时"><a href="#当属性值的列表长度不一致时" class="headerlink" title="当属性值的列表长度不一致时"></a>当属性值的列表长度不一致时</h3><ul><li>要过渡的属性的个数与对应的给出的时间列表长度不一致时，不够的时候，关于时间的会重复列表，关于transition-timing-function的时候使用的是默认值ease</li><li>超出的情况下是会被全部截掉的</li></ul><h3 id="检测过渡是否完成–争对属性而言的"><a href="#检测过渡是否完成–争对属性而言的" class="headerlink" title="检测过渡是否完成–争对属性而言的"></a>检测过渡是否完成–争对属性而言的</h3><ul><li>当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend, 在 WebKit 下是 webkitTransitionEnd</li><li>每一个拥有过渡的<strong>属性</strong>在其完成过渡时都会触发一次transitionend事件</li><li>在transition完成前设置 display: none，事件同样不会被触发</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在transition属性中，各个值的书写顺序是很重要的：第一个可以解析为时间的值会被赋值给transition-duration，第二个可以解析为时间的值会被赋值给transition-delay</li><li>关于时间要带单位</li></ul><h3 id="推荐抒写顺序"><a href="#推荐抒写顺序" class="headerlink" title="推荐抒写顺序"></a>推荐抒写顺序</h3><ul><li>过渡时间  过渡样式  过渡形式  延迟时间 </li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li>transition 可以不用厂商前缀，不过鉴于标准刚刚稳定，对于基于 Webkit的浏览器仍然需要厂商前缀。如果想兼容旧版本的浏览器那么也需要厂商前缀（例如Firefox 15 及之前版本, Opera 12 及之前版本)</li></ul><h3 id="拓展-贝塞尔曲线"><a href="#拓展-贝塞尔曲线" class="headerlink" title="拓展-贝塞尔曲线"></a>拓展-贝塞尔曲线</h3><ul><li>以物理学的角度看：贝塞尔曲线是一条位移时间曲线，其斜率表示速度。</li><li>transition: 3s all cubic-bezier(0.445, 0.05, 0.55, 0.95) 0s</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-transition/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

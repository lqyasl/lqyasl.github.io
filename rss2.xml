<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Tue, 25 Jun 2019 15:46:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>tcp</title>
      <link>https://shulu520.com/tcp/tcp/</link>
      <guid>https://shulu520.com/tcp/tcp/</guid>
      <pubDate>Tue, 25 Jun 2019 15:37:04 GMT</pubDate>
      <description>
      
        经典tcp三次握手四次挥手简述。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;什么时候，我们之间才会握手呢。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="tcp-三次握手"><a href="#tcp-三次握手" class="headerlink" title="tcp 三次握手"></a>tcp 三次握手</h2><ul><li><p>我们来聊聊三次握手，我们看到这个问题的时候，第一个疑问是，啥叫握手？俩机器之间怎么还能握手呢？我怎么没发现我家电脑有手？</p></li><li><p>第二个疑问是，为啥要三次？两次不行吗？我觉得握一下就行了~为啥要握三次？流氓~<br>那么现在我们有没有清楚为什么不能是两次握手了呢？</p></li><li>我们假设现在有A 和 B 两个之间要进行通信往来。</li><li>第一次握手只能让B知道A能发，第二次握手让A知道了B能收能发，但是这个时候B还不知道A能收，所以A需要发出信息，证明自己收到了B的回复~所以必须要三次才能让两台机器都知道对方能收能发。</li></ul><h2 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h2><ul><li>以一句话来说明四次挥手的根本目的，四次挥手核心就在于四个时间节点，分别是：<ul><li>A告诉B发完了，</li><li>B告诉A知道发完了，(接收还需要一段时间的)</li><li>B告诉A收完了，</li><li>A告诉B知道收完了。</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/tcp/tcp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-others</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-others/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-others/</guid>
      <pubDate>Tue, 25 Jun 2019 03:52:31 GMT</pubDate>
      <description>
      
        mooc js设计模式--其他一些不常用的模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br>&lt;!–more–</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><ul><li>代码演示</li></ul><p><code></code></p><p>// 执行者(前线士兵)<br>class Receiver {<br>  exec() {<br>    console.log(‘前线士兵 执行命令’)<br>  }<br>} </p><p>// 命令对象(由鼓手传递 开打开打！！！)<br>class Command {<br>  constructor(receiver) {<br>    this.receiver = receiver<br>  }<br>  cmd() {<br>    console.log(‘命令对象开始传递 “开打开打！！！”‘)<br>    this.receiver.exec()<br>  }<br>}</p><p>// 发布命令者(将军)<br>class Invoker {<br>  constructor(command) {<br>    this.command = command<br>  }<br>  invoke() {<br>    console.log(‘发布命令: 开打开打！！！’)<br>    this.command.cmd()<br>  }<br>}<br>// 士兵<br>let soldier = new Receiver()<br>// 鼓手<br>let drummer = new Command(soldier)<br>// 将军<br>let general = new Invoker(drummer)<br>// 将军发布命令<br>general.invoke()</p><p><code>`</code></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-others/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-prototype</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-prototype/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-prototype/</guid>
      <pubDate>Mon, 24 Jun 2019 09:19:51 GMT</pubDate>
      <description>
      
        mooc js 设计模式之原型模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const prototype = &#123;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return `first-name: $&#123;this.firstName&#125;, last-name: $&#123;this.lastName&#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  say() &#123;</span><br><span class="line">    console.log(&apos;love you&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 克隆自己，生成一个新的对象</span><br><span class="line">// Object.create()用到了原型模式的思想</span><br><span class="line">// 基于一个原型创建一个对象</span><br><span class="line"></span><br><span class="line">let x = Object.create(prototype)</span><br><span class="line">x.lastName = &apos;shulu&apos;</span><br><span class="line">x.firstName = &apos;lqy love&apos;</span><br><span class="line"></span><br><span class="line">x.say() //love you</span><br><span class="line">console.log(&apos;x.getName() :&apos;, x.getName())</span><br><span class="line"></span><br><span class="line">//打印为 x.getName() : first-name: lqy love, last-name: shulu</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-prototype/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-state</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-state/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-state/</guid>
      <pubDate>Mon, 24 Jun 2019 02:24:23 GMT</pubDate>
      <description>
      
        mooc js设计模式之状态模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;莫辜负这仅有一次的人生。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="状态模式介绍"><a href="#状态模式介绍" class="headerlink" title="状态模式介绍"></a>状态模式介绍</h2><ul><li>一个对象有状态变化</li><li>每次状态变化都会触发一个逻辑</li><li><p>不能总是用if…else来控制</p></li><li><p>交通信号灯不同颜色的变化</p></li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li><p>有限状态机(finite)</p><ul><li>有限个状态，以及在这些个状态之间的变化</li><li>开源的库 javascript-state-machine</li></ul></li><li><p>写一个简单的Promise</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">// 收藏/取消收藏例子</span><br><span class="line">import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br></pre></td></tr></table></figure><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>将状态对象和主题对象分离，状态的变化逻辑单独处理</li><li>符合开放封闭原则</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-state/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-iterator</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-iterator/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-iterator/</guid>
      <pubDate>Sun, 23 Jun 2019 13:48:55 GMT</pubDate>
      <description>
      
        mooc js 设计模式之迭代器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><strong>顺序访问一个集合</strong></li><li>使用者无需知道内部的结构(封装)</li><li><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现-自己写的初级的-后面es6提供的完善的-for-of"><a href="#代码实现-自己写的初级的-后面es6提供的完善的-for-of" class="headerlink" title="代码实现(自己写的初级的 后面es6提供的完善的 for of)"></a>代码实现(自己写的初级的 后面es6提供的完善的 for of)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 迭代器(遍历器)</span><br><span class="line">class Iterator &#123;</span><br><span class="line">  constructor(container) &#123;</span><br><span class="line">    this.list = container.list</span><br><span class="line">    this.index = 0</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    if (this.hasNext()) &#123;</span><br><span class="line">      return this.list[this.index++]</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    if (this.index &gt;= this.list.length) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125; </span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 迭代器的容器</span><br><span class="line">class Container &#123;</span><br><span class="line">  constructor(list) &#123;</span><br><span class="line">    this.list = list</span><br><span class="line">  &#125;</span><br><span class="line">  getIterator() &#123;</span><br><span class="line">    return new Iterator(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr = [1,2,3,4,5,6]</span><br><span class="line">let container = new Container(arr)</span><br><span class="line">let iterator = container.getIterator()</span><br><span class="line"></span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">  console.log(&apos;iterator.next() :&apos;, iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"></span><br><span class="line"> iterator.next() : 1 </span><br><span class="line"> iterator.next() : 2 </span><br><span class="line"> iterator.next() : 3 </span><br><span class="line"> iterator.next() : 4 </span><br><span class="line"> iterator.next() : 5 </span><br><span class="line"> iterator.next() : 6 </span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="es6-Iterator"><a href="#es6-Iterator" class="headerlink" title="es6 Iterator"></a>es6 Iterator</h2><ul><li><p>有序集合的数据如:</p><ul><li>Array </li><li>Map </li><li>Set </li><li>String </li><li>TypedArray </li><li>arguments</li><li>Nodelist </li></ul></li><li><p>以上数据类型，都有[Symbol.iterator]这个属性 </p></li><li>属性值是函数，执行函数返回一个迭代器</li><li>这个迭代器就有next方法可以顺序迭代子元素</li><li>可以运行Array.prototype[Symbol.iterator]来测试</li><li>注意 object 不是有序集合 可以用Map代替</li></ul><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//封装一个简单的each方法</span><br><span class="line">function each (data) &#123;</span><br><span class="line">  //data是可遍历的 即data[Symbol.iterator]有值</span><br><span class="line">  for(let item of data) &#123;</span><br><span class="line">    console.log(&apos;item :&apos;, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试几种可遍历的数据类型</span><br><span class="line">let str = &apos;love&apos;</span><br><span class="line">let arr = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">let map = new Map()</span><br><span class="line">map.set(0, &quot;zero&quot;)</span><br><span class="line">map.set(1, &quot;one&quot;)</span><br><span class="line"></span><br><span class="line">let set = new Set([6,7,8,9])</span><br><span class="line"></span><br><span class="line">each(str)</span><br><span class="line">each(arr)</span><br><span class="line">each(map)</span><br><span class="line">each(set)</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> item : l </span><br><span class="line"> item : o </span><br><span class="line"> item : v </span><br><span class="line"> item : e </span><br><span class="line"></span><br><span class="line"> item : 1 </span><br><span class="line"> item : 2 </span><br><span class="line"> item : 3 </span><br><span class="line"> item : 4 </span><br><span class="line"></span><br><span class="line"> item : [ 0, &apos;zero&apos; ] </span><br><span class="line"> item : [ 1, &apos;one&apos; ] </span><br><span class="line"></span><br><span class="line"> item : 6 </span><br><span class="line"> item : 7 </span><br><span class="line"> item : 8 </span><br><span class="line"> item : 9</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="Map-数据结构"><a href="#Map-数据结构" class="headerlink" title="Map 数据结构"></a>Map 数据结构</h2><ul><li>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</li><li>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</li><li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li><li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li><li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li><li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Obj- ect.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li><li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-iterator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-observer</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-observer/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-observer/</guid>
      <pubDate>Sat, 22 Jun 2019 14:45:37 GMT</pubDate>
      <description>
      
        mooc js设计模式之观察者模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>前端运用最广泛的设计模式</li><li>当一个对象被修改时，则会自动通知它的依赖对象。</li><li>注意，不一定是一对多哦，也可以一对一的。</li><li><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 主题，保存状态，状态发生变化后触发所有观察者对象</span><br><span class="line">class Subject &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.state = 0</span><br><span class="line">    this.observers = []</span><br><span class="line">  &#125;</span><br><span class="line">  getState() &#123;</span><br><span class="line">    return this.state</span><br><span class="line">  &#125;</span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    this.state = state</span><br><span class="line">    this.notifyAllObservers()</span><br><span class="line">  &#125;</span><br><span class="line">  // 通知所有的观察者</span><br><span class="line">  notifyAllObservers() &#123;</span><br><span class="line">    this.observers.forEach((observer) =&gt; &#123;</span><br><span class="line">      observer.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 添加新的观察者</span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    this.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 观察者</span><br><span class="line">class Observer &#123;</span><br><span class="line">  constructor(name, subject) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.subject = subject</span><br><span class="line">    this.subject.attach(this)</span><br><span class="line">  &#125;</span><br><span class="line">  update() &#123;</span><br><span class="line">    console.log(`$&#123;this.name&#125; updated, now-state:$&#123;this.subject.getState()&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">let s = new Subject()</span><br><span class="line">let o1 = new Observer(&apos;o1&apos;, s)</span><br><span class="line">let o2 = new Observer(&apos;o2&apos;, s)</span><br><span class="line">let o3 = new Observer(&apos;o3&apos;, s)</span><br><span class="line">s.setState(1) </span><br><span class="line">s.setState(2)</span><br><span class="line">s.setState(3)</span><br><span class="line"></span><br><span class="line">/* //打印结果</span><br><span class="line"> o1 updated, now-state:1 </span><br><span class="line"> o2 updated, now-state:1 </span><br><span class="line"> o3 updated, now-state:1 </span><br><span class="line"> o1 updated, now-state:2 </span><br><span class="line"> o2 updated, now-state:2 </span><br><span class="line"> o3 updated, now-state:2 </span><br><span class="line"> o1 updated, now-state:3 </span><br><span class="line"> o2 updated, now-state:3 </span><br><span class="line"> o3 updated, now-state:3</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>网页事件绑定</li><li>Promise</li><li>jQuery callbacks</li><li>nodejs 自定义事件</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-observer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-proxy</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-proxy/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-proxy/</guid>
      <pubDate>Fri, 21 Jun 2019 12:36:54 GMT</pubDate>
      <description>
      
        mooc js设计模式之代理模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="代理模式简介"><a href="#代理模式简介" class="headerlink" title="代理模式简介"></a>代理模式简介</h2><ul><li><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li>科学上网</li><li>明星经纪人</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>网页事件代理</li><li>jQuery的 $.proxy()</li><li><p>es6的proxy</p></li><li><p>代码实现明星经纪人</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 明星</span><br><span class="line">let star = &#123;</span><br><span class="line">  name: &apos;shulu&apos;,</span><br><span class="line">  age: &apos;18&apos;,</span><br><span class="line">  phone: &apos;star: 18366666666&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 经纪人</span><br><span class="line">let agent = new Proxy(star, &#123;</span><br><span class="line">  get(target, key) &#123;</span><br><span class="line">    if (key === &apos;phone&apos;) &#123;</span><br><span class="line">      // 返回经纪人(代理)的电话</span><br><span class="line">      return &apos;agent: 12353434343&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    if (key === &apos;price&apos;) &#123;</span><br><span class="line">      // 明星不报价，由经纪人报价</span><br><span class="line">      return &apos;agent: 1232323$&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set(target, key, val) &#123;</span><br><span class="line">    if (key === &apos;customPrice&apos;) &#123;</span><br><span class="line">      if (val &lt; 10000) &#123;</span><br><span class="line">        // 最低价格</span><br><span class="line">        throw new Error(&apos;价格太低！&apos;)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        target[key] = val</span><br><span class="line">        return true </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&apos;agent.name :&apos;, agent.name) //agent.name : shulu</span><br><span class="line">console.log(&apos;agent.age :&apos;, agent.age) //agent.age : 18</span><br><span class="line"></span><br><span class="line">console.log(&apos;agent.phone :&apos;, agent.phone) //agent.phone : agent: 12353434343</span><br><span class="line">console.log(&apos;agent.price :&apos;, agent.price) //agent.price : agent: 1232323$</span><br><span class="line"></span><br><span class="line">agent.customPrice = 1212 //价格太低！</span><br><span class="line">agent.customPrice = 100000</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-proxy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>this</title>
      <link>https://shulu520.com/this/this/</link>
      <guid>https://shulu520.com/this/this/</guid>
      <pubDate>Fri, 21 Jun 2019 09:30:57 GMT</pubDate>
      <description>
      
        对this的全面认识总结。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;认识我自己。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>当前执行代码的环境对象  mdn权威解释</li></ul><h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><ul><li>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指向全局对象。</li></ul><h3 id="函数环境"><a href="#函数环境" class="headerlink" title="函数环境"></a>函数环境</h3><ul><li>在函数内部，this的值取决于函数被调用的方式。</li><li>如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法。方法来源即Function.prototype.call Function.prototype.bind</li><li><p>使用 call 和 apply 函数的时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。</p></li><li><p>箭头函数</p></li><li><p>它的this即它外层函数的this。</p></li><li><p>作为对象的方法</p></li><li><p>当函数作为对象里的方法被调用时，它们的 this是调用该函数的对象。</p></li><li><p>原型链中的 this</p></li><li><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。</p></li><li><p>getter 与 setter 中的 this 相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。作为构造函数</p></li><li><p>当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象。<br>作为一个DOM事件处理函数</p></li><li><p>当函数被用作事件处理函数时，它的this指向触发事件的元素。</p></li></ul><ul><li><p>setTimeout 关于”this”的问题 </p></li><li><p>当你向 setTimeout() (或者其他定时器函数)传递一个函数时,该函数中的this指向跟你的期望可能不同。</p></li><li><p>解释</p></li><li><p>由setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致，这些代码中包含的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined，这和所期望的this的值是不一样的。</p></li><li><p>即定时器函数是一个异步宏任务，在事件循环中会被分配到对应的任务队列中去等待执行，故执行栈即执行上下文环境即this不是你以为的原来的了。</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/this/this/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-decorator</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-decorator/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-decorator/</guid>
      <pubDate>Thu, 20 Jun 2019 09:02:00 GMT</pubDate>
      <description>
      
        mooc js设计模式之装饰器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></p></li><li><p><a href="https://segmentfault.com/a/1190000014495089" target="_blank" rel="noopener">大牛解读es7装饰器</a></p></li><li>为对象添加功能</li><li>不改变其原有的结构和功能</li><li>代码演示 画圆</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    console.log(&apos;画一个圆&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Decorator &#123;</span><br><span class="line">  constructor(circle) &#123;</span><br><span class="line">    this.circle = circle</span><br><span class="line">  &#125;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circle.draw()</span><br><span class="line">    this.setRedBorder(this.circle)</span><br><span class="line">  &#125;</span><br><span class="line">  setRedBorder(circle) &#123;</span><br><span class="line">    console.log(&apos;给圆设置红色的边框&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">let circle = new Circle()</span><br><span class="line">circle.draw() //画一个圆</span><br><span class="line"></span><br><span class="line">let dec = new Decorator(circle)</span><br><span class="line">dec.draw() //画一个圆 给圆设置红色的边框</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li>ES7 中的 decorator 同样借鉴了python语法糖，不过依赖于 ES5 的 Object.defineProperty 方法 。</li><li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</li><li>Object.defineProperty(obj, prop, descriptor)<ul><li>obj：要在其上定义属性的对象。</li><li>prop：要定义或修改的属性的名称。</li><li>descriptor：将被定义或修改的属性描述符。</li><li>返回值：被传递给函数的对象。</li></ul></li></ul><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><ul><li><p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。</p></li><li><p>数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。</p></li><li>存取描述符是由 getter-setter 函数对描述的属性。</li><li><p>描述符必须是这两种形式之一；不能同时是两者。</p></li><li><p>数据描述符和存取描述符均具有以下可选键值:</p><ul><li>configurable 可修改 布尔值</li><li>enumerable 可枚举 布尔值</li><li>value 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</li><li>writable 可写 布尔值</li><li>get 一个给属性提供 getter 的方法</li><li>set 一个给属性提供 setter 的方法</li></ul></li></ul><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><ul><li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>Object.assign(target, …sources)<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li><li>target<ul><li>目标对象。</li></ul></li><li>sources<ul><li>源对象。</li></ul></li><li>返回值<ul><li>目标对象。</li></ul></li></ul><h2 id="core-decorators装饰器库的使用"><a href="#core-decorators装饰器库的使用" class="headerlink" title="core-decorators装饰器库的使用"></a>core-decorators装饰器库的使用</h2><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-class-properties </span><br><span class="line"></span><br><span class="line">npm install --save-dev @babel/plugin-proposal-decorators</span><br><span class="line"></span><br><span class="line">npm install --save-dev babel-plugin-transform-decorators-legacy</span><br><span class="line"></span><br><span class="line">npm install --save-dev core-decorators</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当然还有以下依赖的支持</span><br><span class="line"></span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/plugin-proposal-class-properties&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/plugin-proposal-decorators&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.4.4&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.5&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.5&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.7.0&quot;,</span><br><span class="line">    &quot;core-decorators&quot;: &quot;^0.20.0&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>.babelrc文件的配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;@babel/preset-env&quot;, &#123;</span><br><span class="line">      &quot;useBuiltIns&quot;: &quot;usage&quot;,// 在每个文件中使用polyfill时，为polyfill添加特定导入。利用捆绑器只加载一次相同的polyfill。</span><br><span class="line">      &quot;modules&quot;: false,// 启用将ES6模块语法转换为其他模块类型，设置为false不会转换模块。</span><br><span class="line">      &quot;targets&quot;: &#123; //浏览器兼容</span><br><span class="line">        &quot;browsers&quot;: &quot;last 2 versions, not ie &lt;= 9&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel/plugin-proposal-decorators&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">          &quot;legacy&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [&quot;@babel/plugin-transform-runtime&quot;, &#123;</span><br><span class="line">      &quot;helpers&quot;: false</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单使用 1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; readonly &#125; from &apos;core-decorators&apos;</span><br><span class="line"></span><br><span class="line">class Demo &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    console.log(&apos;shulu&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let demo = new Demo()</span><br><span class="line">demo.sayName() //shulu</span><br><span class="line"></span><br><span class="line">demo.sayName = function () &#123;</span><br><span class="line">  console.log(&apos;lqy love shulu&apos;) //Uncaught TypeError: Cannot assign to read only property &apos;sayName&apos; of object &apos;#&lt;Demo&gt;&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单使用 2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; deprecate &#125; from &apos;core-decorators&apos;</span><br><span class="line"></span><br><span class="line">class Demo &#123;</span><br><span class="line">  </span><br><span class="line">  @deprecate(&apos;此方法即将废除&apos; ,&#123;url: &apos;https://shulu520.com&apos;&#125;)</span><br><span class="line">  getName() &#123;</span><br><span class="line">    console.log(&apos;lqy&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let demo = new Demo()</span><br><span class="line">demo.getName() //lqy   DEPRECATION Demo#getName: 此方法即将废除 See https://shulu520.com for more details.</span><br></pre></td></tr></table></figure><ul><li>还有多种好用的方法……</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-decorator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-adapter</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-adapter/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-adapter/</guid>
      <pubDate>Thu, 20 Jun 2019 07:13:22 GMT</pubDate>
      <description>
      
        mooc js设计模式之适配器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;江南的雨季，西北的惆怅。感君一回顾，思君朝与暮。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="设计模式之适配器介绍"><a href="#设计模式之适配器介绍" class="headerlink" title="设计模式之适配器介绍"></a>设计模式之适配器介绍</h2><ul><li><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p></li><li><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p></li><li><p>代码演示</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class OldStandard &#123;</span><br><span class="line">  oldRequest() &#123;</span><br><span class="line">    return &apos;老式标准插头&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Adapter &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.standard = new OldStandard()</span><br><span class="line">  &#125;</span><br><span class="line">  newRequest() &#123;</span><br><span class="line">    let info = this.standard.oldRequest()</span><br><span class="line">    return `新标准插头---&gt;适配器---&gt;$&#123;info&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let adater = new Adapter()</span><br><span class="line">let res = adater.newRequest()</span><br><span class="line">console.log(&apos;res :&apos;, res) //res : 新标准插头---&gt;适配器---&gt;老式标准插头</span><br></pre></td></tr></table></figure><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><ul><li>vue的computed计算属性</li></ul><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>将旧接口和使用者分离</li><li>开放封闭原则</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-adapter/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-singleton</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-singleton/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-singleton/</guid>
      <pubDate>Thu, 20 Jun 2019 04:07:58 GMT</pubDate>
      <description>
      
        mooc js 设计模式之单例模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;I love the World.</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><ul><li><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li><li>系统中唯一被使用</li><li>一个类只有一个实例</li><li>私有化构造函数，外部不能new 只能内部new !!!!!</li><li>instance实例是唯一被new出来的对象</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class SingleObject &#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    console.log(&apos;login&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">SingleObject.getInstance = (function() &#123;</span><br><span class="line">  let instance</span><br><span class="line">  return function() &#123;</span><br><span class="line">    if (!instance) &#123;</span><br><span class="line">      instance = new SingleObject()</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">let obj1 = SingleObject.getInstance()</span><br><span class="line">obj1.login() //login</span><br><span class="line"></span><br><span class="line">let obj2 = SingleObject.getInstance()</span><br><span class="line">obj2.login() //login</span><br><span class="line"></span><br><span class="line">console.log(&apos;obj1===obj2 :&apos;, obj1===obj2) //obj1===obj2 : true</span><br><span class="line"></span><br><span class="line">let obj3 = new SingleObject() //外部不能new,但是无法完全控制</span><br><span class="line">console.log(&apos;obj3===obj1 :&apos;, obj3===obj1) //obj3===obj1 : false</span><br></pre></td></tr></table></figure><h2 id="单例模式使用场景"><a href="#单例模式使用场景" class="headerlink" title="单例模式使用场景"></a>单例模式使用场景</h2><ul><li>jQuery 的 $</li><li>模拟登录框</li><li>购物车</li><li>vuex react 中的store</li><li>代码实现登录框</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class LoginForm &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.state = &apos;hide&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  show () &#123;</span><br><span class="line">    if (this.state === &apos;show&apos;) &#123;</span><br><span class="line">      console.log(&apos;已经显示&apos;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    this.state = &apos;show&apos;</span><br><span class="line">    console.log(&apos;已经登录成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  hide () &#123;</span><br><span class="line">    if (this.state === &apos;hide&apos;) &#123;</span><br><span class="line">      console.log(&apos;已经隐藏&apos;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    this.state = &apos;hide&apos;</span><br><span class="line">    console.log(&apos;已经隐藏成功&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">LoginForm.getInstance = (() =&gt; &#123;</span><br><span class="line">  let instance</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    if (!instance) &#123;</span><br><span class="line">      instance = new LoginForm()</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">let login1 = LoginForm.getInstance()</span><br><span class="line">login1.show() //已经登录成功</span><br><span class="line"></span><br><span class="line">let login2 = LoginForm.getInstance()</span><br><span class="line">login2.show() //已经显示</span><br><span class="line">login2.hide() //已经隐藏成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&apos;login1===login2 :&apos;, login1===login2)</span><br><span class="line">// login1===login2 : true</span><br><span class="line">// 这就说明login1 和login2是同一个实例</span><br></pre></td></tr></table></figure><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>符合单一职责原则，只实例化唯一的对象</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-singleton/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hotkey-vscode</title>
      <link>https://shulu520.com/hotkey/hotkey-vscode/</link>
      <guid>https://shulu520.com/hotkey/hotkey-vscode/</guid>
      <pubDate>Wed, 19 Jun 2019 09:04:23 GMT</pubDate>
      <description>
      
        vscode常用快捷键总结。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;如果你想要个和现在不同的人生，就必须去做你从未做过的事情。努力之后最坏的结果是失败，但不尝试的结果则是无止境的懊悔、怀疑和平庸。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="vscode-常用快捷键"><a href="#vscode-常用快捷键" class="headerlink" title="vscode 常用快捷键"></a>vscode 常用快捷键</h2><ul><li><p>上下移动一行： Alt+Up 或 Alt+Down</p></li><li><p>向上或向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down</p></li><li><p>同时选中所有匹配： Ctrl+Shift+L</p></li><li><p>Ctrl+D 下一个匹配的也被选中 </p></li><li><p>Alt + 单击  ：插入光标</p></li><li><p>Ctrl + F2    选择当前字的所有出现</p></li><li><p>ctrl  shift  k   删除整行</p></li><li><p>ctrl  shift  a   多行注释</p></li><li><p>ctrl  f     当前文件内搜索相关代码，终于找到这个功能了，哈哈，右上角会有弹框，其中有前后箭头，表示搜索的代码上一次、下一次出现的位置，点击直接会跳转到相应的位置，并且侧边上有相应的位置标识。</p></li><li><p>ctrl - 整体缩小</p></li><li><p>ctrl = 整体放大</p></li><li><p>文件/首选项/设置 搜索zoom 根据配置 可以更精细的对大小进行操作 ctrl 加滚轮</p></li><li><p>col 选第一个 即console.log()的快捷键 且效果很棒</p></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/hotkey/hotkey-vscode/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-factory</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-factory/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-factory/</guid>
      <pubDate>Wed, 19 Jun 2019 08:43:18 GMT</pubDate>
      <description>
      
        mooc js设计模式之工厂模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;愿你做一个快乐的小仙女。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><a href="https://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>方法定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Product产品生产流水线</span><br><span class="line">class Product &#123;</span><br><span class="line">  constructor (name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    return `my name is $&#123;this.name&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Creator 工厂</span><br><span class="line">class Creator &#123;</span><br><span class="line">  create (name) &#123;</span><br><span class="line">    return new Product(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  普通调用 用户直接面对某一流水线，要产品</span><br><span class="line">  用户每次拿产品都得直接与产品流水线打交道</span><br><span class="line">*/ </span><br><span class="line">// 书写极其麻烦</span><br><span class="line">const p1 = new Product(&apos;phone&apos;)</span><br><span class="line">const p2 = new Product(&apos;book&apos;)</span><br><span class="line">console.log(&apos;p1 :&apos;, p1)</span><br><span class="line">console.log(&apos;p2 :&apos;, p2)</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">  工厂函数 用户直接面对生产厂家，要产品</span><br><span class="line">  也就是说，用户无需知道其内部复杂生产过程</span><br><span class="line">*/</span><br><span class="line">// 工厂函数将生产流水线封装起来，只对外暴露接口供用户使用</span><br><span class="line">const creator = new Creator()//实例化一个工厂</span><br><span class="line"></span><br><span class="line">const pa = creator.create(&apos;boy&apos;)</span><br><span class="line">const pb = creator.create(&apos;girl&apos;)</span><br><span class="line">console.log(&apos;pa :&apos;, pa)</span><br><span class="line">console.log(&apos;pb :&apos;, pb)</span><br></pre></td></tr></table></figure><ul><li><p>工厂函数的例子</p><ul><li>jQuery</li><li>react.createElement</li><li>vue异步组件</li></ul></li><li><p>验证设计原则</p><ul><li>构造函数和创建者分离</li><li>符合开放封闭原则</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-factory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-design-philosophy</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-design-philosophy/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-design-philosophy/</guid>
      <pubDate>Tue, 18 Jun 2019 09:21:30 GMT</pubDate>
      <description>
      
        mooc js设计模式之设计原则笔记。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="unix-linux设计哲学"><a href="#unix-linux设计哲学" class="headerlink" title="unix/linux设计哲学"></a>unix/linux设计哲学</h2><ul><li>小即是美</li><li>让每一个程序只做好一件事</li><li>快速建立原型 利于快速迭代</li><li>舍弃高效率而取可移植性 复用性</li><li>采用纯文本来存贮数据 可读性好</li><li>软件复用</li><li>使用shell脚本 </li><li>避免强制性的用户界面 </li><li>让每个程序都称为过滤器 中间件</li><li>允许用户定制环境 个性化</li><li>操作系统内核小而轻量化</li><li>使用小写字母并简写</li><li>沉默是金 没有消息是最好的消息</li><li>各部分之和大于整体 模块化</li><li>寻求90%的解决方案 不必追求完美</li></ul><h2 id="SOLID-五大设计原则"><a href="#SOLID-五大设计原则" class="headerlink" title="SOLID 五大设计原则"></a>SOLID 五大设计原则</h2><ul><li><p>S 单一职责原则</p><ul><li>每个程序之做好一件事</li><li>功能太复杂就拆分，每个部分保持独立</li></ul></li><li><p>O 开放封闭原则</p><ul><li>对扩展开放 对修改封闭</li><li>增加需求时 扩展新代码 而非修改已有的代码</li></ul></li><li><p>L 李氏置换原则</p><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li></ul></li><li><p>I 接口独立原则</p><ul><li>保持接口的单一独立 避免出现胖接口</li></ul></li><li><p>D 依赖导致原则</p><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口 而不关注具体类的实现</li></ul></li></ul><h2 id="为什么使用面向对像"><a href="#为什么使用面向对像" class="headerlink" title="为什么使用面向对像"></a>为什么使用面向对像</h2><ul><li>面向对象 – 数据结构化</li><li>对于计算机 结构化才是简单的</li><li>编程 应该简单抽象</li></ul><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><ul><li>即统一建模语言</li><li><p>箭头表示<strong>依赖关系</strong>， <strong>指向谁即依赖谁</strong></p></li><li><p>泛化 即继承 </p><ul><li>空心箭头 由子类指向父类</li></ul></li><li><p>关联 即引用</p><ul><li>实心箭头 由引用者指向被引用者</li></ul></li><li><p>类图 即一个表格 三行格子</p><ul><li>第一格为类 构造函数</li><li>第二行为 属性：类型</li><li>第三行为 方法：返回值</li></ul></li></ul><h2 id="23种设计模式总览"><a href="#23种设计模式总览" class="headerlink" title="23种设计模式总览"></a>23种设计模式总览</h2><ul><li><p>创建型</p><ul><li>工厂模式</li><li>单例模式</li><li>原型模式</li></ul></li><li><p>结构型</p><ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul></li><li><p>行为型</p><ul><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>迭代器模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul><h2 id="面试题之弟弟打车"><a href="#面试题之弟弟打车" class="headerlink" title="面试题之弟弟打车"></a>面试题之弟弟打车</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// Car 普通车 </span><br><span class="line">class Car &#123;</span><br><span class="line">  constructor (name, number) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.number = number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 慢车</span><br><span class="line">class SlowCar extends Car &#123;</span><br><span class="line">  constructor(name, number) &#123;</span><br><span class="line">    super(name, number)</span><br><span class="line">    this.price = 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 快车</span><br><span class="line">class FastCar extends Car &#123;</span><br><span class="line">  constructor(name, number) &#123;</span><br><span class="line">    super(name, number)</span><br><span class="line">    this.price = 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 旅途行程 （假定行程为5公里）</span><br><span class="line">class Trip &#123;</span><br><span class="line">  constructor(car) &#123;</span><br><span class="line">    this.car = car</span><br><span class="line">  &#125;</span><br><span class="line">  start () &#123;</span><br><span class="line">    console.log(`行程开始，名称：$&#123;this.car.name&#125;,车牌号：$&#123;this.car.number&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">  end () &#123;</span><br><span class="line">    console.log(`行程结束，一共$&#123;this.car.price * 5&#125;元`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line"></span><br><span class="line">let car = new FastCar(&apos;兰博基尼&apos;, 18)</span><br><span class="line"></span><br><span class="line">let trip = new Trip(car)</span><br><span class="line"></span><br><span class="line">trip.start() //行程开始，名称：兰博基尼,车牌号：18</span><br><span class="line"></span><br><span class="line">trip.end() //行程结束，一共10元</span><br></pre></td></tr></table></figure><h2 id="面试题之停车场"><a href="#面试题之停车场" class="headerlink" title="面试题之停车场"></a>面试题之停车场</h2><p><img src="https://www.z4a.net/images/2019/06/19/part.png" alt="UML类图"></p><ul><li>代码实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">// 车</span><br><span class="line">class Car &#123;</span><br><span class="line">  constructor (num) &#123;</span><br><span class="line">    this.num = num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 摄像头</span><br><span class="line">class Camera &#123;</span><br><span class="line">  shot (car) &#123;//拍摄</span><br><span class="line">    return &#123;</span><br><span class="line">      num: car.num,</span><br><span class="line">      inTime: Date.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 出口显示屏</span><br><span class="line">class Screen &#123;</span><br><span class="line">  show (car, inTime) &#123;</span><br><span class="line">    console.log(`车牌号：$&#123;car.num&#125;`)</span><br><span class="line">    console.log(`停车时间：$&#123;Date.now() - inTime&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 停车场</span><br><span class="line">class Park &#123;</span><br><span class="line">  constructor (floors) &#123;</span><br><span class="line">    this.floors = floors || []</span><br><span class="line">    this.camera = new Camera()</span><br><span class="line">    this.screen = new Screen()</span><br><span class="line">    this.carList = &#123;&#125; // 存储摄像头拍摄的车辆信息</span><br><span class="line">  &#125;</span><br><span class="line">  in (car) &#123;</span><br><span class="line">    // 通过摄像头获取信息</span><br><span class="line">    const info = this.camera.shot(car)</span><br><span class="line">    // 停到某个停车位</span><br><span class="line">    </span><br><span class="line">    const i = Number.parseInt(Math.random() * 100 % 100)</span><br><span class="line">    // 某一层</span><br><span class="line">    const j = Number.parseInt(Math.random() * 3)</span><br><span class="line">    const place = this.floors[j].places[i]</span><br><span class="line">    place.in() //车已停入某一车位</span><br><span class="line">    // 记录信息</span><br><span class="line">    info.place = place</span><br><span class="line">    this.carList[car.num] = info</span><br><span class="line">  &#125;</span><br><span class="line">  out (car) &#123;</span><br><span class="line">    // 获取车辆信息</span><br><span class="line">    const info = this.carList[car.num]</span><br><span class="line">    // 将对应的停车位清空</span><br><span class="line">    info.place.out()</span><br><span class="line">    // 显示时间</span><br><span class="line">    this.screen.show(car, info.inTime)</span><br><span class="line">    // 删除记录</span><br><span class="line">    // info = null</span><br><span class="line">  &#125;</span><br><span class="line">  emptyNum () &#123;</span><br><span class="line">    return this.floors.map(floor =&gt; &#123;</span><br><span class="line">      return `第$&#123;floor.index&#125;层有$&#123;floor.emptyPlaceNum()&#125;个空位`</span><br><span class="line">    &#125;).join(&apos;\n&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 楼层</span><br><span class="line">class Floor &#123;</span><br><span class="line">  constructor (index, places) &#123;</span><br><span class="line">    this.index = index</span><br><span class="line">    this.places = places || []</span><br><span class="line">  &#125;</span><br><span class="line">  emptyPlaceNum () &#123;</span><br><span class="line">    let num = 0</span><br><span class="line">    this.places.forEach(place =&gt; &#123;</span><br><span class="line">      if (place.empty) &#123;</span><br><span class="line">        num += 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 车位</span><br><span class="line">class Place &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.empty = true</span><br><span class="line">  &#125;</span><br><span class="line">  in () &#123;</span><br><span class="line">    this.empty = false</span><br><span class="line">  &#125;</span><br><span class="line">  out () &#123;</span><br><span class="line">    this.empty = true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">// 初始化停车场</span><br><span class="line">const floors = []</span><br><span class="line">for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">  const places = []</span><br><span class="line">  for (let j = 0; j &lt; 100; j++) &#123;</span><br><span class="line">    places[j] = new Place()</span><br><span class="line">  &#125;</span><br><span class="line">  floors[i] = new Floor(i + 1, places)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const park = new Park(floors)</span><br><span class="line"></span><br><span class="line">// 初始化车辆</span><br><span class="line">const car1 = new Car(18)</span><br><span class="line">const car2 = new Car(22)</span><br><span class="line">const car3 = new Car(36)</span><br><span class="line"></span><br><span class="line">console.log(`$&#123;park.emptyNum()&#125;`)</span><br><span class="line">console.log(`第一辆车进入`)</span><br><span class="line">park.in(car1)</span><br><span class="line">console.log(`$&#123;park.emptyNum()&#125;`)</span><br><span class="line">console.log(`第二辆车进入`)</span><br><span class="line">park.in(car2)</span><br><span class="line">console.log(`$&#123;park.emptyNum()&#125;`)</span><br><span class="line">console.log(`第一辆车离开`)</span><br><span class="line">park.out(car1)</span><br><span class="line">console.log(`$&#123;park.emptyNum()&#125;`)</span><br><span class="line">console.log(`第二辆车离开`)</span><br><span class="line">park.out(car2)</span><br><span class="line">console.log(`$&#123;park.emptyNum()&#125;`)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-design-philosophy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-oop</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-oop/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-oop/</guid>
      <pubDate>Tue, 18 Jun 2019 02:58:30 GMT</pubDate>
      <description>
      
        mooc js设计模式之面向对象笔记。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;you are my baby.</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="webpack的配置-以支持es6的新语法"><a href="#webpack的配置-以支持es6的新语法" class="headerlink" title="webpack的配置 以支持es6的新语法"></a>webpack的配置 以支持es6的新语法</h2><ul><li>npm install webpack webpack-cli –save-dev –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li><li>在package.json中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;webpack --config ./webpack.dev.config.js --mode development&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">即在命令行里面运行npm run dev 即可运行webpack 的配置文件 我们更改了配置文件的默认名字 在这里指定他的配置文件为 ./webpack.dev.config.js 即可</span><br></pre></td></tr></table></figure><ul><li><p>npm install webpack-dev-server html-webpack-plugin –save-dev –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></li><li><p>将package.json中的webpack 改为webpack-dev-server 即为开启一个运行本地服务器</p></li></ul><p><a href="https://segmentfault.com/a/1190000018461758" target="_blank" rel="noopener">babel的es6语法插件解析</a></p><ul><li><p>npm install –save-dev babel-loader @babel/core @babel/preset-env –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></li><li><p>npm install –save-dev @babel/polyfill @babel/plugin-transform-runtime  –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></li></ul><h2 id="class-类-即模板"><a href="#class-类-即模板" class="headerlink" title="class 类  即模板"></a>class 类  即模板</h2><ul><li>封装 继承 多态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//创建类（构造函数）</span><br><span class="line">class Person &#123;</span><br><span class="line">  constructor (name) &#123; //属性 特征</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName () &#123;  //方法 函数</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建对象（实例）</span><br><span class="line">let p = new Person(&apos;shulu&apos;)</span><br><span class="line"></span><br><span class="line">alert(p.getName())</span><br></pre></td></tr></table></figure><h2 id="es6面向对象之继承"><a href="#es6面向对象之继承" class="headerlink" title="es6面向对象之继承"></a>es6面向对象之继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Person &#123;</span><br><span class="line">  constructor (name, age) &#123;</span><br><span class="line">    this.name = name,</span><br><span class="line">    this.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    return `my name is $&#123;this.name&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  getAge () &#123;</span><br><span class="line">    return `my age is $&#123;this.age&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子类 </span><br><span class="line">// 继承父类的属性、方法 并添加自己的属性和方法</span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">  constructor (name, age, number) &#123;</span><br><span class="line">    super(name, age)</span><br><span class="line">    this.number = number</span><br><span class="line">  &#125;</span><br><span class="line">  study () &#123;</span><br><span class="line">    return `my number is $&#123;this.number&#125;, and i am studying`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let s = new Student(&apos;shulu&apos;, 18, 23)</span><br><span class="line"></span><br><span class="line">alert(s.getName())</span><br><span class="line">alert(s.getAge())</span><br><span class="line">alert(s.study())</span><br></pre></td></tr></table></figure><h2 id="es6面向对象之封装"><a href="#es6面向对象之封装" class="headerlink" title="es6面向对象之封装"></a>es6面向对象之封装</h2><ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开发</li><li>es6 尚不支持， 用typescript来演示<br><a href="http://www.typescriptlang.org/play/" target="_blank" rel="noopener">trpescript网站测试代码</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Person &#123;</span><br><span class="line">  name //公开的属性</span><br><span class="line">  age</span><br><span class="line">  protected weight //受保护的属性，只有自己和子类可以访问，实例对象可以访问</span><br><span class="line">  constructor (name, age) &#123;</span><br><span class="line">    this.name = name,</span><br><span class="line">    this.age = age,</span><br><span class="line">    this.weight = &apos;120&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    return `my name is $&#123;this.name&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  getAge () &#123;</span><br><span class="line">    return `my age is $&#123;this.age&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子类 </span><br><span class="line">// 继承父类的属性、方法 并添加自己的属性和方法</span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">  number //公开的属性</span><br><span class="line">  private boyfriend //自己的私有的属性，只有自己才可以访问，自己的实例都不能用</span><br><span class="line">  constructor (name, age, number) &#123;</span><br><span class="line">    super(name, age)</span><br><span class="line">    this.number = number</span><br><span class="line">    this.boyfriend = &apos;lqy&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  study () &#123;</span><br><span class="line">    return `my 学号 is $&#123;this.number&#125;, and i am studying`</span><br><span class="line">  &#125;</span><br><span class="line">  getBoyfriend () &#123;</span><br><span class="line">    return `my boyfriend is $&#123;this.boyfriend&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  getWeight () &#123;</span><br><span class="line">    return `my weight is $&#123;this.weight&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let s = new Student(&apos;shulu&apos;, 18, 23)</span><br><span class="line"></span><br><span class="line">alert(s.getWeight()) //可以正常访问</span><br><span class="line">alert(s.boyfriend()) //报错 girlfriend只能在Student 里面自己使用</span><br></pre></td></tr></table></figure><h2 id="es6面向对象之多态"><a href="#es6面向对象之多态" class="headerlink" title="es6面向对象之多态"></a>es6面向对象之多态</h2><ul><li>多个子类可以继承一个父类，并扩展自己的方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Person &#123;</span><br><span class="line">  constructor (name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  getName () &#123;</span><br><span class="line">    return `my name is $&#123;this.name&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子类A </span><br><span class="line">class StudentA extends Person &#123;</span><br><span class="line">  constructor (name, number) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">    this.number = number</span><br><span class="line">  &#125;</span><br><span class="line">  study () &#123;</span><br><span class="line">    return `my 学号 is $&#123;this.number&#125;, and i am studying`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子类B</span><br><span class="line">class StudentB extends Person &#123;</span><br><span class="line">  constructor (name, number) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">    this.number = number</span><br><span class="line">  &#125;</span><br><span class="line">  study () &#123;</span><br><span class="line">    return `my 学号 is $&#123;this.number&#125;, and i am studying`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let s1 = new StudentA(&apos;shulu&apos;, 18)</span><br><span class="line">let s2 = new StudentB(&apos;lqy&apos;, 19)</span><br><span class="line"></span><br><span class="line">alert(s1.getName())</span><br><span class="line">alert(s1.study())</span><br><span class="line"></span><br><span class="line">alert(s2.getName())</span><br><span class="line">alert(s2.study())</span><br></pre></td></tr></table></figure><h2 id="面向对像实现jQuery的例子"><a href="#面向对像实现jQuery的例子" class="headerlink" title="面向对像实现jQuery的例子"></a>面向对像实现jQuery的例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class jQuery &#123;</span><br><span class="line">  constructor (selector) &#123;</span><br><span class="line">    let dom = Array.from(document.querySelectorAll(selector))</span><br><span class="line">    let len = dom ? dom.length : 0</span><br><span class="line">    dom.forEach((item, index) =&gt; &#123;</span><br><span class="line">      this[index] = item</span><br><span class="line">    &#125;)</span><br><span class="line">    this.len = len</span><br><span class="line">    this.selector = selector || &apos;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  append (node) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  addClass (className) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  html (data) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  // 好多的方法……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.$ = function (selector) &#123;</span><br><span class="line">  return new jQuery(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let $p = $(&apos;p&apos;) // p 标签选择器</span><br><span class="line">console.log($p)</span><br><span class="line">console.log($p.addClass)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-oop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>responsive-sites</title>
      <link>https://shulu520.com/responsive-sites/responsive-sites/</link>
      <guid>https://shulu520.com/responsive-sites/responsive-sites/</guid>
      <pubDate>Sun, 16 Jun 2019 11:23:58 GMT</pubDate>
      <description>
      
        慕课网响应式网站教程笔记。
      
      </description>
      
      <content:encoded><![CDATA[<p>&emsp;&emsp;梦终有你。</p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><ul><li>布局视口 就像一本书 大小固定 如960px 是设计图纸的大小</li><li>可视视口 就像放大镜 在它上面可以移动缩放 是设备屏幕的大小<ul><li>在这两种视口下，用户需要通过滑动缩放来查看整个页面的不同部分。</li></ul></li><li>理想视口 为了解决以上的问题而制定的视口。是布局视口在一个设备上的最佳尺寸。即让布局视口等于可视视口。</li></ul><p><a href="https://blog.csdn.net/qq_16339527/article/details/52996316" target="_blank" rel="noopener">大牛博客视口相关说明</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="爬虫协议robots-txt"><a href="#爬虫协议robots-txt" class="headerlink" title="爬虫协议robots.txt"></a>爬虫协议robots.txt</h2><ul><li>把“robots.txt”放在你网站的根目录，并确保他能让访问者（如搜索引擎）访问到。</li><li>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”，网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /admin/</span><br><span class="line">Sitemap: https://shulu520.com/sitemap.xml</span><br><span class="line">Sitemap: https://shulu520.com/sitemap.hxml</span><br></pre></td></tr></table></figure><h2 id="关于humans-txt"><a href="#关于humans-txt" class="headerlink" title="关于humans.txt"></a>关于humans.txt</h2><p><a href="http://humanstxt.org/ZH" target="_blank" rel="noopener">humans.txt官网</a></p><h3 id="这是什么？"><a href="#这是什么？" class="headerlink" title="这是什么？"></a>这是什么？</h3><ul><li>这是一个TXT文件，其中包含参加该网页设计和建立的人们的信息。</li></ul><h3 id="为什么是一个TXT？"><a href="#为什么是一个TXT？" class="headerlink" title="为什么是一个TXT？"></a>为什么是一个TXT？</h3><ul><li>这是因为TXT是一种快速和容易建立的档案格式，而且不是一种有侵扰性的格式。</li><li>很多时候业主并不希望作者在为他设计的网站签名，以为这样会降低其功能。</li><li>以我们这种方式可以从外部快速便利、经济实惠的显示证明网站作者（不是指网站的主人）。</li></ul><p><a href="http://humanstxt.org/humans.txt" target="_blank" rel="noopener">humans.txt官网格式</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* TEAM */</span><br><span class="line"></span><br><span class="line">/* THANKS */</span><br><span class="line"></span><br><span class="line">/* SITE */</span><br></pre></td></tr></table></figure><h2 id="项目目录的一些有用的文件"><a href="#项目目录的一些有用的文件" class="headerlink" title="项目目录的一些有用的文件"></a>项目目录的一些有用的文件</h2><ul><li>robots.txt</li><li>humans.txt</li><li>.editorConfig(编辑器风格配置)</li><li>.gitignore</li><li>LICENSE.txt(版权声明，协议是否开源)</li><li>README.md(项目简介 使用方式 相关链接)</li><li>CHANGLOG(说明版本更新相关)</li></ul><h2 id="html页面重要内容"><a href="#html页面重要内容" class="headerlink" title="html页面重要内容"></a>html页面重要内容</h2><ul><li>以前没有注意到的细节知识做一总结。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">网站内的语言为汉语，参考自淘宝网。</span><br><span class="line">&lt;html lang=&apos;zh-CN&apos;&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">这意味着，会强制浏览器按照最新的标准去渲染。添加”chrome=1“将允许站点在使用了谷歌浏览器内嵌框架（Chrome Frame）的客户端渲染，对于没有使用的，则没有任何影响。</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;/&gt;</span><br><span class="line"></span><br><span class="line">告诉浏览器启用理想视口来展示页面。不允许用户进行缩放。</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=0&quot; /&gt;</span><br><span class="line"></span><br><span class="line">条件注释：</span><br><span class="line">在body标签下争对IE低版本浏览器的更新提示信息：</span><br><span class="line">  &lt;!--[if lt IE 8]&gt;</span><br><span class="line">  &lt;style&gt;html,body&#123;overflow:hidden;height:100%&#125;&lt;/style&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;您的浏览器版本老的可笑，请到点击下面任一链接更新，以获取最佳的浏览体验。&lt;/p&gt;</span><br><span class="line">    &lt;a href=&quot;https://www.google.cn/intl/zh-CN/chrome/browser/desktop/&quot; &quot; target=&quot;_blank&quot;&gt;谷歌 Chrome&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.uc.cn/ucbrowser/download/&quot; target=&quot;_blank&quot;&gt;UC 浏览器&lt;/a&gt;&quot;</span><br><span class="line">    &lt;a href=&quot;http://browsehappy.com&quot;&gt;各大浏览器更新网站(外网)</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><h2 id="logo-说明"><a href="#logo-说明" class="headerlink" title="logo 说明"></a>logo 说明</h2><ul><li>像logo这样重要的图片最好以img标签的形式嵌入页面。</li><li>其他的不太重要的图片可以考虑background的形式引入。</li></ul><h2 id="样式重置"><a href="#样式重置" class="headerlink" title="样式重置"></a>样式重置</h2><ul><li>传统css样式重置resets.css 性能不佳</li><li>H5标准的样式重置 GitHub 3万多star</li><li>npm install normalize.css</li></ul><h2 id="css单位"><a href="#css单位" class="headerlink" title="css单位"></a>css单位</h2><ul><li>px 1px=1像素</li></ul><h3 id="em-相对长度单位"><a href="#em-相对长度单位" class="headerlink" title="em 相对长度单位"></a>em 相对长度单位</h3><ul><li>em的相对参照物为 父元素的font-size值</li><li>em 具有继承的特点</li><li>当没有设值时，浏览器的默认em  1em=16px</li><li>em的缺点 容易错乱</li></ul><h3 id="rem-相对长度单位"><a href="#rem-相对长度单位" class="headerlink" title="rem 相对长度单位"></a>rem 相对长度单位</h3><ul><li>参照物为HTML根元素 其固定不变</li><li>计算简单</li><li>没有设值时，浏览器的默认值 1rem=16px</li><li>设置 font-size: 62.5%  那么 </li><li>1rem = 10px</li></ul><h2 id="css3-的一些样式"><a href="#css3-的一些样式" class="headerlink" title="css3 的一些样式"></a>css3 的一些样式</h2><ul><li>文本选中后的样式设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  text-shadow: none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>calc的使用例子</li><li>width: calc(33.33333333% - 2rem)</li><li>css3 box-sizing属性<ul><li>border-box，border和padding计算入width之内，其实就是怪异模式了</li></ul></li></ul><h2 id="box-sizing-border-box"><a href="#box-sizing-border-box" class="headerlink" title="box-sizing: border-box"></a>box-sizing: border-box</h2><ul><li>box-sizing:border-box;</li><li>将正常的width height的作用范围延申至border的地方。</li><li>也就是说，对元素指定宽度和高度包括了 padding 和 border 。</li><li>正常的元素宽高给定后，增加padding border他们会往外面阔展大小。</li><li>加了这个属性后，再增加padding border 此时元素内容区会向里面缩进。</li></ul><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li>当元素设置float浮动后，该元素就会脱离文档流并向左/向右浮动，直到碰到父元素或者另一个浮动元素，浮动元素会造成父元素高度塌陷，所以当我们设置float后，需进行相应的清除浮动操作。</li><li>清除浮动的原理<ul><li>触发BFC</li></ul></li></ul><h3 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h3><ul><li>一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：</li></ul><p>1.float的值不是none。<br>2.position的值不是static或者relative。<br>3.display的值是inline-block、table-cell、flex、table-caption或者inline-flex<br>4.overflow的值不是visible</p><ul><li>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列</li></ul><h3 id="清除浮动方式一"><a href="#清除浮动方式一" class="headerlink" title="清除浮动方式一"></a>清除浮动方式一</h3><ul><li>使用额外的标签clear:both</li><li>原理：在浮动元素下面添加一个空标签，在这个标签中设置clear：both；</li><li>优点：简单，浏览器兼容性好；</li><li>缺点：增加页面的标签，造成页面混乱；</li></ul><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul><li>使用overflow属性</li><li>原理：父元素定义overflow:hidden，此时，浏览器会自动检查浮动区域的高度；</li><li>优点：简单，无需增加新的标签；</li><li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏</li></ul><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><ul><li>使用伪元素:after清除浮动</li><li>原理：原理同方法一有点类似，在元素最后定义一个空的内容，然后让该空的内容来清除浮动；</li><li>优点：无需额外的标签，浏览器兼容性好，是目前用的最多的一种清除浮动的方法之一；</li><li>缺点：代码稍微复杂点，初学者可能不太能理解其原理；</li></ul><h3 id="方式四-推荐"><a href="#方式四-推荐" class="headerlink" title="方式四 推荐"></a>方式四 推荐</h3><ul><li>老外大师推荐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">  content: &apos; &apos;;</span><br><span class="line">  display: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="line-height-注意事项"><a href="#line-height-注意事项" class="headerlink" title="line-height 注意事项"></a>line-height 注意事项</h2><ul><li>在使用rem 的单位设置时会有点问题</li><li>建议使用px的单位</li></ul><h2 id="diaplay-inline-block-注意事项"><a href="#diaplay-inline-block-注意事项" class="headerlink" title="diaplay: inline-block 注意事项"></a>diaplay: inline-block 注意事项</h2><ul><li>将元素设置为inline-block即行内块元素 多个inline-block元素会排列为一行 对外显示为行内元素 对内为块级元素的特性</li><li><p>带来的问题：</p><ul><li>各个元素间会出现一条小缝隙 即是元素间的空白字符</li><li>两个标签之间看不见的东西</li></ul></li><li><p>解决方法：</p><ul><li>将元素排列为一行</li><li>或去掉元素后面的闭合标签</li><li>将闭合标签放到下一个标签的开头部分</li><li>还有好多种方法</li></ul></li></ul><h2 id="雪碧图的使用"><a href="#雪碧图的使用" class="headerlink" title="雪碧图的使用"></a>雪碧图的使用</h2><ul><li>CSS雪碧 即CSS Sprite，也有人叫它CSS精灵，是一种CSS图像合并技术，该方法是将小图标和背景图像合并到一张图片上，然后利用css的背景定位来显示需要显示的图片部分</li><li>CSS雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。该图片使用CSS background和background-position属性渲染。</li></ul><h2 id="省略号的设置"><a href="#省略号的设置" class="headerlink" title="省略号的设置"></a>省略号的设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/responsive-sites/responsive-sites/#disqus_thread</comments>
    </item>
    
    <item>
      <title>express</title>
      <link>https://shulu520.com/express/express/</link>
      <guid>https://shulu520.com/express/express/</guid>
      <pubDate>Wed, 12 Jun 2019 01:34:23 GMT</pubDate>
      <description>
      
        node-express 珠峰教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<p>&emsp;&emsp;</p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/express/express/#disqus_thread</comments>
    </item>
    
    <item>
      <title>cookie-js</title>
      <link>https://shulu520.com/cookie/cookie-js/</link>
      <guid>https://shulu520.com/cookie/cookie-js/</guid>
      <pubDate>Tue, 11 Jun 2019 15:13:25 GMT</pubDate>
      <description>
      
        cookie的设置/获取/删除封装
      
      </description>
      
      <content:encoded><![CDATA[<p>&emsp;&emsp;</p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><a href="https://www.cnblogs.com/libin-1/p/6128903.html" target="_blank" rel="noopener">转载 原文链接</a><br>运用JS设置cookie、读取cookie、删除cookie<br>JavaScript是运行在客户端的脚本，因此一般是不能够设置Session的，因为Session是运行在服务器端的。</p><p>而cookie是运行在客户端的，所以可以用JS来设置cookie. </p><p>假设有这样一种情况，在某个用例流程中，由A页面跳至B页面，若在A页面中采用JS用变量temp保存了某一变量的值，在B页面的时候，同样需要使用JS来引用temp的变量值，对于JS中的全局变量或者静态变量的生命周期是有限的，当发生页面跳转或者页面关闭的时候，这些变量的值会重新载入，即没有达到保存的效果。解决这个问题的最好的方案是采用cookie来保存该变量的值，那么如何来设置和读取cookie呢？ </p><p>首先需要稍微了解一下cookie的结构，简单地说：cookie是以键值对的形式保存的，即key=value的格式。各个cookie之间一般是以“;”分隔。 </p><p>JS设置cookie:</p><p>假设在A页面中要保存变量username的值(“jack”)到cookie中,key值为name，则相应的JS代码为： </p><p>document.cookie=”name=”+username;  </p><p>JS读取cookie:</p><p>假设cookie中存储的内容为：name=jack;password=123</p><p>则在B页面中获取变量username的值的JS代码如下：</p><p>var username=document.cookie.split(“;”)[0].split(“=”)[1];  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//JS操作cookies方法! </span><br><span class="line"></span><br><span class="line">//写cookies </span><br><span class="line">function setCookie(name, value) &#123;</span><br><span class="line">  var Days = 30;</span><br><span class="line">  var exp = new Date();</span><br><span class="line">  exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);</span><br><span class="line">  document.cookie =</span><br><span class="line">    name + &quot;=&quot; + escape(value) + &quot;;expires=&quot; + exp.toGMTString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//读取cookies</span><br><span class="line">function getCookie(name) &#123;</span><br><span class="line">  var arr,</span><br><span class="line">    reg = new RegExp(&quot;(^| )&quot; + name + &quot;=([^;]*)(;|$)&quot;);</span><br><span class="line"></span><br><span class="line">  if ((arr = document.cookie.match(reg))) return unescape(arr[2]);</span><br><span class="line">  else return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除cookies</span><br><span class="line">function delCookie(name) &#123;</span><br><span class="line">  var exp = new Date();</span><br><span class="line">  exp.setTime(exp.getTime() - 1);</span><br><span class="line">  var cval = getCookie(name);</span><br><span class="line">  if (cval != null)</span><br><span class="line">    document.cookie = name + &quot;=&quot; + cval + &quot;;expires=&quot; + exp.toGMTString();</span><br><span class="line">&#125;</span><br><span class="line">//使用示例</span><br><span class="line">setCookie(&quot;name&quot;, &quot;hayden&quot;);</span><br><span class="line">alert(getCookie(&quot;name&quot;));</span><br><span class="line"></span><br><span class="line">//如果需要设定自定义过期时间</span><br><span class="line">//那么把上面的setCookie　函数换成下面两个函数就ok;</span><br><span class="line"></span><br><span class="line">//程序代码</span><br><span class="line">function setCookie(name, value, time) &#123;</span><br><span class="line">  var strsec = getsec(time);</span><br><span class="line">  var exp = new Date();</span><br><span class="line">  exp.setTime(exp.getTime() + strsec * 1);</span><br><span class="line">  document.cookie =</span><br><span class="line">    name + &quot;=&quot; + escape(value) + &quot;;expires=&quot; + exp.toGMTString();</span><br><span class="line">&#125;</span><br><span class="line">function getsec(str) &#123;</span><br><span class="line">  alert(str);</span><br><span class="line">  var str1 = str.substring(1, str.length) * 1;</span><br><span class="line">  var str2 = str.substring(0, 1);</span><br><span class="line">  if (str2 == &quot;s&quot;) &#123;</span><br><span class="line">    return str1 * 1000;</span><br><span class="line">  &#125; else if (str2 == &quot;h&quot;) &#123;</span><br><span class="line">    return str1 * 60 * 60 * 1000;</span><br><span class="line">  &#125; else if (str2 == &quot;d&quot;) &#123;</span><br><span class="line">    return str1 * 24 * 60 * 60 * 1000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//这是有设定过期时间的使用示例：</span><br><span class="line">//s20是代表20秒</span><br><span class="line">//h是指小时，如12小时则是：h12</span><br><span class="line">//d是天数，30天则：d30</span><br><span class="line"></span><br><span class="line">setCookie(&quot;name&quot;, &quot;hayden&quot;, &quot;s20&quot;);</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/libin-1/p/6128903.html" target="_blank" rel="noopener">转载 原文链接</a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/cookie/cookie-js/#disqus_thread</comments>
    </item>
    
    <item>
      <title>localStorage</title>
      <link>https://shulu520.com/localStorage/localStorage/</link>
      <guid>https://shulu520.com/localStorage/localStorage/</guid>
      <pubDate>Tue, 11 Jun 2019 11:52:59 GMT</pubDate>
      <description>
      
        localStorage本地存贮，珠峰教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<p>&emsp;&emsp;</p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="本地存贮"><a href="#本地存贮" class="headerlink" title="本地存贮"></a>本地存贮</h2><ul><li>把一些信息存储到客户端本地</li><li>存储到浏览器指定的地方</li><li>实现多页面之间的信息共享</li></ul><h2 id="本地存贮种类"><a href="#本地存贮种类" class="headerlink" title="本地存贮种类"></a>本地存贮种类</h2><ul><li>(xxx.manifest) 本地缓存   H5中的api</li><li>localStorage H5中的api 小数据的存储 <strong>常用</strong></li><li>indexDB / webSQL 本地数据库存储</li><li>CacheStroge / ApplicationCache</li><li>cookie <strong>常用</strong></li></ul><h2 id="本地存贮使用场景"><a href="#本地存贮使用场景" class="headerlink" title="本地存贮使用场景"></a>本地存贮使用场景</h2><ul><li>页面之间的信息通信</li><li>性能优化</li></ul><h2 id="本地存储信息的局限性"><a href="#本地存储信息的局限性" class="headerlink" title="本地存储信息的局限性"></a>本地存储信息的局限性</h2><ul><li>按照域来管理信息 如访问我的网站 则存储到shulu520.com这个域中</li><li>不能跨浏览器共享 </li><li>不能跨域共享</li></ul><h2 id="session-cookie-的关联"><a href="#session-cookie-的关联" class="headerlink" title="session cookie 的关联"></a>session cookie 的关联</h2><ul><li>session 服务器端存储</li><li>cookie 客户端存储</li><li>在服务器端创建session之后，服务器和当前客户端之间会建立一个唯一的标识(sessionID/sid),当前信息存储在对应的sid之下。</li><li>当服务器端把一些成功或失败的结果返回给客户端的时候，在响应头信息中会增加set-cookie(客户端cookie)这样的字段，把connect.sid存储到客户端的cookie中。即在客户端本地种下cookie.</li><li>当客户端再向服务器发送任何请求的时候，都会把cookie信息带上，传递给服务器.</li><li>服务器端根据sid值进行校验。</li></ul><h2 id="localStroge-vs-cookie"><a href="#localStroge-vs-cookie" class="headerlink" title="localStroge vs cookie"></a>localStroge vs cookie</h2><ul><li><p>cookie</p><ul><li>兼容所有浏览器</li><li>存储大小限制 一个域下能存储4kb左右数据</li><li>有过期时间(可以设置)</li><li>杀毒软件或浏览器的垃圾清理都可能会把cookie信息强制清除掉</li><li>在隐私或无痕浏览模式下，是不会记录cookie的</li><li>cookie不是严格的本地存储，因为要和服务器之间来回传输</li></ul></li><li><p>localStroge </p><ul><li>不兼容ie8 及以下</li><li>存储大小限制 一个域下能存储5Mb左右数据</li><li>本地永久存储(不手动删除的情况下)</li><li>杀毒软件或浏览器的垃圾清理暂时不会清理localStroge的信息(新版本google会清理localStroge的)</li><li>在隐私或无痕浏览模式下，是会记录localStroge的</li><li>localStroge和服务器之间无半毛钱的关系</li></ul></li></ul><h2 id="cookie的设置"><a href="#cookie的设置" class="headerlink" title="cookie的设置"></a>cookie的设置</h2><ul><li>document.cookie = ‘’<br><a href="https://www.cnblogs.com/libin-1/p/6128903.html" target="_blank" rel="noopener">转载 原文链接</a></li></ul><h2 id="localStroge的使用-常用"><a href="#localStroge的使用-常用" class="headerlink" title="localStroge的使用 常用"></a>localStroge的使用 常用</h2><ul><li>localStroge.setItem(key, value) 设置 其中value必须是字符串</li><li>localStroge.getItem(key) 获取</li><li>localStroge.removeItem(key) 删除</li><li>localStroge.clear() 清除当前域下的所有的localStroge信息</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/localStorage/localStorage/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Promise-zhuf</title>
      <link>https://shulu520.com/Promise/Promise-zhuf/</link>
      <guid>https://shulu520.com/Promise/Promise-zhuf/</guid>
      <pubDate>Mon, 10 Jun 2019 13:26:00 GMT</pubDate>
      <description>
      
        珠峰2018-node&amp;Promise教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<p>&emsp;&emsp;</p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="js执行顺序优先级"><a href="#js执行顺序优先级" class="headerlink" title="js执行顺序优先级"></a>js执行顺序优先级</h2><ul><li>scncfunction –&gt; micro task –&gt; macro task<ul><li>同步代码 scncfunction</li><li>微任务   micro task</li><li>宏任务   macro task</li></ul></li></ul><h2 id="微任务-micro-task"><a href="#微任务-micro-task" class="headerlink" title="微任务 micro task"></a>微任务 micro task</h2><ul><li>Process.nextTick<ul><li>把当前任务放到主栈的最后执行</li></ul></li><li>Promise(async await)</li></ul><h2 id="宏任务-macro-task"><a href="#宏任务-macro-task" class="headerlink" title="宏任务 macro task"></a>宏任务 macro task</h2><ul><li>回调函数</li><li>ajax</li><li>事件绑定</li><li>node 中的 fs</li><li>三种定时器<ul><li>setImmediate (nodejs独有)</li><li>setTimeout</li><li>setInterval</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setImmediate (() =&gt; &#123;</span><br><span class="line">  console.log(&apos;shulu&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>三种状态 进行中 成功 失败</li><li>Promise.all([promise1, promise2, promise3]).then(() =&gt; {……}).catch(){……} 即promise1,2,3都成功则执行then的成功方法，有一个失败则走catch方法。</li><li></li></ul><h2 id="es6-class-类"><a href="#es6-class-类" class="headerlink" title="es6 class 类"></a>es6 class 类</h2><ul><li>class 的本质是 function。</li><li>在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。</li><li>它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法</li><li>constructor 方法是类的默认方法，创建类的实例化对象时被调用</li><li>class 的实例化必须通过 new 关键字。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Promise &#123;</span><br><span class="line"></span><br><span class="line">  //constructor 创建类的实例化对象时被调用</span><br><span class="line">  constructor () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //这里写原型上的方法</span><br><span class="line">  then()</span><br><span class="line"></span><br><span class="line">  catch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/2d64c4c4accd" target="_blank" rel="noopener">手写Promise实现</a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/Promise/Promise-zhuf/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也</description>
    <pubDate>Mon, 05 Jul 2021 16:53:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数据分析-名词解释</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</guid>
      <pubDate>Mon, 05 Jul 2021 15:44:33 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width:100%;height:1px;background-color:pink;opacity:.7&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="数据分析相关指标"><a href="#数据分析相关指标" class="headerlink" title="数据分析相关指标"></a>数据分析相关指标</h2><h3 id="GMV：商品交易-成交-总额"><a href="#GMV：商品交易-成交-总额" class="headerlink" title="GMV：商品交易(成交)总额"></a>GMV：商品交易(成交)总额</h3><ul><li>生成了订单有了流水就算做GMV，与实际成交总额有不小的差距</li><li>设定GMV：用户数(流量UV <em> 转化率) </em> 客单价(人均消费金额)</li><li>拆解实现GMV：从上到下一步步分摊，实现各部门各岗位的kpi指标</li></ul><h3 id="ROI：投资回报率"><a href="#ROI：投资回报率" class="headerlink" title="ROI：投资回报率"></a>ROI：投资回报率</h3><ul><li>ROI:年利润或年均利润/投资总额*100%</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析-爬虫</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E7%88%AC%E8%99%ABrequest/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E7%88%AC%E8%99%ABrequest/</guid>
      <pubDate>Fri, 11 Jun 2021 04:49:02 GMT</pubDate>
      <description>
      
        Python的http请求requests库，Beautiful Soup网页解析，爬虫练习。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="防止反爬措施"><a href="#防止反爬措施" class="headerlink" title="防止反爬措施"></a>防止反爬措施</h2><ul><li>设置休眠时间</li><li>轮换IP地址</li><li>更改user_agent</li></ul><h3 id="设置休眠时间"><a href="#设置休眠时间" class="headerlink" title="设置休眠时间"></a>设置休眠时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 一个IP如果短时间内超过了指定的次数就会被认为是攻击</span><br><span class="line"></span><br><span class="line"># 可以设置访问的时间间间隔长一点，比如每抓取一个页面休眠一个随机时间，单位为&apos;秒&apos;</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">time.sleep(np.random.rand()*3) </span><br><span class="line">#先休眠一会，再进行下面的</span><br></pre></td></tr></table></figure><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><ul><li>注意print(response3.text)在vscode编辑器终端显示不完全</li><li>使用anaconda下面的jupyter在里面编辑代码，则可以正常显示 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;&apos;user-agent&apos;: &apos;my-app/0.0.1&apos;&#125;</span><br><span class="line"></span><br><span class="line"># url</span><br><span class="line">url_douban_movie =&quot;https://movie.douban.com/&quot;</span><br><span class="line"></span><br><span class="line"># 发请求 获得响应 爬豆瓣电影首页</span><br><span class="line">response_douban_movice = requests.get(url=url_douban_movie,headers=headers)</span><br><span class="line"># print(response_douban_movice.text)</span><br><span class="line"></span><br><span class="line">## xxx电影主页</span><br><span class="line">url2=&quot;https://movie.douban.com/subject/34961898/&quot;</span><br><span class="line">response2 = requests.get(url=url2,headers=headers)</span><br><span class="line"># print(response2.text)</span><br><span class="line"></span><br><span class="line"># 百度百科</span><br><span class="line">url3=&quot;https://baike.baidu.com/&quot;</span><br><span class="line">response3 = requests.get(url=url3,headers=headers)</span><br><span class="line">print(response3.text)</span><br></pre></td></tr></table></figure><h2 id="beautiful-soup"><a href="#beautiful-soup" class="headerlink" title="beautiful soup"></a>beautiful soup</h2><ul><li>from bs4 import BeautifulSoup</li><li>注意 类名要加下_ 如：class_=”name”</li><li>在网页开发者源代码，查看对应的标签</li><li>双击类名或id名称再Ctrl+A，Ctrl+C即可拿到对应的标签</li><li>取标签的内容可以.text或.string</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E7%88%AC%E8%99%ABrequest/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据分析之可视化-tableau</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-tableau/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-tableau/</guid>
      <pubDate>Thu, 10 Jun 2021 14:31:31 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此版本的tableau是免费版的,下载地址为’&lt;a href=&quot;https://public.tableau.com/s/&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://public.tableau.com/s/&amp;#39;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width:100%;height:1px;background-color:pink;opacity:.7&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;此版本的tableau是免费版的,下载地址为’<a href="https://public.tableau.com/s/&#39;" target="_blank" rel="noopener">https://public.tableau.com/s/&#39;</a></p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="tableau"><a href="#tableau" class="headerlink" title="tableau"></a>tableau</h2><p><img src="https://pic.imgdb.cn/item/60c22332844ef46bb2d2b0f7.jpg" alt></p><ul><li>左下角加载数据源</li><li>下面边上创建工作表</li><li>创建仪表盘</li><li>创建故事</li><li>左边拖动某一列到中间的页面标记部分右边即可及时显示</li><li>也可以对某一列数据右键切换维度或度量(计数)</li></ul><h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><ul><li>即对做好的工作表的图拼接到一起<br><img src="https://pic.imgdb.cn/item/60c22118844ef46bb2a12105.jpg" alt></li></ul><h2 id="创建故事"><a href="#创建故事" class="headerlink" title="创建故事"></a>创建故事</h2><ul><li>类似做的PPT演示文稿一样</li><li>创建故事</li><li>点击左上角’空白’即可创建标题部分</li><li>拖动工作表即可完成故事内容</li></ul><p><img src="https://pic.imgdb.cn/item/60c227c5844ef46bb23a7358.jpg" alt></p><h2 id="tableau笔记"><a href="#tableau笔记" class="headerlink" title="tableau笔记"></a>tableau笔记</h2><h3 id="创建复杂一点的计算字段"><a href="#创建复杂一点的计算字段" class="headerlink" title="创建复杂一点的计算字段"></a>创建复杂一点的计算字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要创建一个新的列，这一列是根据其他列计算得来的</span><br><span class="line">点开数据源，任意一列上右击：创建计算字段</span><br><span class="line">如下公式是统计每个顾客对应得订单量即用户消费次数</span><br><span class="line">&#123; FIXED [Customer ID]:COUNTD([订单id]) &#125;</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-tableau/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mysql基础</title>
      <link>https://shulu520.com/mysql/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E5%9F%BA%E7%A1%80/</link>
      <guid>https://shulu520.com/mysql/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Thu, 10 Jun 2021 04:54:59 GMT</pubDate>
      <description>
      
        常见的数据库MySQL，对于我们数据分析师来说，会基本的&quot;取数据&quot;的操作还是非常有必要的，其他的更新、删除之类的就没必要了。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="mysql基础语法"><a href="#mysql基础语法" class="headerlink" title="mysql基础语法"></a>mysql基础语法</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>写完语句后可以鼠标划选相应的语句进行执行</li><li>否则就是全部执行</li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#从person表选择所有字段 分号结尾</span><br><span class="line">SELECT * FROM PERSON;</span><br><span class="line"></span><br><span class="line">#从person表选择FIRSTNAME字段 注意FIRSTNAME前后是Esc键下面的`号</span><br><span class="line">SELECT `FIRSTNAME` FROM PERSON;</span><br><span class="line"></span><br><span class="line">#从person表选择FIRSTNAME和LASTNAME字段</span><br><span class="line">SELECT `FIRSTNAME`,`LASTNAME` FROM PERSON; </span><br><span class="line"></span><br><span class="line">#从person表选择所有包括FIRSTNAME = TOM 的字段</span><br><span class="line">SELECT * FROM PERSON WHERE `FIRSTNAME` = &apos;TOM&apos;; #注意Tom前后是英文引号</span><br></pre></td></tr></table></figure><h3 id="模糊查询LIKE"><a href="#模糊查询LIKE" class="headerlink" title="模糊查询LIKE %"></a>模糊查询LIKE %</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM POSITION WHERE `农户姓名` LIKE &apos;刘%&apos;;</span><br><span class="line"># 即刘后面的内容随便</span><br><span class="line"># 若为&apos;%刘%&apos;，则中间包含刘，两边随便都行</span><br></pre></td></tr></table></figure><h3 id="多个目标岗位-in"><a href="#多个目标岗位-in" class="headerlink" title="多个目标岗位 in"></a>多个目标岗位 in</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#得到岗位包含大数据和数据分析师的所有条数据</span><br><span class="line">SELECT * FROM POSITION WHERE `岗位` IN(&apos;大数据&apos;,&apos;数据分析师&apos;);</span><br></pre></td></tr></table></figure><h3 id="排除法-NOT"><a href="#排除法-NOT" class="headerlink" title="排除法 NOT"></a>排除法 NOT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM POSITION WHERE NOT `岗位` = &apos;大数据&apos;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM POSITION WHERE NOT `岗位` = &apos;大数据&apos; AND `农户姓名` LIKE &apos;刘%&apos;;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#默认升序 注意是按字符串规则排序的</span><br><span class="line">SELECT * FROM POSITION WHERE  `岗位` = &apos;数据分析师&apos; ORDER BY `原计税面积`;</span><br><span class="line"></span><br><span class="line">#降序</span><br><span class="line">SELECT * FROM POSITION WHERE  `岗位` = &apos;数据分析师&apos; ORDER BY `原计税面积` DESC;</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM POSITION WHERE `补贴标准` = 84.45 AND `农户姓名` = &apos;杨峰&apos;;</span><br><span class="line">#结果为：</span><br><span class="line">DELETE FROM POSITION WHERE `补贴标准` = 84.45 AND `农户姓名` = &apos;杨峰&apos;</span><br><span class="line">&gt; Affected rows: 1 #即删除了一条数据</span><br><span class="line">&gt; 时间: 0.128s</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#更新数据</span><br><span class="line">UPDATE POSITION SET `补贴标准` = 0 WHERE `农户姓名` = &apos;刘辉&apos;;</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 插入一条数据(原数据表有6列)，这里插入6个空值</span><br><span class="line">INSERT INTO POSITION VALUES(&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;);</span><br></pre></td></tr></table></figure><h2 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h2><h3 id="记次函数"><a href="#记次函数" class="headerlink" title="记次函数"></a>记次函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#注意结果没有去重</span><br><span class="line">SELECT COUNT(`岗位`) FROM POSITION; </span><br><span class="line"></span><br><span class="line">#唯一的DISTINCT 即去重后的</span><br><span class="line">SELECT COUNT(DISTINCT `岗位`) FROM POSITION;</span><br></pre></td></tr></table></figure><h3 id="选择子字符串"><a href="#选择子字符串" class="headerlink" title="选择子字符串"></a>选择子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(`身份证号`,9,2) FROM POSITION;</span><br></pre></td></tr></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(`岗位`,&apos;能&apos;,&apos;障&apos;) FROM POSITION;</span><br></pre></td></tr></table></figure><h3 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(SUBSTR(`身份证号`,9,2)) FROM POSITION;</span><br><span class="line"></span><br><span class="line">#对结果四舍五入</span><br><span class="line">SELECT ROUND(AVG(SUBSTR(`身份证号`,9,2)),0) FROM POSITION;</span><br></pre></td></tr></table></figure><h3 id="分组汇总"><a href="#分组汇总" class="headerlink" title="分组汇总"></a>分组汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `岗位` ,COUNT(`岗位`) FROM POSITION GROUP BY `岗位`;</span><br></pre></td></tr></table></figure><h2 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h2><ul><li>多张表之间存在共同信息，交集<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 横向合并所选内容</span><br><span class="line">SELECT `农户姓名`,`岗位`,`家庭住址` FROM POSITION,INFO WHERE `农户姓名` = `姓名`;</span><br><span class="line"></span><br><span class="line"># 纵向合并</span><br><span class="line">SELECT `地点` FROM POSITION</span><br><span class="line">UNION</span><br><span class="line">SELECT `城市` FROM INFO</span><br></pre></td></tr></table></figure></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/mysql/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E5%BA%93mysql%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据可视化-Gephi</title>
      <link>https://shulu520.com/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/</link>
      <guid>https://shulu520.com/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/</guid>
      <pubDate>Mon, 07 Jun 2021 12:26:04 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width:100%;height:1px;background-color:pink;opacity:.7&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-Gephi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据可视化-Seaborn</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <pubDate>Sat, 05 Jun 2021 08:23:40 GMT</pubDate>
      <description>
      
        更好地进行数据结果表达
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><ul><li>Seaborn:基于Matplotlib的数据可视化库，提供更高层次的API</li><li>Bokeh:可以建立一个可交互的线上可视化服务器</li><li>Gephi:主要用于各种网络和复杂的关系系统</li><li>空间可视化：powermap，echarts</li></ul><h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 有些模拟的数据是从官方服务器上加载的</span><br><span class="line"># 但是会出现被拒绝的情况</span><br><span class="line"># 解决是访问https://github.com/mwaskom/seaborn-data打包下载</span><br><span class="line"># 里面的csv文件就是我们需要的文件</span><br><span class="line"># 我将它们放到Jupyter里面的seaborn-data</span><br><span class="line"># 用的时候读取csv文件并转为dfw文件即可如下：</span><br><span class="line">import csv</span><br><span class="line">tmp_lst = []</span><br><span class="line">with open(&apos;./seaborn-data/tips.csv&apos;, &apos;r&apos;,encoding = &apos;utf-8&apos; ) as tips: #tips 是文件名 注意更换</span><br><span class="line">    reader = csv.reader(tips) #tips 是文件名</span><br><span class="line">    for row in reader:</span><br><span class="line">        tmp_lst.append(row)</span><br><span class="line">tips = pd.DataFrame(tmp_lst[1:], columns=tmp_lst[0]) </span><br><span class="line">tips</span><br></pre></td></tr></table></figure><h3 id="Seaborn-整体风格设置-颜色和比例等"><a href="#Seaborn-整体风格设置-颜色和比例等" class="headerlink" title="Seaborn 整体风格设置 颜色和比例等"></a>Seaborn 整体风格设置 颜色和比例等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns #新模块</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建正弦函数</span><br><span class="line">def sinplot(flip=1):</span><br><span class="line">    x=np.linspace(0,14,100)</span><br><span class="line">    for i in range(1,7):</span><br><span class="line">        plt.plot(x,np.sin(x+i*0.5)*(7-i)*flip)</span><br><span class="line">        </span><br><span class="line">sinplot()#调用函数 绘图</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置默认风格 sns.set()</span><br><span class="line">sns.set() #会影响其他的图表，可以重新刷新整个jupyter</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># set_style 设置风格</span><br><span class="line"># 风格选择有：white、dark、whitegrid、darkgrid、ticks</span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(6,6)) #Matplotlib创建图表窗口</span><br><span class="line">ax1=fig.add_subplot(2,1,1)</span><br><span class="line">sns.set_style(&apos;dark&apos;) #Seaborn设置风格</span><br><span class="line"></span><br><span class="line">data=np.random.normal(size=(20,6))+np.arange(6)/2</span><br><span class="line">sns.boxplot(data=data) #Seaborn绘图</span><br><span class="line">plt.title(&apos;style-dark&apos;) #任然可以使用Matplotlib的参数</span><br><span class="line"></span><br><span class="line">ax2=fig.add_subplot(2,1,2)</span><br><span class="line">sinplot() #调用上面创建的函数绘图</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置图表的坐标轴 despine()</span><br><span class="line"># 默认删除上边和右边坐标轴线 sns.despine()不加参数时，参数如top=true等</span><br><span class="line"># 坐标轴偏移 sns.despine(offset=10)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># sns.axes_style 设置局部风格 配合with语句</span><br><span class="line">with sns.axes_style(&apos;ticks&apos;): #with 做代码块区分</span><br><span class="line">    plt.subplot(211)</span><br><span class="line">    sinplot()</span><br><span class="line">    </span><br><span class="line">plt.subplot(212)</span><br><span class="line">sns.set_style(&apos;dark&apos;) #外部风格</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置显示比例尺度sns.set_context()</span><br><span class="line"># 风格选择包括 paper、notebook、talk、poster</span><br><span class="line"># 默认为notebook</span><br></pre></td></tr></table></figure><h3 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 调色盘设置sns.color_palette()</span><br><span class="line"># sns.color_palette(palette=None, n_colors=None, desat=None, as_cmap=False)</span><br><span class="line"># 6个颜色 deep, muted, bright, pastel, dark, colorblind</span><br><span class="line"></span><br><span class="line">sns.palplot(sns.color_palette()) #默认显示10种</span><br><span class="line">sns.palplot(sns.color_palette(&apos;Reds&apos;,8)) #由浅入深8条渐变 默认6条</span><br><span class="line">sns.palplot(sns.color_palette(&apos;Reds_r&apos;)) #颜色反转 部分颜色有 带_r的有</span><br><span class="line"># sns.palplot()显示我们想要的调色盘 类似print函数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">其实选择颜色色盘在下面这些现有的里面挑就行了</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># Accent&apos;, &apos;Accent_r&apos;, &apos;Blues&apos;, &apos;Blues_r&apos;, &apos;BrBG&apos;, &apos;BrBG_r&apos;, &apos;BuGn&apos;, &apos;BuGn_r&apos;, </span><br><span class="line"># &apos;BuPu&apos;, &apos;BuPu_r&apos;, &apos;CMRmap&apos;, &apos;CMRmap_r&apos;, &apos;Dark2&apos;, &apos;Dark2_r&apos;, &apos;GnBu&apos;, &apos;GnBu_r&apos;, </span><br><span class="line"># &apos;Greens&apos;, &apos;Greens_r&apos;, &apos;Greys&apos;, &apos;Greys_r&apos;, &apos;OrRd&apos;, &apos;OrRd_r&apos;, &apos;Oranges&apos;, </span><br><span class="line"># &apos;Oranges_r&apos;, &apos;PRGn&apos;, &apos;PRGn_r&apos;, &apos;Paired&apos;, &apos;Paired_r&apos;, &apos;Pastel1&apos;, &apos;Pastel1_r&apos;, </span><br><span class="line"># &apos;Pastel2&apos;, &apos;Pastel2_r&apos;, &apos;PiYG&apos;, &apos;PiYG_r&apos;, &apos;PuBu&apos;, &apos;PuBuGn&apos;, &apos;PuBuGn_r&apos;, &apos;PuBu_r&apos;, </span><br><span class="line"># &apos;PuOr&apos;, &apos;PuOr_r&apos;, &apos;PuRd&apos;, &apos;PuRd_r&apos;, &apos;Purples&apos;, &apos;Purples_r&apos;, &apos;RdBu&apos;, &apos;RdBu_r&apos;, </span><br><span class="line"># &apos;RdGy&apos;, &apos;RdGy_r&apos;, &apos;RdPu&apos;, &apos;RdPu_r&apos;, &apos;RdYlBu&apos;, &apos;RdYlBu_r&apos;, &apos;RdYlGn&apos;, &apos;RdYlGn_r&apos;, </span><br><span class="line"># &apos;Reds&apos;, &apos;Reds_r&apos;, &apos;Set1&apos;, &apos;Set1_r&apos;, &apos;Set2&apos;, &apos;Set2_r&apos;, &apos;Set3&apos;, &apos;Set3_r&apos;, &apos;Spectral&apos;, </span><br><span class="line"># &apos;Spectral_r&apos;, &apos;Wistia&apos;, &apos;Wistia_r&apos;, &apos;YlGn&apos;, &apos;YlGnBu&apos;, &apos;YlGnBu_r&apos;, &apos;YlGn_r&apos;, </span><br><span class="line"># &apos;YlOrBr&apos;, &apos;YlOrBr_r&apos;, &apos;YlOrRd&apos;, &apos;YlOrRd_r&apos;, &apos;afmhot&apos;, &apos;afmhot_r&apos;, &apos;autumn&apos;, </span><br><span class="line"># &apos;autumn_r&apos;, &apos;binary&apos;, &apos;binary_r&apos;, &apos;bone&apos;, &apos;bone_r&apos;, &apos;brg&apos;, &apos;brg_r&apos;, &apos;bwr&apos;, </span><br><span class="line"># &apos;bwr_r&apos;, &apos;cividis&apos;, &apos;cividis_r&apos;, &apos;cool&apos;, &apos;cool_r&apos;, &apos;coolwarm&apos;, &apos;coolwarm_r&apos;, </span><br><span class="line"># &apos;copper&apos;, &apos;copper_r&apos;, &apos;crest&apos;, &apos;crest_r&apos;, &apos;cubehelix&apos;, &apos;cubehelix_r&apos;, &apos;flag&apos;, </span><br><span class="line"># &apos;flag_r&apos;, &apos;flare&apos;, &apos;flare_r&apos;, &apos;gist_earth&apos;, &apos;gist_earth_r&apos;, &apos;gist_gray&apos;, </span><br><span class="line"># &apos;gist_gray_r&apos;, &apos;gist_heat&apos;, &apos;gist_heat_r&apos;, &apos;gist_ncar&apos;, &apos;gist_ncar_r&apos;, </span><br><span class="line"># &apos;gist_rainbow&apos;, &apos;gist_rainbow_r&apos;, &apos;gist_stern&apos;, &apos;gist_stern_r&apos;, &apos;gist_yarg&apos;, </span><br><span class="line"># &apos;gist_yarg_r&apos;, &apos;gnuplot&apos;, &apos;gnuplot2&apos;, &apos;gnuplot2_r&apos;, &apos;gnuplot_r&apos;, &apos;gray&apos;, &apos;gray_r&apos;,</span><br><span class="line"># &apos;hot&apos;, &apos;hot_r&apos;, &apos;hsv&apos;, &apos;hsv_r&apos;, &apos;icefire&apos;, &apos;icefire_r&apos;, &apos;inferno&apos;, &apos;inferno_r&apos;, </span><br><span class="line"># &apos;jet&apos;, &apos;jet_r&apos;, &apos;magma&apos;, &apos;magma_r&apos;, &apos;mako&apos;, &apos;mako_r&apos;, &apos;nipy_spectral&apos;, </span><br><span class="line"># &apos;nipy_spectral_r&apos;, &apos;ocean&apos;, &apos;ocean_r&apos;, &apos;pink&apos;, &apos;pink_r&apos;, &apos;plasma&apos;, &apos;plasma_r&apos;, </span><br><span class="line"># &apos;prism&apos;, &apos;prism_r&apos;, &apos;rainbow&apos;, &apos;rainbow_r&apos;, &apos;rocket&apos;, &apos;rocket_r&apos;, &apos;seismic&apos;, </span><br><span class="line"># &apos;seismic_r&apos;, &apos;spring&apos;, &apos;spring_r&apos;, &apos;summer&apos;, &apos;summer_r&apos;, &apos;tab10&apos;, &apos;tab10_r&apos;, </span><br><span class="line"># &apos;tab20&apos;, &apos;tab20_r&apos;, &apos;tab20b&apos;, &apos;tab20b_r&apos;, &apos;tab20c&apos;, &apos;tab20c_r&apos;, &apos;terrain&apos;, </span><br><span class="line"># &apos;terrain_r&apos;, &apos;turbo&apos;, &apos;turbo_r&apos;, &apos;twilight&apos;, &apos;twilight_r&apos;, &apos;twilight_shifted&apos;, </span><br><span class="line"># &apos;twilight_shifted_r&apos;, &apos;viridis&apos;, &apos;viridis_r&apos;, &apos;vlag&apos;, &apos;vlag_r&apos;, &apos;winter&apos;, &apos;winter_r&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 分组颜色设置</span><br><span class="line">sns.palplot(sns.color_palette(&apos;Paired&apos;,8))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置亮度饱和度</span><br><span class="line"># sns.palplot(sns.hls_palette(n_colors,h,l,s))</span><br><span class="line">sns.palplot(sns.hls_palette(6,l=0.5,s=1))</span><br><span class="line"># L :亮度</span><br><span class="line"># s:饱和度</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 按照线性增长计算颜色 sns.cubehelix_palette()</span><br><span class="line">sns.palplot(sns.cubehelix_palette(8,gamma=1))</span><br><span class="line"># sns.cubehelix_palette?</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">sns.cubehelix_palette(</span><br><span class="line">    n_colors=6, #颜色条数</span><br><span class="line">    start=0,    #[0-3],起始颜色值</span><br><span class="line">    rot=0.4,    #颜色旋转角度</span><br><span class="line">    gamma=1.0,  #越大，颜色越暗</span><br><span class="line">    hue=0.8,</span><br><span class="line">    light=0.85, #亮度</span><br><span class="line">    dark=0.15,  #暗度</span><br><span class="line">    reverse=False, #默认由浅到深</span><br><span class="line">    as_cmap=False,</span><br><span class="line">)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 创建分散的颜色调色盘</span><br><span class="line"># sns.diverging_palette?</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">sns.diverging_palette(</span><br><span class="line">    h_neg, #[0, 359]</span><br><span class="line">    h_pos, #[0, 359] #h_neg起始、h_pos终止颜色值</span><br><span class="line">    s=75, #[0, 100] 饱和度</span><br><span class="line">    l=50, #[0, 100] 亮度</span><br><span class="line">    sep=1,#</span><br><span class="line">    n=6,  #颜色个数</span><br><span class="line">    center=&apos;light&apos;, #中心颜色 默认浅色 可选dark</span><br><span class="line">    as_cmap=False,</span><br><span class="line">)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">sns.palplot(sns.diverging_palette(150,280,s=88,l=25,n=7))</span><br><span class="line">sns.palplot(sns.diverging_palette(150,280,s=88,l=25,n=7,center=&apos;dark&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 做个矩阵形式的调色盘</span><br><span class="line">plt.figure(figsize=(8,6))</span><br><span class="line">x=np.arange(25).reshape(5,5)#25个数 5行5列</span><br><span class="line"># 创建调色盘</span><br><span class="line">cmap=sns.diverging_palette(200,20,sep=20,as_cmap=True)</span><br><span class="line">sns.heatmap(x,cmap=cmap) #热力图</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 这个效果不错</span><br><span class="line">sns.set_style(&apos;whitegrid&apos;)</span><br><span class="line">with sns.color_palette(&apos;PuBuGn_d&apos;):</span><br><span class="line">    plt.subplot(211)</span><br><span class="line">    sinplot()</span><br><span class="line"></span><br><span class="line">sns.set_palette(&apos;husl&apos;)</span><br><span class="line">plt.subplot(212)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bc72118355f7f718e70241.png" alt></p><h3 id="分布式数据可视化"><a href="#分布式数据可视化" class="headerlink" title="分布式数据可视化"></a>分布式数据可视化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 分布数据可视化 直方图与密度图</span><br><span class="line"># 通常将两个图结合起来看，这样同时观察数据的趋势和分布</span><br><span class="line"></span><br><span class="line">rs=np.random.RandomState(10)</span><br><span class="line">s=pd.Series(rs.randn(100)*100)</span><br><span class="line"></span><br><span class="line">sns.distplot(s,bins=10,hist=True,kde=True,</span><br><span class="line">            rug=True,label=&apos;displot&apos;,</span><br><span class="line">            norm_hist=False,axlabel=&apos;x&apos;)</span><br><span class="line"></span><br><span class="line"># sns.distplot?</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">sns.distplot(</span><br><span class="line">    a=None,   #数据 必须，可以为pandas的series或者list。</span><br><span class="line">    bins=None,#柱子个数</span><br><span class="line">    hist=True,#是否显示直方图</span><br><span class="line">    kde=True, #是否显示密度曲线</span><br><span class="line">    rug=False, #是否显示分布情况 靠近x轴小齿条</span><br><span class="line">    fit=None,</span><br><span class="line">    hist_kws=None,#柱子风格(bar/step/barstacked/stepfilled)，线宽/透明度/颜色</span><br><span class="line">    kde_kws=None, #密度曲线颜色，线宽，标注，线型</span><br><span class="line">    rug_kws=None, #数据频率分布颜色</span><br><span class="line">    fit_kws=None,</span><br><span class="line">    color=None, #颜色</span><br><span class="line">    vertical=False, #竖直方向</span><br><span class="line">    norm_hist=False,#直方图是否按照密度显示 标准化数据</span><br><span class="line">    axlabel=None, #x轴标注</span><br><span class="line">    label=None, #图例</span><br><span class="line">    ax=None,    #指定对应的axes坐标轴</span><br><span class="line">    x=None,</span><br><span class="line">)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bcd98d8355f7f7187834e2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 细微的设置</span><br><span class="line">sns.distplot(s,rug=True,rug_kws=&#123;&quot;color&quot;: &quot;r&quot;&#125;,</span><br><span class="line">             kde_kws=&#123;&quot;color&quot;: &quot;k&quot;, &quot;lw&quot;: 1, &quot;label&quot;: &quot;KDE&quot;&#125;,</span><br><span class="line">             hist_kws=&#123;&quot;histtype&quot;: &quot;bar&quot;, &quot;linewidth&quot;: 3,&quot;alpha&quot;: 1, &quot;color&quot;: &quot;g&quot;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bcdc5d8355f7f71887b580.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 密度图 单独的设置 好多参数呢</span><br><span class="line">sns.kdeplot(s,shade=True,color=&apos;r&apos;)</span><br><span class="line"># shade 是否填充颜色</span><br><span class="line"># bw 控制拟合程度</span><br><span class="line"></span><br><span class="line"># rugplot 小齿条具体设置</span><br><span class="line">sns.rugplot(s,height=0.1,alpha=0.8,color=&apos;k&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bcdca58355f7f71888ead4.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 两列数据 密度分布图</span><br><span class="line">rs=np.random.RandomState(2)</span><br><span class="line">df=pd.DataFrame(rs.randn(100,2),</span><br><span class="line">               columns=[&apos;A&apos;,&apos;B&apos;])</span><br><span class="line"></span><br><span class="line">sns.kdeplot(df[&apos;A&apos;],df[&apos;B&apos;],</span><br><span class="line">           cbar=True,#是否显示颜色图例</span><br><span class="line">           shade=True,#是否填充颜色</span><br><span class="line">           cmap=&apos;Reds&apos;,</span><br><span class="line">           shade_lowest=False,# 外围颜色是否显示</span><br><span class="line">           n_levels=10 #曲线个数 越多越平滑</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bcdce18355f7f71889a208.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 两列数据 密度分布图 多个图</span><br><span class="line">rs1=np.random.RandomState(2)</span><br><span class="line">rs2=np.random.RandomState(5)</span><br><span class="line">df1=pd.DataFrame(rs1.randn(100,2)+2,columns=[&apos;A&apos;,&apos;B&apos;])</span><br><span class="line">df2=pd.DataFrame(rs2.randn(100,2)-2,columns=[&apos;A&apos;,&apos;B&apos;])</span><br><span class="line"></span><br><span class="line">sns.kdeplot(df1[&apos;A&apos;],df1[&apos;B&apos;],</span><br><span class="line">           cbar=True,</span><br><span class="line">           shade=True,</span><br><span class="line">           cmap=&apos;Greens&apos;,</span><br><span class="line">           shade_lowest=False,</span><br><span class="line">           )</span><br><span class="line"></span><br><span class="line">sns.kdeplot(df2[&apos;A&apos;],df2[&apos;B&apos;],</span><br><span class="line">           cbar=True,</span><br><span class="line">           shade=True,</span><br><span class="line">           cmap=&apos;Blues&apos;,</span><br><span class="line">           shade_lowest=False,</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bcdd278355f7f7188a5045.jpg" alt></p><h3 id="分布数据可视化-散点图"><a href="#分布数据可视化-散点图" class="headerlink" title="分布数据可视化 散点图"></a>分布数据可视化 散点图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 分布数据可视化 散点图</span><br><span class="line">rs=np.random.RandomState(2)</span><br><span class="line">df=pd.DataFrame(rs.randn(200,2),columns=[&apos;A&apos;,&apos;B&apos;])</span><br><span class="line"></span><br><span class="line">sns.jointplot(x=df[&apos;A&apos;],y=df[&apos;B&apos;],#x,y轴名称</span><br><span class="line">             data=df, #数据</span><br><span class="line">             color=&apos;g&apos;,</span><br><span class="line">             s=50,edgecolor=&apos;w&apos;,linewidth=1,#散点大小/边缘颜色/线宽(只针对scatter)</span><br><span class="line">             space=0,#散点图与布局图间距</span><br><span class="line">             kind=&apos;scatter&apos;, #还有reg,resid,hex,kde,scatter</span><br><span class="line">             size=5, #图表大小</span><br><span class="line">             ratio=3, #散点图与布局图高度比</span><br><span class="line">             marginal_kws=dict(bins=15,rug=True)#柱状图箱数，以及rug</span><br><span class="line">             )</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bde44b844ef46bb2663c96.jpg" alt></p><h3 id="以下内容-数据出现问题-出图很难看"><a href="#以下内容-数据出现问题-出图很难看" class="headerlink" title="以下内容 数据出现问题 出图很难看"></a>以下内容 数据出现问题 出图很难看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 综合散点图 JointGrid() </span><br><span class="line"># 拆分绘制的散点图 即jointplot绘制的图的三个部分分别设置</span><br><span class="line"># 在JointGrid()的基础上通过plot_joint() + ax_marg_x.hist() + ax_marg_y.hist()</span><br><span class="line"></span><br><span class="line">sns.set_style(&apos;white&apos;)</span><br><span class="line"># tips=sns.load_dataset(&apos;tips&apos;) #导入网络数据 失败 解决如下：</span><br><span class="line"></span><br><span class="line">import csv</span><br><span class="line">tmp_lst = []</span><br><span class="line">with open(&apos;./seaborn-data/tips.csv&apos;, &apos;r&apos;,encoding = &apos;utf-8&apos; ) as tips:</span><br><span class="line">    reader = csv.reader(tips)</span><br><span class="line">    for row in reader:</span><br><span class="line">        tmp_lst.append(row)</span><br><span class="line">tips = pd.DataFrame(tmp_lst[1:], columns=tmp_lst[0]) </span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 创建表格区域g，给定对应数据x,y,data</span><br><span class="line"></span><br><span class="line"># g=sns.JointGrid(x=&apos;total_bill&apos;,y=&apos;tip&apos;,data=tips)#当做一个变量</span><br><span class="line"># g.plot_joint(plt.scatter,color=&apos;m&apos;,edgecolor=&apos;white&apos;)#设置框内散点图 中间大图</span><br><span class="line"># g.ax_marg_x.hist(tips[&apos;total_bill&apos;],color=&apos;g&apos;,</span><br><span class="line">#                  )#设置x直方图 bins=np.arange(0,60,3)</span><br><span class="line"># g.ax_marg_y.hist(tips[&apos;tip&apos;],color=&apos;r&apos;,</span><br><span class="line">#                  orientation=&apos;horizontal&apos;,</span><br><span class="line">#                  )#设置y直方图 bins=np.arange(0,12,1)</span><br><span class="line"></span><br><span class="line"># from scipy import stats</span><br><span class="line"># g.annotate(stats.pearsonr) #设置标注 可以是spearmanr</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 综合散点图 JointGrid() 第二种</span><br><span class="line"># 在JointGrid()的基础上通过plot_joint() + plot_marginals()</span><br><span class="line"></span><br><span class="line"># g=sns.JointGrid(x=&apos;total_bill&apos;,y=&apos;tip&apos;,data=iris)</span><br><span class="line"># g.plot_jiont(plt.scatter,color=&apos;m&apos;)#设置框内图表 </span><br><span class="line"># g.plot_marginals(sns.distplot,kde=True,color=&apos;g&apos;)#同时绘制x,y轴直方图</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 与上面相同，也可以是密度图</span><br><span class="line"># g=sns.JiontGrid(x=&apos;列名1&apos;,y=&apos;列名2&apos;,data=df)</span><br><span class="line"># g.plot_jiont(sns.kdeplot,color=&apos;m&apos;) </span><br><span class="line"># g.plot_marginals(sns.kdeplot,kde=True,color=&apos;g&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 矩阵散点图 sns.pairplot()</span><br><span class="line"># iris=sns.load_dataset(&apos;iris&apos;) 解决如下：</span><br><span class="line"># iris</span><br><span class="line"></span><br><span class="line">import csv</span><br><span class="line">tmp_lst = []</span><br><span class="line">with open(&apos;./seaborn-data/iris.csv&apos;, &apos;r&apos;,encoding = &apos;utf-8&apos; ) as iris:</span><br><span class="line">    reader = csv.reader(iris)</span><br><span class="line">    for row in reader:</span><br><span class="line">        tmp_lst.append(row)</span><br><span class="line">iris = pd.DataFrame(tmp_lst[1:], columns=tmp_lst[0])</span><br><span class="line"># iris.head()</span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,</span><br><span class="line">            kind=&apos;scatter&apos;,# 散点图、回归分布图(reg)</span><br><span class="line">            diag_kind=&apos;hist&apos;,#直方图、密度图(kde)</span><br><span class="line">            hue=&apos;species&apos;, #按照某一字段进行分类</span><br><span class="line">            palette=&apos;husl&apos;, #调色盘</span><br><span class="line">            markers=[&apos;o&apos;,&apos;s&apos;,&apos;D&apos;],#不同列的点样式</span><br><span class="line">            height=2 #图表大小</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sns.stripplot(x=&apos;day&apos;,#分组统计字段</span><br><span class="line">#                 y=&apos;total_bill&apos;, #分布统计字段</span><br><span class="line">#              data=tips,</span><br><span class="line">#               jitter=True,</span><br><span class="line">#               size=5,edgecolor=&apos;w&apos;,linewidth=1,marker=&apos;o&apos;</span><br><span class="line">#              )</span><br></pre></td></tr></table></figure><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot()</span><br></pre></td></tr></table></figure><h3 id="小提琴图"><a href="#小提琴图" class="headerlink" title="小提琴图"></a>小提琴图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot()</span><br></pre></td></tr></table></figure><h3 id="统计图"><a href="#统计图" class="headerlink" title="统计图"></a>统计图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.barplot()</span><br><span class="line">sns.countplot 计数柱状图</span><br><span class="line">sns.pointplot() 折线图</span><br></pre></td></tr></table></figure><h2 id="线性数据可视化"><a href="#线性数据可视化" class="headerlink" title="线性数据可视化"></a>线性数据可视化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot()</span><br></pre></td></tr></table></figure><h2 id="时间线图表-热图"><a href="#时间线图表-热图" class="headerlink" title="时间线图表 热图"></a>时间线图表 热图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsplot() 新版没了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 热图</span><br><span class="line">df=pd.DataFrame(np.random.rand(10,12))</span><br><span class="line">sns.heatmap(df,vmin=0,vmax=1)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/Python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析之建模-蒙特卡罗</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/</guid>
      <pubDate>Sat, 05 Jun 2021 06:30:01 GMT</pubDate>
      <description>
      
        使用随机数来解决问题的方法,是一种思想
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="蒙特卡罗"><a href="#蒙特卡罗" class="headerlink" title="蒙特卡罗"></a>蒙特卡罗</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#蒙特卡罗 计算圆周率π</span><br><span class="line">n=10000 # 实验次数</span><br><span class="line">r=1 #半径</span><br><span class="line">a,b=(0.0,0.0) #圆心坐标</span><br><span class="line"></span><br><span class="line"># 正方形边界范围</span><br><span class="line">xmin,xmax=a-r,a+r</span><br><span class="line">ymin,ymax=b-r,b+r</span><br><span class="line"></span><br><span class="line"># 随机点的坐标</span><br><span class="line">x=np.random.uniform(xmin,xmax,n)</span><br><span class="line">y=np.random.uniform(ymin,ymax,n)</span><br><span class="line"># x -- 随机数的最小值，包含该值。</span><br><span class="line"># y -- 随机数的最大值，不包含该值。</span><br><span class="line"># n -- 指定次数，n是几，x就有几个值</span><br><span class="line"># 返回一个浮点数</span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(6,6))</span><br><span class="line">axes=fig.add_subplot(1,1,1)</span><br><span class="line">plt.plot(x,y,&apos;ro&apos;,markersize=1,color=&apos;b&apos;)</span><br><span class="line">d=np.sqrt((x-a)**2+(y-b)**2) #随机点距圆心的距离</span><br><span class="line"></span><br><span class="line"># np.where(condition, x, y)</span><br><span class="line"># 满足条件(condition)，输出x，不满足输出y。</span><br><span class="line">res=sum(np.where(d&lt;r,1,0))</span><br><span class="line"></span><br><span class="line">#正方形面积=(2r)**2 即边长的平方=4(r)**2</span><br><span class="line">#圆的面积=π(r)**2 </span><br><span class="line"># 圆的面积/正方形面积=π/4=res/n 面积之比=数量之比</span><br><span class="line">pi=4*res/n</span><br><span class="line"></span><br><span class="line">from matplotlib.patches import Circle</span><br><span class="line">circle=Circle(xy=(a,b),radius=r,alpha=0.5,color=&apos;g&apos;)</span><br><span class="line">axes.add_patch(circle)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析之聚类</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%81%9A%E7%B1%BB/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%81%9A%E7%B1%BB/</guid>
      <pubDate>Fri, 04 Jun 2021 07:08:32 GMT</pubDate>
      <description>
      
        将观测对象的群体按照相似性和相异性进行不同群组划分。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp; 聚类可用于降维。一般降维是为了更好的做回归或分类。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h2><ul><li>PCA主成分：提取数据的主要特征，高维数据的降维</li><li>k-means聚类</li></ul><p><code>https://zhuanlan.zhihu.com/p/37777074</code></p><p><strong>在许多领域的研究与应用中，通常需要对含有多个变量的数据进行观测，收集大量数据后进行分析寻找规律。多变量大数据集无疑会为研究和应用提供丰富的信息，但是也在一定程度上增加了数据采集的工作量。更重要的是在很多情形下，许多变量之间可能存在相关性，从而增加了问题分析的复杂性。如果分别对每个指标进行分析，分析往往是孤立的，不能完全利用数据中的信息，因此盲目减少指标会损失很多有用的信息，从而产生错误的结论。</strong></p><p><strong>因此需要找到一种合理的方法，在减少需要分析的指标同时，尽量减少原指标包含信息的损失，以达到对所收集数据进行全面分析的目的。由于各变量之间存在一定的相关关系，因此可以考虑将关系紧密的变量变成尽可能少的新变量，使这些新变量是两两不相关的，那么就可以用较少的综合指标分别代表存在于各个变量中的各类信息。主成分分析与因子分析就属于这类降维算法。</strong></p><h2 id="PCA主成分"><a href="#PCA主成分" class="headerlink" title="PCA主成分"></a>PCA主成分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 二维数组降维 至一维</span><br><span class="line">rng=np.random.RandomState(8)</span><br><span class="line">data=np.dot(rng.rand(2,2),rng.rand(2,200)).T</span><br><span class="line">df=pd.DataFrame(&#123;</span><br><span class="line">    &apos;x1&apos;:data[:,0],</span><br><span class="line">    &apos;x2&apos;:data[:,1]</span><br><span class="line">&#125;)</span><br><span class="line">print(df.head())</span><br><span class="line">print(df.shape)</span><br><span class="line"></span><br><span class="line">plt.scatter(df[&apos;x1&apos;],df[&apos;x2&apos;],alpha=0.8,marker=&apos;.&apos;)</span><br><span class="line">plt.axis(&apos;equal&apos;)</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">from sklearn.decomposition import PCA</span><br><span class="line">pca=PCA(n_components=1)#将至1维 即保留下来的特征个数</span><br><span class="line"># pca参数copy : bool, default=True运算时将原始数据复制一份</span><br><span class="line">pca.fit(df) #参数录入 对df数据进行降维</span><br><span class="line"></span><br><span class="line"># 查看降维后的数据</span><br><span class="line">print(pca.explained_variance_) #特征值1个 [0.21126245]</span><br><span class="line">print(pca.components_)#特征向量2个 [[0.79207584 0.6104227 ]]</span><br><span class="line">print(pca.n_components) # 保留的主成分个数 1</span><br><span class="line"></span><br><span class="line"># 主成分=0.79207584*X1 + 0.6104227*X2</span><br><span class="line">#数据转换</span><br><span class="line">x_pca=pca.transform(df) #降维后数据x_pca</span><br><span class="line">#用df来训练PCA模型，返回降维后的数据</span><br><span class="line">print(&apos;降维后数据:&apos;)</span><br><span class="line">print(x_pca.shape) #(200, 1)</span><br><span class="line">print(x_pca[:5])</span><br><span class="line"></span><br><span class="line">#将降维后的数据转换成原始数据形式</span><br><span class="line">x_new=pca.inverse_transform(x_pca)</span><br><span class="line">print(&apos;降维后的数据转换成原始数据形式&apos;)</span><br><span class="line">print(x_new.shape) #(200, 2)</span><br><span class="line">print(x_new[:5])</span><br><span class="line"></span><br><span class="line">plt.scatter(df[&apos;x1&apos;],df[&apos;x2&apos;],alpha=0.8,marker=&apos;.&apos;)</span><br><span class="line">plt.scatter(x_new[:,0],x_new[:,1],alpha=0.8,marker=&apos;.&apos;,color=&apos;r&apos;)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 多维数据降维</span><br><span class="line">from sklearn.datasets import load_digits</span><br><span class="line">digits=load_digits()</span><br><span class="line">print(digits.keys())</span><br><span class="line">print(&apos;数据长度为%i条&apos; % len(digits[&apos;data&apos;]))</span><br><span class="line">print(&apos;数据形状为&apos;,digits.data.shape) #1797行，64列</span><br><span class="line">digits.data[:2]</span><br><span class="line"></span><br><span class="line">pca=PCA(n_components=10)#降到10维</span><br><span class="line">projected=pca.fit_transform(digits.data)</span><br><span class="line">print(&apos;降维后数据形状为&apos;,projected.shape)</span><br><span class="line"></span><br><span class="line">s=pca.explained_variance_ #特征值10个</span><br><span class="line">c_s=pd.DataFrame(&#123;</span><br><span class="line">    &apos;b&apos;:s,</span><br><span class="line">    &apos;b_sum&apos;:s.cumsum()/s.sum() #累计占比</span><br><span class="line">&#125;)</span><br><span class="line">print(s)</span><br><span class="line">c_s[&apos;b_sum&apos;].plot(style=&apos;--ko&apos;,figsize=(10,4))</span><br><span class="line">plt.axhline(0.85,color=&apos;r&apos;,linestyle=&apos;--&apos;,alpha=0.8)</span><br><span class="line">plt.text(6,c_s[&apos;b_sum&apos;].iloc[6]-0.08,&apos;前7个成分累积贡献率超过85%&apos;,color=&apos;r&apos;)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><h2 id="k-means聚类"><a href="#k-means聚类" class="headerlink" title="k-means聚类"></a>k-means聚类</h2><ul><li>K均值算法逻辑实现：<br><strong>K均值算法需要输入待聚类的数据和欲聚类的簇数K</strong></li><li>随机生成K个初始点作为质点</li><li>将数据集中的数据按照距离质心的远近分到各个簇中</li><li>各个簇中的数据求平均值，作为新的质心，重复上一步，直到所有的簇不在改变。<br><strong>簇数量需要先给定</strong><br><strong>不适用非线性</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚类数据生成器</span><br><span class="line">from sklearn.datasets.samples_generator import make_blobs</span><br><span class="line">x,y_ture=make_blobs(n_samples=300, #生成300条数据</span><br><span class="line">                   centers=4,      #4类数据</span><br><span class="line">                   cluster_std=0.5,#方差一致都是0.5 越小数据越聚集</span><br><span class="line">                   random_state=0) #随机数种子</span><br><span class="line"># x生成数据值，y生成数据对应的类别标签</span><br><span class="line">print(x[:5])</span><br><span class="line">print(y_ture[:5])</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:,0],x[:,1],s=10,alpha=0.8) #s点的面积</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">kmeans=KMeans(n_clusters=4)</span><br><span class="line"></span><br><span class="line">kmeans.fit(x)</span><br><span class="line">y_kmeans=kmeans.predict(x) #类别值 数据标签</span><br><span class="line">centroids=kmeans.cluster_centers_ #中心点</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:,0],x[:,1],c=y_kmeans,cmap=&apos;Dark2&apos;,s=50,alpha=0.8,marker=&apos;*&apos;)</span><br><span class="line">plt.scatter(centroids[:,0],centroids[:,1],c=[0,1,2,3],cmap=&apos;Reds&apos;,s=70,marker=&apos;o&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60bb15d08355f7f7181c5ee5.png" alt="k_means" title="k-means"></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E8%81%9A%E7%B1%BB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析之KNN最临近分类</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-KNN%E6%9C%80%E4%B8%B4%E8%BF%91%E5%88%86%E7%B1%BB/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-KNN%E6%9C%80%E4%B8%B4%E8%BF%91%E5%88%86%E7%B1%BB/</guid>
      <pubDate>Fri, 04 Jun 2021 04:49:26 GMT</pubDate>
      <description>
      
        分类问题应用场景，给事物打上一个标签
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>指的是从数据中选出已经分好类的训练集，在改分类集上应用数据挖掘分类的技术，建立分类模型，对于没有分类的数据进行分类的分析方法。</li><li>应用场景：分类问题应用场景，给事物打上一个标签，通常结果为离散值，例如判断一幅图片上的动物是小猫还是一只小狗，分类通常建立在回归之上。</li><li>基本的分类方法：KNN最临近算法</li></ul><h2 id="KNN最临近算法"><a href="#KNN最临近算法" class="headerlink" title="KNN最临近算法"></a>KNN最临近算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 引入KNN模块</span><br><span class="line">from sklearn import neighbors</span><br><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&apos;ignore&apos;) #不发出警告</span><br><span class="line"></span><br><span class="line">data=pd.DataFrame(&#123;</span><br><span class="line">    &apos;name&apos;:[&apos;北京遇上西雅图&apos;,&apos;喜欢你&apos;,&apos;疯狂动物城&apos;,&apos;战狼2&apos;,&apos;敢死队&apos;,&apos;力王&apos;],</span><br><span class="line">    &apos;fight&apos;:[3,2,1,101,99,97],</span><br><span class="line">    &apos;kiss&apos;:[104,100,81,10,5,2],</span><br><span class="line">    &apos;type&apos;:[&apos;Romans&apos;,&apos;Romans&apos;,&apos;Romans&apos;,&apos;Action&apos;,&apos;Action&apos;,&apos;Action&apos;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 绘制散点图看分布位置</span><br><span class="line"></span><br><span class="line">plt.scatter(data[data[&apos;type&apos;]==&apos;Romans&apos;][&apos;fight&apos;],</span><br><span class="line">            data[data[&apos;type&apos;]==&apos;Romans&apos;][&apos;kiss&apos;],</span><br><span class="line">            color=&apos;r&apos;,marker=&apos;o&apos;,label=&apos;Romans&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(data[data[&apos;type&apos;]==&apos;Action&apos;][&apos;fight&apos;],</span><br><span class="line">            data[data[&apos;type&apos;]==&apos;Action&apos;][&apos;kiss&apos;],</span><br><span class="line">            color=&apos;g&apos;,marker=&apos;o&apos;,label=&apos;Action&apos;)</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line">plt.legend() #添加图例</span><br><span class="line"></span><br><span class="line">knn=neighbors.KNeighborsClassifier() #建立分类模型</span><br><span class="line">#根据打架和接吻的数据预测电影类型 是爱情片或动作片</span><br><span class="line">knn.fit(data[[&apos;fight&apos;,&apos;kiss&apos;]],data[&apos;type&apos;]) </span><br><span class="line"></span><br><span class="line">#《你的名字》电影的fight&apos;,&apos;kiss&apos;两个数据，预测到类型为爱情片</span><br><span class="line">knn.predict([[18,90]]) </span><br><span class="line"></span><br><span class="line">plt.scatter(19,90,color=&apos;r&apos;,marker=&apos;x&apos;,label=&apos;Romans&apos;)</span><br><span class="line">plt.ylabel=&apos;kiss&apos;</span><br><span class="line">plt.xlabel=&apos;fight&apos;</span><br><span class="line">plt.text(19,90,&apos;《你的名字》&apos;,color=&apos;r&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 一次预测多个电影的类型</span><br><span class="line">data_test=pd.DataFrame(&#123;</span><br><span class="line">    &apos;name&apos;:[&apos;电影x&apos;,&apos;电影y&apos;,&apos;电影z&apos;,&apos;电影m&apos;,&apos;电影n&apos;],</span><br><span class="line">    &apos;fight&apos;:[32,27,11,41,69],</span><br><span class="line">    &apos;kiss&apos;:[24,10,41,110,54]</span><br><span class="line">&#125;)</span><br><span class="line">data_test[&apos;type_test&apos;]=knn.predict(data_test[[&apos;fight&apos;,&apos;kiss&apos;]])</span><br><span class="line">data_test #得到了类型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># KNN算法-官方案例植物分类 多参数</span><br><span class="line">from sklearn import datasets</span><br><span class="line">iris=datasets.load_iris() #导入数据</span><br><span class="line">print(iris.keys())</span><br><span class="line">print(&apos;数据长度为%i条&apos; % len(iris[&apos;data&apos;]))</span><br><span class="line"></span><br><span class="line">print(iris.feature_names) #特征名称</span><br><span class="line">print(iris.target_names)#分类名称</span><br><span class="line">print(iris.target) #分类后数据</span><br><span class="line"></span><br><span class="line">data=pd.DataFrame(iris.data,columns=iris.feature_names)</span><br><span class="line">data[&apos;target&apos;]=iris.target</span><br><span class="line"></span><br><span class="line">ty=pd.DataFrame(&#123;</span><br><span class="line">    &apos;target&apos;:[0,1,2],</span><br><span class="line">    &apos;target_names&apos;:[&apos;setosa&apos;,&apos;versicolor&apos;,&apos;virginica&apos;]</span><br><span class="line">&#125;)</span><br><span class="line">print(ty)</span><br><span class="line"></span><br><span class="line">df=pd.merge(data,ty,on=&apos;target&apos;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">knn=neighbors.KNeighborsClassifier()</span><br><span class="line">knn.fit(iris.data,df[&apos;target_names&apos;]) </span><br><span class="line"></span><br><span class="line">#这是一组检测数据 多组的话类似上面的多个电影</span><br><span class="line"># [0.2,0.1,0.3,0.4]</span><br><span class="line">pre_data=knn.predict([[0.2,0.1,0.3,0.4]])</span><br><span class="line">print(pre_data) #得到花名为setosa</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-KNN%E6%9C%80%E4%B8%B4%E8%BF%91%E5%88%86%E7%B1%BB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据分析之线性回归</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <pubDate>Thu, 03 Jun 2021 08:04:33 GMT</pubDate>
      <description>
      
        线性回归对已有数据进行建模，可以对未来数据进行预测。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;线性回归是所有机器学习技术的一个最好起点，很多复杂的机器学习技术以及当前大火的深度神经网络都或多或少基于线性回归。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><ul><li>Supervised Learning,即给定一些数据，使用计算机学习到一种模式，然后用它来预测新的数据。</li><li>包括：回归问题和分类问题</li><li>想要预测的目标值房价是连续的，我们称这类问题为回归（Regression）问题。</li><li>与之相对应，当目标值只能在一个有限的离散集合里选择，比如预测房价是否大于100万，结果只有“是”和“否”两种选项，我们称这类问题为分类（Classification）问题。</li></ul><h2 id="线性回归介绍"><a href="#线性回归介绍" class="headerlink" title="线性回归介绍"></a>线性回归介绍</h2><p><code>https://lulaoshi.info/machine-learning/linear-model/linear-regression.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定数据集D,数据集中有m个数据对。在房价的例子中，一共有47个数据对，我们可以基于这些数据，使用某种机器学习模型对其进行建模，学习到数据中的规律，得到一个模型（Model），其中某个给定的数据集D为样本（Sample），又被称为训练集（Training Set），x为特征（Feature），y 为真实值（Label）或者目标值（Target）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们再用更加规范的方式来描述一下监督学习问题，我们的目标是，给定一个训练集，机器学习能够学习出一个函数 h: X → Yh:X→Y，当有新的x到达时， h(x) 能够得到一个预测值.</span><br></pre></td></tr></table></figure><h3 id="一元线性方程"><a href="#一元线性方程" class="headerlink" title="一元线性方程"></a>一元线性方程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前面我们展示了房价数据集中房屋面积与房价之间的数据。根据我们的社会经验和图中的数据分布，我们觉得能使用一个直线来描述“房价随着房屋面积增加而增加”的现象。针对这个数据集，可以使用一个最简单的机器学习模型——线性回归。</span><br><span class="line">y = ax + b</span><br><span class="line"></span><br><span class="line">中学时，我们经常使用上面的方程来解一些数学问题，方程描述了变量 y随着变量 x而变化。方程从图形上来看，是一条直线。如果建立好这样的数学模型，已知 x我们就可以得到预测的y帽了。统计学家给变量带上了一个小帽子，表示这是预测值，以区别于真实观测到的数据。方程只有一个自变量 x且不含平方立方等非一次项，因此被称为一元线性方程。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在对数据集进行建模时，我们只关注房屋面积和房价两个维度的数据。我们可以对参数a和b取不同值来构建不同的直线，这样就形成了一个参数家族。</span><br><span class="line">参数家族中有一个最佳组合，可以在统计上以最优的方式描述数据集。那么一元线性回归的监督学习过程就可以被定义为：给定m个数据对(x,y)，寻找最佳参数 a*和b*使模型可以更好地拟合这些数据。</span><br><span class="line">对于线性回归，一个简单实用的损失函数为预测值与真实值误差的平方。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误差的平方是一个正方形，将正方形的面积求和再取平均，就是损失函数。</span><br><span class="line">所有的正方形的平均面积越小，损失越小。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一元线性回归的最小二乘法求解过程得到最佳参数 a*和b*。很多机器学习模型中都需要经历上述过程：确定损失函数，求使损失函数最小的参数。求解过程会用到一些简单的微积分，因此复习一下微积分中偏导数部分，有助于理解机器学习的数学原理。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 导入线性回归模块</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">rng=np.random.RandomState(1) </span><br><span class="line">#随机数种子 这里1为随机数种子，只要随机数种子相同，产生的随机数系列就相同</span><br><span class="line"></span><br><span class="line">#训练数据</span><br><span class="line">xtrain=10*rng.rand(30)</span><br><span class="line">#y = ax + b形式，其中rng.rand(30)为干扰项</span><br><span class="line">#实际中，ytrain为一列数据，它的表达式是我们后面要求出来的</span><br><span class="line">ytrain=8+4*xtrain+rng.rand(30) </span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(10,4))</span><br><span class="line">ax1=fig.add_subplot(1,2,1)</span><br><span class="line">plt.scatter(xtrain,ytrain,marker=&apos;.&apos;,color=&apos;k&apos;)</span><br><span class="line">plt.title(&apos;样本数据散点图&apos;)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">model=LinearRegression() #使用已有模块创建模型实例</span><br><span class="line"></span><br><span class="line"># 参数录入模型 得到LinearRegression() 即得到y = ax + b 里面的a和b</span><br><span class="line">model.fit(xtrain[:,np.newaxis],ytrain)</span><br><span class="line">#注意xtrain是不行的，要换一种形式xtrain[:,np.newaxis] 多维</span><br><span class="line"></span><br><span class="line">print(&apos;斜率a&apos;,model.coef_)</span><br><span class="line">print(&apos;截距b&apos;,model.intercept_)</span><br><span class="line"></span><br><span class="line">#测试数据</span><br><span class="line">xtest=np.linspace(0,10,1000) #自变量</span><br><span class="line">#根据模型y = ax + b预测得到ytest</span><br><span class="line">ytest=model.predict(xtest[:,np.newaxis]) #应变量 predict预测</span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(10,4))</span><br><span class="line">ax2=fig.add_subplot(1,2,2)</span><br><span class="line"></span><br><span class="line">plt.scatter(xtrain,ytrain,marker=&apos;.&apos;,color=&apos;k&apos;)</span><br><span class="line">plt.plot(xtest,ytest,color=&apos;r&apos;) #一条直线</span><br><span class="line">plt.title(&apos;测试数据散点拟合图&apos;)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 误差</span><br><span class="line">rng=np.random.RandomState(8) </span><br><span class="line">xtrain=10*rng.rand(15)</span><br><span class="line">ytrain=8+4*xtrain+rng.rand(15)*30</span><br><span class="line"></span><br><span class="line">model=LinearRegression()</span><br><span class="line">model.fit(xtrain[:,np.newaxis],ytrain)</span><br><span class="line"></span><br><span class="line">xtest=np.linspace(0,10,1000)</span><br><span class="line">ytest=model.predict(xtest[:,np.newaxis])</span><br><span class="line"></span><br><span class="line">plt.plot(xtest,ytest,linestyle=&apos;--&apos;,color=&apos;r&apos;) #拟合直线</span><br><span class="line">plt.scatter(xtrain,ytrain,marker=&apos;.&apos;,color=&apos;k&apos;)#样本数据散点图</span><br><span class="line"></span><br><span class="line">ytest2=model.predict(xtrain[:,np.newaxis])#样本数据x在拟合直线上的Y值</span><br><span class="line">plt.scatter(xtrain,ytest2,marker=&apos;x&apos;,color=&apos;g&apos;)#ytest2散点图</span><br><span class="line">plt.plot([xtrain,xtrain],[ytrain,ytest2],color=&apos;gray&apos;) #误差线</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(&apos;误差&apos;)</span><br></pre></td></tr></table></figure><h3 id="线性回归的一般形式"><a href="#线性回归的一般形式" class="headerlink" title="线性回归的一般形式"></a>线性回归的一般形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们现在把回归问题扩展到更为一般的场景。假设x是多元的，或者说是多维的。比如，要预测房价，需要考虑包括是否学区、房间数量、周边是否繁华、交通方便性等。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fω(x)=b + w1 × x1 + w2 × x2 +...+wn × xn</span><br><span class="line">​</span><br><span class="line">这里的w是参数（也可以叫做权重），是从 x 到 y的线性回归参数。为了简化表示，我们可以把f_w(x)fw(x)里面的w省略掉，就简写成f(x)。这里共有n种维度的影响因素，机器学习领域将这n种影响因素称为特征（Feature）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 多元线性回归</span><br><span class="line">rng=np.random.RandomState(5)</span><br><span class="line">xtrain=10*rng.rand(150,4)</span><br><span class="line">ytrain=20+np.dot(xtrain,[1.5,2,-4,3])</span><br><span class="line">df=pd.DataFrame(xtrain,columns=[&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos;,&apos;b4&apos;])</span><br><span class="line">df[&apos;y&apos;]=ytrain</span><br><span class="line"># df.head()</span><br><span class="line"></span><br><span class="line"># 绘制矩阵散点图(scatter_matrix) 来看看 数据两两之间的关系 </span><br><span class="line">pd.plotting.scatter_matrix(df[[&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos;,&apos;b4&apos;]], </span><br><span class="line">                 figsize=(10,6),</span><br><span class="line">                 diagonal=&apos;kde&apos;,</span><br><span class="line">                 alpha=0.5,</span><br><span class="line">                 range_padding=0.1)</span><br><span class="line"></span><br><span class="line">model=LinearRegression()</span><br><span class="line">model.fit(df[[&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos;,&apos;b4&apos;]],df[&apos;y&apos;])</span><br><span class="line"></span><br><span class="line">print(&apos;斜率a为&apos;,model.coef_)</span><br><span class="line">print(&apos;截距b为%.2f&apos; % model.intercept_)</span><br></pre></td></tr></table></figure><h3 id="线性回归模型评估"><a href="#线性回归模型评估" class="headerlink" title="线性回归模型评估"></a>线性回归模型评估</h3><ul><li>确定系数[0,1],越接近1，则模型对数据拟合的越好</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 模型评估</span><br><span class="line">from sklearn import metrics</span><br><span class="line">rng=np.random.RandomState(1)</span><br><span class="line">xtrain=10*rng.rand(30)</span><br><span class="line">ytrain=8+4*xtrain+rng.rand(30)*3</span><br><span class="line"></span><br><span class="line">model=LinearRegression()</span><br><span class="line">model.fit(xtrain[:,np.newaxis],ytrain)</span><br><span class="line"></span><br><span class="line">ytest=model.predict(xtrain[:,np.newaxis])</span><br><span class="line"></span><br><span class="line">mse=metrics.mean_absolute_error(ytrain,ytest)# 均方差</span><br><span class="line">rmse=np.sqrt(mse)#均方根</span><br><span class="line">ssr=((ytest-ytrain.mean())**2).sum()</span><br><span class="line">sst=((ytrain-ytrain.mean())**2).sum()</span><br><span class="line"></span><br><span class="line">r2=ssr/sst #确定系数r2 读作R方</span><br><span class="line">print(r2) #越接近1越好</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%BB%BA%E6%A8%A1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析之数据标准化</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/</guid>
      <pubDate>Wed, 02 Jun 2021 16:15:16 GMT</pubDate>
      <description>
      
        数据的标准化是将数据按比例缩放，使之落入一个小的特定区间。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="数据归一化-标准化"><a href="#数据归一化-标准化" class="headerlink" title="数据归一化/标准化"></a>数据归一化/标准化</h2><ul><li>数据的标准化normalization是将数据按比例缩放，使之落入一个小的特定区间。</li><li>在某些比较和评价的指标处理中经常会用到，去除数据的单位限制，将其转化为无量纲的纯数值，</li><li>便于不同单位或量级的指标能够进行比较和加权</li><li>最典型的就是数据的归一化处理，即将数据统一映射到[0,1]区间上</li><li>常见的0-1标准化和Z-score标准化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 数据标准化 0-1标准化</span><br><span class="line"># 将数据的最大最小值记录下来，并通过Max-Min作为基数（即Min=0，Max=1）进行数据的归一化处理</span><br><span class="line"># x = (x - Min) / (Max - Min)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;value1&quot;:np.random.rand(10)*20, #0-20的数据</span><br><span class="line">                  &apos;value2&apos;:np.random.rand(10)*100&#125;) #0-100的数据</span><br><span class="line">print(df.head())</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建函数，标准化数据</span><br><span class="line">def data_norm(df,*cols):</span><br><span class="line">    df_n = df.copy() #在副本上操作</span><br><span class="line">    for col in cols:</span><br><span class="line">        ma = df_n[col].max()</span><br><span class="line">        mi = df_n[col].min()</span><br><span class="line">        df_n[col + &apos;_n&apos;] = (df_n[col] - mi) / (ma - mi)</span><br><span class="line">    return(df_n)</span><br><span class="line"></span><br><span class="line">df_n = data_norm(df,&apos;value1&apos;,&apos;value2&apos;)</span><br><span class="line">print(df_n.head())</span><br><span class="line"># 标准化数据 可以看到value1_n 和 value2_n都在0-1之间了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 数据标准化 Z-score标准化 处理后符合标准正态分布</span><br><span class="line"># Z分数（z-score）,是一个分数与平均数的差再除以标准差的过程</span><br><span class="line"># z=(x-μ)/σ，其中x为某一具体分数，μ为平均数，σ为标准差</span><br><span class="line"># Z值的量代表着原始分数和母体平均值之间的距离，是以标准差为单位计算。</span><br><span class="line"># 在原始分数低于平均值时Z则为负数，反之则为正数</span><br><span class="line"># 数学意义：一个给定分数距离平均数多少个标准差?</span><br><span class="line"></span><br><span class="line"># 经过Z-score标准化数据处理的数据符合标准正态分布，即均值为0，标准差为1</span><br><span class="line"># 什么情况用Z-score标准化：</span><br><span class="line"># 在分类、聚类算法中，需要使用距离来度量相似性的时候，Z-score表现更好</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;value1&quot;:np.random.rand(10) * 100,</span><br><span class="line">                  &apos;value2&apos;:np.random.rand(10) * 100&#125;)</span><br><span class="line">print(df.head())</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line"># 创建函数，标准化数据</span><br><span class="line">def data_Znorm(df, *cols):</span><br><span class="line">    df_n = df.copy()</span><br><span class="line">    for col in cols:</span><br><span class="line">        u = df_n[col].mean()</span><br><span class="line">        std = df_n[col].std()</span><br><span class="line">        df_n[col + &apos;_Zn&apos;] = (df_n[col] - u) / std</span><br><span class="line">    return(df_n)</span><br><span class="line"></span><br><span class="line">df_z = data_Znorm(df,&apos;value1&apos;,&apos;value2&apos;)</span><br><span class="line"></span><br><span class="line">u_z = df_z[&apos;value1_Zn&apos;].mean()</span><br><span class="line">std_z = df_z[&apos;value1_Zn&apos;].std()</span><br><span class="line">print(df_z)</span><br><span class="line">print(&apos;标准化后value1的均值为:%.2f, 标准差为：%.2f&apos; % (u_z, std_z))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 数据标准化-案例应用</span><br><span class="line"># 八类产品的两个指标value1，value2，其中value1权重为0.6，value2权重为0.4</span><br><span class="line"># 通过0-1标准化，判断哪个产品综合指标状况最好</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;value1&quot;:np.random.rand(10) * 30,</span><br><span class="line">                  &apos;value2&apos;:np.random.rand(10) * 100&#125;,</span><br><span class="line">                 index = list(&apos;ABCDEFGHIJ&apos;))</span><br><span class="line"></span><br><span class="line"># 进行标准化处理</span><br><span class="line">df_n1 = data_norm(df,&apos;value1&apos;,&apos;value2&apos;)</span><br><span class="line"></span><br><span class="line">#分配权重</span><br><span class="line">df_n1[&apos;f&apos;] = df_n1[&apos;value1_n&apos;] * 0.6 + df_n1[&apos;value2_n&apos;] * 0.4</span><br><span class="line"></span><br><span class="line">#排序</span><br><span class="line">df_n1.sort_values(by = &apos;f&apos;,inplace=True,ascending=False)</span><br><span class="line"></span><br><span class="line"># 查看综合指标状况</span><br><span class="line">df_n1[&apos;f&apos;].plot(kind = &apos;line&apos;, style = &apos;--.k&apos;, alpha = 0.8, grid = True)</span><br><span class="line">df_n1</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据分析之数据处理</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E7%BC%BA%E5%A4%B1%E5%92%8C%E5%BC%82%E5%B8%B8/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E7%BC%BA%E5%A4%B1%E5%92%8C%E5%BC%82%E5%B8%B8/</guid>
      <pubDate>Wed, 02 Jun 2021 06:33:28 GMT</pubDate>
      <description>
      
        缺失值，异常值分析处理
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><ul><li>数据缺失主要包括记录缺失和字段信息缺失等情况，其对数据分析会有较大影响，导致结果不确定性更加显著</li><li>缺失值的处理：删除记录,数据插补,不处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from scipy import stats</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 判断是否有缺失值数据 </span><br><span class="line"># isnull：缺失值为True，非缺失值为False</span><br><span class="line"># notnull：缺失值为False，非缺失值为True</span><br><span class="line"></span><br><span class="line">s = pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])</span><br><span class="line">df = pd.DataFrame(&#123;&apos;value1&apos;:[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],</span><br><span class="line">                  &apos;value2&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,np.nan,np.nan,&apos;f&apos;,&apos;g&apos;,np.nan,&apos;g&apos;]&#125;)</span><br><span class="line"></span><br><span class="line">print(s.isnull())  </span><br><span class="line">print(df.notnull()) </span><br><span class="line">print(df[&apos;value1&apos;].notnull())  # 指定列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s2 = s[s.isnull() == False] #筛选掉空值之后的数据</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line"># df2 = df[df[&apos;value2&apos;].notnull()]  #得到根据value2筛选之后的df </span><br><span class="line">df2 = df[df[&apos;value2&apos;].notnull()] [&apos;value1&apos;] #得到根据value2筛选之后的value1列</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 删除缺失值 - dropna</span><br><span class="line"># drop方法：可直接用于Series，Dataframe</span><br><span class="line"># 注意inplace参数，默认False → 生成新的值</span><br><span class="line"></span><br><span class="line">s = pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])</span><br><span class="line">df = pd.DataFrame(&#123;&apos;value1&apos;:[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],</span><br><span class="line">                  &apos;value2&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,np.nan,np.nan,&apos;f&apos;,&apos;g&apos;,np.nan,&apos;g&apos;]&#125;)</span><br><span class="line"># print(s)</span><br><span class="line"># print(&apos;------------------&apos;)</span><br><span class="line"># s.dropna(inplace = True)</span><br><span class="line"># print(s)</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">print(&apos;------------------&apos;)</span><br><span class="line">df2=df[&apos;value1&apos;].dropna() #只会生成新的数据</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 填充/替换缺失数据 - fillna、replace</span><br><span class="line"></span><br><span class="line">s = pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])</span><br><span class="line">df = pd.DataFrame(&#123;&apos;value1&apos;:[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],</span><br><span class="line">                  &apos;value2&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,np.nan,np.nan,&apos;f&apos;,&apos;g&apos;,np.nan,&apos;g&apos;]&#125;)</span><br><span class="line"></span><br><span class="line">s.fillna(0,inplace = True)</span><br><span class="line">print(s)</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"># s.fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)</span><br><span class="line"># value：填充值</span><br><span class="line"># 注意inplace参数</span><br><span class="line"></span><br><span class="line">df[&apos;value1&apos;].fillna(method = &apos;pad&apos;,inplace = True)</span><br><span class="line">print(df)</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"># method参数：</span><br><span class="line"># pad / ffill → 用之前的数据填充 </span><br><span class="line"># backfill / bfill → 用之后的数据填充 </span><br><span class="line"></span><br><span class="line">s = pd.Series([1,1,1,1,2,2,2,3,4,5,np.nan,np.nan,66,54,np.nan,99])</span><br><span class="line">s.replace(np.nan,&apos;缺失数据&apos;,inplace = True)</span><br><span class="line">print(s)</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"># df.replace(to_replace=None, value=None, inplace=False, limit=None, regex=False, method=&apos;pad&apos;, axis=None)</span><br><span class="line"># to_replace → 被替换的值</span><br><span class="line"># value → 替换值</span><br><span class="line"></span><br><span class="line">s.replace([1,2,3],np.nan,inplace = True)</span><br><span class="line">print(s)</span><br><span class="line"># 多个值用np.nan代替</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 缺失值插补</span><br><span class="line"># 几种思路：均值/中位数/众数插补、临近值(前面或后面的值)插补、插值法</span><br><span class="line"># （1）均值/中位数/众数插补</span><br><span class="line"></span><br><span class="line">s = pd.Series([1,2,3,np.nan,3,4,5,5,5,5,np.nan,np.nan,6,6,7,12,2,np.nan,3,4])</span><br><span class="line">#print(s)</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"># 创建数据</span><br><span class="line"></span><br><span class="line">u = s.mean()     # 均值</span><br><span class="line">me = s.median()  # 中位数</span><br><span class="line">mod = s.mode()   # 众数</span><br><span class="line">print(&apos;均值为：%.2f, 中位数为：%.2f&apos; % (u,me))</span><br><span class="line">print(&apos;众数为：&apos;, mod.tolist())</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.fillna(u,inplace = True)# 用均值填补</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 缺失值插补</span><br><span class="line"># （3）插值法 —— 拉格朗日插值法，实际运用</span><br><span class="line"></span><br><span class="line">data = pd.Series(np.random.rand(100)*100)</span><br><span class="line">data[3,6,33,56,45,66,67,80,90] = np.nan</span><br><span class="line">print(data.head())</span><br><span class="line">print(&apos;总数据量:%i&apos; % len(data))</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line"># 缺失值的数量</span><br><span class="line">data_na = data[data.isnull()]</span><br><span class="line">print(&apos;缺失值数据量:%i&apos; % len(data_na))</span><br><span class="line">print(&apos;缺失数据占比:%.2f%%&apos; % (len(data_na) / len(data) * 100))</span><br><span class="line"></span><br><span class="line">data_c = data.fillna(data.median())  #  中位数填充缺失值</span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(1,4,figsize = (20,5))</span><br><span class="line"></span><br><span class="line">data.plot.box(ax = axes[0],grid = True,title = &apos;数据分布&apos;)</span><br><span class="line"></span><br><span class="line"># 密度图查看缺失值情况</span><br><span class="line"># 密度曲线默认删除缺失值</span><br><span class="line">data.plot(kind = &apos;kde&apos;,style = &apos;--r&apos;,ax = axes[1],grid = True,title = &apos;删除缺失值&apos;,xlim = [-50,150])</span><br><span class="line"></span><br><span class="line"># 缺失值填充中位数</span><br><span class="line">data_c.plot(kind = &apos;kde&apos;,style = &apos;--b&apos;,ax = axes[2],grid = True,title = &apos;缺失值填充中位数&apos;,xlim = [-50,150])</span><br><span class="line"></span><br><span class="line"># 创建函数，做插值，由于数据量原因，以空值前后5个数据（共10个数据）为例做插值</span><br><span class="line"></span><br><span class="line">def na_c(s,n,k=5): #s:数据，n:插值的位置,k:n前后的5条数据</span><br><span class="line">    y = s[list(range(n-k,n+1+k))] # 取数</span><br><span class="line">    y = y[y.notnull()]  # 剔除空值</span><br><span class="line">    return(lagrange(y.index,list(y))(n))</span><br><span class="line"></span><br><span class="line">na_re = []</span><br><span class="line">for i in range(len(data)):</span><br><span class="line">    if data.isnull()[i]:</span><br><span class="line">        data[i] = na_c(data,i)</span><br><span class="line">        print(na_c(data,i))</span><br><span class="line">        na_re.append(data[i])</span><br><span class="line">data.dropna(inplace=True)  # 清除插值后仍存在的缺失值</span><br><span class="line">data.plot(kind = &apos;kde&apos;,style = &apos;--k&apos;,ax = axes[3],grid = True,title = &apos;拉格朗日插值后&apos;,xlim = [-50,150])</span><br></pre></td></tr></table></figure><h2 id="异常值分析处理"><a href="#异常值分析处理" class="headerlink" title="异常值分析处理"></a>异常值分析处理</h2><ul><li>分析：箱形图(工作中常用)，3σ法则(服从正太分布才行)</li><li>处理：删除，修正、填补</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#异常值分析 3σ法则</span><br><span class="line">#3σ法则：数据服从正态分布，异常数据定义为与平均值的差大于3倍标准差的值</span><br><span class="line">data = pd.Series(np.random.randn(10000)*100)</span><br><span class="line"></span><br><span class="line">u = data.mean()  # 计算均值</span><br><span class="line">std = data.std()  # 计算标准差</span><br><span class="line">stats.kstest(data, &apos;norm&apos;, (u, std)) #正太性检验 若大于0.05则为正态分布</span><br><span class="line">print(&apos;均值为：%.3f，标准差为：%.3f&apos; % (u,std))</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (10,6))</span><br><span class="line">ax1 = fig.add_subplot(2,1,1)</span><br><span class="line"></span><br><span class="line"># 绘制数据密度曲线</span><br><span class="line">data.plot(kind = &apos;kde&apos;,grid = True,style = &apos;-k&apos;,title = &apos;密度曲线&apos;)</span><br><span class="line"># 3σ线 这两条线两边的为异常值</span><br><span class="line">plt.axvline(3*std,color=&apos;r&apos;,linestyle=&quot;--&quot;,alpha=0.8) </span><br><span class="line">plt.axvline(-3*std,color=&apos;r&apos;,linestyle=&quot;--&quot;,alpha=0.8) </span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(2,1,2)</span><br><span class="line"># 筛选出异常值error、剔除异常值之后的数据data_c</span><br><span class="line">error = data[np.abs(data - u) &gt; 3*std]</span><br><span class="line">data_c = data[np.abs(data - u) &lt;= 3*std]</span><br><span class="line">print(&apos;异常值共%i条&apos; % len(error))</span><br><span class="line"></span><br><span class="line">plt.scatter(data_c.index,data_c,color = &apos;k&apos;,marker=&apos;.&apos;,alpha = 0.3)</span><br><span class="line">plt.scatter(error.index,error,color = &apos;r&apos;,marker=&apos;.&apos;,alpha = 0.5)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 异常值分析 箱型图分析</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (14,8))</span><br><span class="line">ax1 = fig.add_subplot(2,1,1)</span><br><span class="line">color = dict(boxes=&apos;DarkGreen&apos;, whiskers=&apos;DarkOrange&apos;, medians=&apos;DarkBlue&apos;, caps=&apos;Gray&apos;)</span><br><span class="line">data.plot.box(vert=False, grid = True,color = color,ax = ax1,label = &apos;样本数据&apos;)</span><br><span class="line"># 箱型图看数据分布情况</span><br><span class="line"># 以内限为界</span><br><span class="line"></span><br><span class="line">s = data.describe()</span><br><span class="line">print(s)</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"># 基本统计量</span><br><span class="line"></span><br><span class="line">q1 = s[&apos;25%&apos;]</span><br><span class="line">q3 = s[&apos;75%&apos;]</span><br><span class="line">iqr = q3 - q1 #分位差</span><br><span class="line">mi = q1 - 1.5*iqr #下限</span><br><span class="line">ma = q3 + 1.5*iqr #上限</span><br><span class="line">print(&apos;分位差为：%.3f，下限为：%.3f，上限为：%.3f&apos; % (iqr,mi,ma))</span><br><span class="line">print(&apos;------&apos;)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(2,1,2)</span><br><span class="line"></span><br><span class="line"># 筛选出异常值error、剔除异常值之后的数据data_c</span><br><span class="line">error = data[(data &lt; mi) | (data &gt; ma)]</span><br><span class="line">data_c = data[(data &gt;= mi) &amp; (data &lt;= ma)]</span><br><span class="line">print(&apos;异常值共%i条&apos; % len(error))</span><br><span class="line"></span><br><span class="line">plt.scatter(data_c.index,data_c,color = &apos;k&apos;,marker=&apos;.&apos;,alpha = 0.3)</span><br><span class="line">plt.scatter(error.index,error,color = &apos;r&apos;,marker=&apos;.&apos;,alpha = 0.5)</span><br><span class="line">plt.grid()</span><br><span class="line"># 图表表达</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E7%BC%BA%E5%A4%B1%E5%92%8C%E5%BC%82%E5%B8%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据特征分析</title>
      <link>https://shulu520.com/%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E8%83%BD%E5%8A%9B/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90/</link>
      <guid>https://shulu520.com/%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E8%83%BD%E5%8A%9B/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90/</guid>
      <pubDate>Sat, 29 May 2021 11:25:14 GMT</pubDate>
      <description>
      
        数据特征分析包括分布分析、对比分析、统计分析、帕累托分析、正太性检测、相关性分析。重要的是联系完之后，记得提炼成函数，封装为模块，方便以后重复使用。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="分布分析：散点图-极差-直方图"><a href="#分布分析：散点图-极差-直方图" class="headerlink" title="分布分析：散点图/极差/直方图"></a>分布分析：散点图/极差/直方图</h2><ul><li>研究数据的分布特征和分别类型，定量定性，区分基本统计量</li><li>首先对数据做一个基本的大致分析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">data=pd.read_csv(&quot;E:/Users/lqy/Desktop/jupyternotebook/深圳罗湖二手房信息.csv&quot;,engine=&quot;python&quot;)</span><br><span class="line">data.describe()</span><br><span class="line"></span><br><span class="line"># 散点图看看效果</span><br><span class="line">plt.scatter(data[&apos;经度&apos;],data[&apos;纬度&apos;],</span><br><span class="line">           s=data[&apos;房屋单价&apos;] / 200, #除以200是因为数据太大了，显示图像太大</span><br><span class="line">            c=data[&apos;参考总价&apos;],</span><br><span class="line">            cmap=&apos;Reds&apos;,</span><br><span class="line">            alpha=0.5</span><br><span class="line">           )</span><br><span class="line">plt.grid() #加上网格</span><br><span class="line"></span><br><span class="line"># 极差</span><br><span class="line">key1=&quot;参考总价&quot;</span><br><span class="line">key2=&quot;参考首付&quot;</span><br><span class="line">print(key1,data[key1].max()-data[key1].min())</span><br><span class="line">print(key2,data[key2].max()-data[key2].min())</span><br><span class="line"></span><br><span class="line"># 频率分布情况 直方图</span><br><span class="line">data[key1].hist(bins=8)</span><br><span class="line"># 做到这里其实已经可以看到大致的分布情况了，</span><br><span class="line">#下面的内容只是按自己的想法拆分区间做的，效果更好看而已</span><br><span class="line">#若果需要的话，再去翻阅</span><br></pre></td></tr></table></figure><h2 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h2><ul><li>两个相似的指标进行比较</li><li>同比，环比</li><li>内容缺失<del>~</del><del>~</del><del>~</del><del>~</del>~~~~待补</li></ul><h2 id="统计分析：集中趋势-离中趋势"><a href="#统计分析：集中趋势-离中趋势" class="headerlink" title="统计分析：集中趋势-离中趋势"></a>统计分析：集中趋势-离中趋势</h2><ul><li>对定量数据常从集中趋势和离中趋势两个方面进行分析</li><li>集中：算数平均数，加权平均数(期望，加权平均值即将各数值乘以相应的权数，然后求和得到总体值，再除以总的权数。)，位置平均数，中位数，加权平均数，众数</li><li>离中：方差，标准差，分位数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据</span><br><span class="line">data=pd.DataFrame(&#123;&apos;value&apos;:np.random.randint(100,120,100),</span><br><span class="line">                  &apos;f&apos;:np.random.rand(100)&#125;) #randint(low,high,size)</span><br><span class="line">data[&apos;f&apos;] = data[&apos;f&apos;] / data[&apos;f&apos;].sum() #f为权重，这里将其设置为总和为1的占比</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line">#算数平均数</span><br><span class="line">mean = data[&apos;value&apos;].mean()</span><br><span class="line">print(&apos;算数平均数：%.2f&apos; % mean)</span><br><span class="line"></span><br><span class="line">#加权平均数</span><br><span class="line">mean_w= (data[&apos;value&apos;]*data[&apos;f&apos;]).sum() / data[&apos;f&apos;].sum()</span><br><span class="line"></span><br><span class="line">print(&apos;加权平均数：%.2f&apos; % mean_w)</span><br><span class="line"></span><br><span class="line">#位置平均数</span><br><span class="line">#众数</span><br><span class="line">m=data[&apos;value&apos;].mode().tolist() #可能不止一个</span><br><span class="line">print(&apos;众数:&apos;,m)</span><br><span class="line"></span><br><span class="line">#中位数</span><br><span class="line">med=data[&apos;value&apos;].median()</span><br><span class="line">print(&apos;中位数:&apos;,med)</span><br><span class="line"></span><br><span class="line">#密度曲线 密度图 是直方图的平滑版本</span><br><span class="line">data[&apos;value&apos;].plot(kind=&apos;kde&apos;,style=&apos;--k&apos;,grid=True)</span><br><span class="line"></span><br><span class="line"># axvline()函数 绘制水平or垂直参考线</span><br><span class="line">plt.axvline(x=mean,c=&apos;r&apos;,linestyle=&apos;--&apos;,alpha=0.8)</span><br><span class="line">plt.text(mean+5,0.005,&apos;算数平均数：%.2f&apos; % mean,color=&apos;r&apos;)</span><br><span class="line"></span><br><span class="line">plt.axvline(x=med,c=&apos;g&apos;,linestyle=&apos;--&apos;,alpha=0.8)</span><br><span class="line">plt.text(med+5,0.015,&apos;中位数：%.2f&apos; % med,color=&apos;g&apos;)</span><br><span class="line"></span><br><span class="line">#离中</span><br><span class="line">data=pd.DataFrame(&#123;&apos;a_sale&apos;:np.random.rand(30)*1000,</span><br><span class="line">                  &apos;b_sale&apos;:np.random.rand(30)*1000&#125;,</span><br><span class="line">                 index=pd.period_range(&apos;20210601&apos;,&apos;20210630&apos;))</span><br><span class="line">#rand(30)得到0-1之间的30个数</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line"></span><br><span class="line">#极差</span><br><span class="line">a_r=data[&apos;a_sale&apos;].max()-data[&apos;a_sale&apos;].min()</span><br><span class="line">print(&apos;a的极差：&apos;,a_r)</span><br><span class="line">b_r=data[&apos;b_sale&apos;].max()-data[&apos;b_sale&apos;].min()</span><br><span class="line">print(&apos;b的极差：&apos;,b_r)</span><br><span class="line"># 可以看到B的极差小，所以b的数据更集中</span><br><span class="line"></span><br><span class="line">#分位差</span><br><span class="line">sta=data[&apos;a_sale&apos;].describe()</span><br><span class="line">stb=data[&apos;b_sale&apos;].describe()</span><br><span class="line"></span><br><span class="line">a_iqr=sta.loc[&apos;75%&apos;]-sta.loc[&apos;25%&apos;]</span><br><span class="line">b_iqr=stb.loc[&apos;75%&apos;]-sta.loc[&apos;25%&apos;]</span><br><span class="line"></span><br><span class="line">print(&apos;a分位差：&apos;,a_iqr)</span><br><span class="line">print(&apos;b分位差：&apos;,b_iqr)</span><br><span class="line"></span><br><span class="line">#方差</span><br><span class="line">a_std=sta.loc[&apos;std&apos;]</span><br><span class="line">b_std=stb.loc[&apos;std&apos;]</span><br><span class="line"></span><br><span class="line">print(&apos;a的方差&apos;,a_std)</span><br><span class="line">print(&apos;b的方差&apos;,b_std)</span><br><span class="line"></span><br><span class="line">#标准差 越大，离中趋势越明显</span><br><span class="line">print(&apos;a的标准差：&apos;,np.square(a_std))</span><br><span class="line">print(&apos;b的标准差：&apos;,np.square(b_std))</span><br></pre></td></tr></table></figure><h2 id="帕累托分析：贡献度二八定律"><a href="#帕累托分析：贡献度二八定律" class="headerlink" title="帕累托分析：贡献度二八定律"></a>帕累托分析：贡献度二八定律</h2><ul><li>即贡献度分析，二八定律</li><li>关于次坐标轴，有时候可能会有这种需求，一个图中的几条线的y轴范围不同，或者根本不是一个单位，这时可以增加另外一个y轴，标上不同的刻度。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data=pd.Series(np.random.rand(10)*1200+1000,</span><br><span class="line">                 index=list(&apos;abcdefghij&apos;))</span><br><span class="line">data.sort_values(ascending=False,inplace=True) #从大到小排序</span><br><span class="line">plt.figure(figsize=(10,4))</span><br><span class="line">data.plot(kind=&apos;bar&apos;,color=&apos;g&apos;,width=0.8,alpha=0.6)</span><br><span class="line"></span><br><span class="line">p=data.cumsum()/data.sum() #累积占比</span><br><span class="line">print(&apos;累积占比&apos;)</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">key=p[p&gt;0.8].index[0] #从i开始累积占比大于80%</span><br><span class="line">key_num=data.index.tolist().index(key)</span><br><span class="line">print(&apos;累计占比大于80%的索引为:&apos;,key)</span><br><span class="line">print(&apos;累计占比大于80%的索引位置为:&apos;,key_num)</span><br><span class="line"></span><br><span class="line">#y次坐标轴</span><br><span class="line">p.plot(style=&apos;--ko&apos;,secondary_y=True)</span><br><span class="line"></span><br><span class="line">#参考线</span><br><span class="line">plt.axvline(key_num,color=&apos;r&apos;,linestyle=&apos;--&apos;,alpha=0.8) </span><br><span class="line"></span><br><span class="line">#添加标签文本</span><br><span class="line">plt.text(key_num+0.2,p[key],&apos;累积占比为%.3f%%&apos; % (p[key]*100),color=&apos;r&apos;)</span><br><span class="line">plt.ylabel(&apos;营收—比例&apos;)</span><br><span class="line"></span><br><span class="line">#找出核心产品</span><br><span class="line">key_product=data.loc[:key]</span><br><span class="line">print(&apos;核心产品为：&apos;)</span><br><span class="line">print(key_product)</span><br></pre></td></tr></table></figure><h2 id="正太性检验-直方图检验，ks检验"><a href="#正太性检验-直方图检验，ks检验" class="headerlink" title="正太性检验:直方图检验，ks检验"></a>正太性检验:直方图检验，ks检验</h2><h3 id="直方图初步正太性检验"><a href="#直方图初步正太性检验" class="headerlink" title="直方图初步正太性检验"></a>直方图初步正太性检验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s=pd.DataFrame(np.random.randn(1000)+10,columns=[&apos;value&apos;])</span><br><span class="line">print(s.head())</span><br><span class="line"></span><br><span class="line">fig=plt.figure(figsize=(12,10))</span><br><span class="line">ax1=fig.add_subplot(3,1,1)</span><br><span class="line">ax1.scatter(s.index,s.values) #散点图</span><br><span class="line"></span><br><span class="line">ax2=fig.add_subplot(3,1,2)</span><br><span class="line">s.hist(bins=20,ax=ax2) #直方图</span><br><span class="line">s.plot(kind=&apos;kde&apos;,secondary_y=True,ax=ax2) #密度曲线图</span><br></pre></td></tr></table></figure><h3 id="k-s正太性检验"><a href="#k-s正太性检验" class="headerlink" title="k-s正太性检验"></a>k-s正太性检验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats #一个与numpy相关的科学计算库</span><br><span class="line">data=np.random.randint(66,99,35) #66-99的35条随机数据</span><br><span class="line">df=pd.DataFrame(data,columns=[&apos;value&apos;])</span><br><span class="line">u=df[&apos;value&apos;].mean() #均值</span><br><span class="line">std=df[&apos;value&apos;].std() #标准差</span><br><span class="line"></span><br><span class="line">stats.kstest(df[&apos;value&apos;],&apos;norm&apos;,(u,std)) #norm表示正态分布</span><br><span class="line">#返回值为 statistic D值， pvalue P值</span><br><span class="line">#P值大于0.05 为正态分布</span><br></pre></td></tr></table></figure><h2 id="相关性分析：散点图-df-corr"><a href="#相关性分析：散点图-df-corr" class="headerlink" title="相关性分析：散点图/df.corr()"></a>相关性分析：散点图/df.corr()</h2><ul><li>正相关/负相关/不相关</li><li>分析连续变量之间的线性相关程度的强弱</li><li>图示初判 / 皮尔逊相关系数 / 斯皮尔曼相关系数</li><li>值小于0.3不相关 值大于0.5弱相关 值大于0.8强相关</li></ul><h3 id="散点图相关性初判"><a href="#散点图相关性初判" class="headerlink" title="散点图相关性初判"></a>散点图相关性初判</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先画个散点图等看看，初步判断相关性有无</span><br></pre></td></tr></table></figure><h3 id="皮尔逊相关性分析"><a href="#皮尔逊相关性分析" class="headerlink" title="皮尔逊相关性分析"></a>皮尔逊相关性分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 数据首先要服从正态分布</span><br><span class="line">data1=pd.Series(np.random.rand(100)*100).sort_values()</span><br><span class="line">data2=pd.Series(np.random.rand(100)*50).sort_values()</span><br><span class="line">data=pd.DataFrame(&#123;&apos;value1&apos;:data1.values,</span><br><span class="line">                  &apos;value2&apos;:data2.values&#125;)</span><br><span class="line"></span><br><span class="line">#封装k-s检验函数</span><br><span class="line">def ks_test(df,value):</span><br><span class="line">    from scipy import stats #一个与numpy相关的科学计算库</span><br><span class="line">    u=df[value].mean() #均值</span><br><span class="line">    std=df[value].std() #标准差</span><br><span class="line">    print(stats.kstest(df[value],&apos;norm&apos;,(u,std)))</span><br><span class="line"></span><br><span class="line">ks_test(data,&apos;value1&apos;) #P值大于0.05 为正态分布</span><br><span class="line">ks_test(data,&apos;value2&apos;) #P值大于0.05 为正态分布</span><br><span class="line"></span><br><span class="line">data.corr() #值大于0.5具有相关性</span><br></pre></td></tr></table></figure><h3 id="斯皮尔曼相关性分析"><a href="#斯皮尔曼相关性分析" class="headerlink" title="斯皮尔曼相关性分析"></a>斯皮尔曼相关性分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#不服从正太分布的变量，可采用斯皮尔曼相关性分析</span><br><span class="line"></span><br><span class="line">#斯皮尔曼相关性分析</span><br><span class="line">#不服从正太分布的变量，可采用斯皮尔曼相关性分析</span><br><span class="line">data = pd.DataFrame(&#123;&apos;智商&apos;:[106,86,100,101,99,103,97,113,112,110],</span><br><span class="line">                    &apos;每周看电视小时数&apos;:[7,0,27,50,28,29,20,12,6,17]&#125;)</span><br><span class="line"></span><br><span class="line">data.corr(method=&apos;spearman&apos;) #method默认为皮尔逊</span><br><span class="line">#值小于0.3不相关</span><br><span class="line">#值大于0.5弱相关</span><br><span class="line">#值大于0.8强相关</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E8%83%BD%E5%8A%9B/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-Matplotlib%E7%AC%94%E8%AE%B0/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-Matplotlib%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sun, 16 May 2021 15:30:40 GMT</pubDate>
      <description>
      
        数据分析图表展示
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="vscode问题解决-command-‘python-execInTerminal-icon’-not-found"><a href="#vscode问题解决-command-‘python-execInTerminal-icon’-not-found" class="headerlink" title="vscode问题解决 command ‘python.execInTerminal-icon’ not found"></a>vscode问题解决 command ‘python.execInTerminal-icon’ not found</h2><p>i got a fix for now. I rolled back python extension on vs code to 2021.2.633441544. Just click the arrow next to uninstall and hit install another version.<br>即将vscode扩展Python的版本重装为2021.2.633441544即可</p><h2 id="横轴标签显示不出解决"><a href="#横轴标签显示不出解决" class="headerlink" title="横轴标签显示不出解决"></a>横轴标签显示不出解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#有时候横轴数据量太多，显示不出来，或者粘在一坨，设置旋转</span><br><span class="line">并且将画布尺寸放大</span><br><span class="line">plt.figure(figsize=(22,6))</span><br><span class="line">plt.xticks(rotation=90)</span><br></pre></td></tr></table></figure><h2 id="图例太长不美观处理：两列或多列显示plt-legend-ncol-2"><a href="#图例太长不美观处理：两列或多列显示plt-legend-ncol-2" class="headerlink" title="图例太长不美观处理：两列或多列显示plt.legend(ncol=2)"></a>图例太长不美观处理：两列或多列显示plt.legend(ncol=2)</h2><h2 id="matplotlib图表关系"><a href="#matplotlib图表关系" class="headerlink" title="matplotlib图表关系"></a>matplotlib图表关系</h2><h3 id="matplotlib-gt-pyplot-gt-figure-gt-axes-gt-axis-gt-刻度"><a href="#matplotlib-gt-pyplot-gt-figure-gt-axes-gt-axis-gt-刻度" class="headerlink" title="matplotlib&gt;pyplot&gt;figure&gt;axes&gt;axis&gt;刻度"></a>matplotlib&gt;pyplot&gt;figure&gt;axes&gt;axis&gt;刻度</h3><h3 id="pyplot-是-matplotlib-一个子模块，主要为底层的面向对象的绘图库提供状态机界面。"><a href="#pyplot-是-matplotlib-一个子模块，主要为底层的面向对象的绘图库提供状态机界面。" class="headerlink" title="pyplot 是 matplotlib 一个子模块，主要为底层的面向对象的绘图库提供状态机界面。"></a>pyplot 是 matplotlib 一个子模块，主要为底层的面向对象的绘图库提供状态机界面。</h3><h3 id="Figure-图像窗口-Figure-是包裹-Axes、tiles、legends-等组件的最外层窗口。它其实是一个-Windows-应用窗口-。图是层次结构中级别最高的对象。它对应于整个图形表示，通常可以包含多个轴。"><a href="#Figure-图像窗口-Figure-是包裹-Axes、tiles、legends-等组件的最外层窗口。它其实是一个-Windows-应用窗口-。图是层次结构中级别最高的对象。它对应于整个图形表示，通常可以包含多个轴。" class="headerlink" title="Figure 图像窗口,Figure 是包裹 Axes、tiles、legends 等组件的最外层窗口。它其实是一个 Windows 应用窗口 。图是层次结构中级别最高的对象。它对应于整个图形表示，通常可以包含多个轴。"></a>Figure 图像窗口,Figure 是包裹 Axes、tiles、legends 等组件的最外层窗口。它其实是一个 Windows 应用窗口 。图是层次结构中级别最高的对象。它对应于整个图形表示，通常可以包含多个轴。</h3><h3 id="Axes坐标轴区域，是带有数据的图像区域，它是位于Figure里面。一个-Figure-中可以有多个Axes。包含轴Axis，标题，标签，刻度，图例等小组件。Axes是Figure子容器中最重要的一个子容器。Axes是一个矩形区域，这个矩形是基于figure坐标系统定义的。"><a href="#Axes坐标轴区域，是带有数据的图像区域，它是位于Figure里面。一个-Figure-中可以有多个Axes。包含轴Axis，标题，标签，刻度，图例等小组件。Axes是Figure子容器中最重要的一个子容器。Axes是一个矩形区域，这个矩形是基于figure坐标系统定义的。" class="headerlink" title="Axes坐标轴区域，是带有数据的图像区域，它是位于Figure里面。一个 Figure 中可以有多个Axes。包含轴Axis，标题，标签，刻度，图例等小组件。Axes是Figure子容器中最重要的一个子容器。Axes是一个矩形区域，这个矩形是基于figure坐标系统定义的。"></a>Axes坐标轴区域，是带有数据的图像区域，它是位于Figure里面。一个 Figure 中可以有多个Axes。包含轴Axis，标题，标签，刻度，图例等小组件。Axes是Figure子容器中最重要的一个子容器。Axes是一个矩形区域，这个矩形是基于figure坐标系统定义的。</h3><h3 id="Axis对象考虑要在轴上表示的数值，定义限制，并管理刻度-轴上的标记-和刻度标签-每个刻度上表示的标签文本-。标记的位置由名为Locator的对象调整，而格式化标记标签则由名为Formatter的对象调整。"><a href="#Axis对象考虑要在轴上表示的数值，定义限制，并管理刻度-轴上的标记-和刻度标签-每个刻度上表示的标签文本-。标记的位置由名为Locator的对象调整，而格式化标记标签则由名为Formatter的对象调整。" class="headerlink" title="Axis对象考虑要在轴上表示的数值，定义限制，并管理刻度(轴上的标记)和刻度标签(每个刻度上表示的标签文本)。标记的位置由名为Locator的对象调整，而格式化标记标签则由名为Formatter的对象调整。"></a>Axis对象考虑要在轴上表示的数值，定义限制，并管理刻度(轴上的标记)和刻度标签(每个刻度上表示的标签文本)。标记的位置由名为Locator的对象调整，而格式化标记标签则由名为Formatter的对象调整。</h3><h3 id="subplot该函数创建并返回一个给定网格位置的Axes对象-subplot-233-在二行三列的网格中，第三个位置。是一个Axes的高级封装，方便使用。"><a href="#subplot该函数创建并返回一个给定网格位置的Axes对象-subplot-233-在二行三列的网格中，第三个位置。是一个Axes的高级封装，方便使用。" class="headerlink" title="subplot该函数创建并返回一个给定网格位置的Axes对象,subplot(233),在二行三列的网格中，第三个位置。是一个Axes的高级封装，方便使用。"></a>subplot该函数创建并返回一个给定网格位置的Axes对象,subplot(233),在二行三列的网格中，第三个位置。是一个Axes的高级封装，方便使用。</h3><h3 id="subplots它充当实用程序包装器，并在单个调用中帮助创建子图的公共布局，包括封闭的图形对象。该函数返回一个图形对象figure和一个包含等于nrows-ncols的轴对象的元组，每个轴对象都可通过索引访问。fig-axList-plt-subplots-2-2"><a href="#subplots它充当实用程序包装器，并在单个调用中帮助创建子图的公共布局，包括封闭的图形对象。该函数返回一个图形对象figure和一个包含等于nrows-ncols的轴对象的元组，每个轴对象都可通过索引访问。fig-axList-plt-subplots-2-2" class="headerlink" title="subplots它充当实用程序包装器，并在单个调用中帮助创建子图的公共布局，包括封闭的图形对象。该函数返回一个图形对象figure和一个包含等于nrows * ncols的轴对象的元组，每个轴对象都可通过索引访问。fig, axList =  plt.subplots(2,2)"></a>subplots它充当实用程序包装器，并在单个调用中帮助创建子图的公共布局，包括封闭的图形对象。该函数返回一个图形对象figure和一个包含等于nrows * ncols的轴对象的元组，每个轴对象都可通过索引访问。fig, axList =  plt.subplots(2,2)</h3><h2 id="matplotlib图表窗口"><a href="#matplotlib图表窗口" class="headerlink" title="matplotlib图表窗口"></a>matplotlib图表窗口</h2><h3 id="图表窗口1-plt-show"><a href="#图表窗口1-plt-show" class="headerlink" title="图表窗口1 plt.show()"></a>图表窗口1 plt.show()</h3><h3 id="图表窗口2-魔法函数嵌入图表-matplotlib-inline"><a href="#图表窗口2-魔法函数嵌入图表-matplotlib-inline" class="headerlink" title="图表窗口2 魔法函数嵌入图表 %matplotlib inline"></a>图表窗口2 魔法函数嵌入图表 %matplotlib inline</h3><h3 id="图表窗口3-魔法函数-弹出可交互窗口-matplotlib-notebook"><a href="#图表窗口3-魔法函数-弹出可交互窗口-matplotlib-notebook" class="headerlink" title="图表窗口3 魔法函数 弹出可交互窗口 %matplotlib notebook"></a>图表窗口3 魔法函数 弹出可交互窗口 %matplotlib notebook</h3><h3 id="图表窗口4-魔法函数-弹出更骚的可交互窗口-matplotlib-qt5"><a href="#图表窗口4-魔法函数-弹出更骚的可交互窗口-matplotlib-qt5" class="headerlink" title="图表窗口4 魔法函数 弹出更骚的可交互窗口 %matplotlib qt5"></a>图表窗口4 魔法函数 弹出更骚的可交互窗口 %matplotlib qt5</h3><h2 id="图表基本元素"><a href="#图表基本元素" class="headerlink" title="图表基本元素"></a>图表基本元素</h2><ul><li>figsize(6,8) 图表大小</li><li>plt.rcParams[‘figure.figsize’]=(12,6)图表大小更好</li><li>plt.title(‘标题’)</li><li>plt.xlabel(“angle”, fontsize=20, rotation = -60, color=”r”) x轴标题</li><li>plt.legend(loc=0) 图例 数字0-10表示不同的位置，也对应着关键字</li><li>plt.xlim([0,8]) x轴边界</li><li>plt.xticks(range(10)) x轴刻度</li><li>plt.rcParams[“font.size”] = 15 设置字体大小</li><li>plt.rcParams[“font.sans-serif”]=[“SimHei”] 汉字设置 字体文件已经导入jupyter</li><li>plt.rcParams[“font.sans-serif”]=[“SimHei”] #正常显示中文</li><li>plt.rcParams[“axes.unicode_minus”]=False #正常显示负号</li><li>plt.grid(True,linestyle=’–’,color=’pink’,linewidth=’0.5’,axis=’both’) #创建格网</li></ul><h3 id="中文显示问题与坐标轴负数负号问题"><a href="#中文显示问题与坐标轴负数负号问题" class="headerlink" title="中文显示问题与坐标轴负数负号问题"></a>中文显示问题与坐标轴负数负号问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 解决过程 </span><br><span class="line"># 查看水木清华天猫数据分析里面的matplotlib.md文档-简单画图那里，并且配合视屏讲解</span><br><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"># plt使用rc配置文件来自定义图形的各种默认属性，称之为rc配置或rc参数。</span><br><span class="line"># 通过rc参数可以修改默认的属性，</span><br><span class="line"># 包括窗体大小、每英寸的点数、线条宽度、颜色、样式、坐标轴、文本、字体等。</span><br><span class="line"># rc参数存储在字典变量中，通过字典的方式进行访问。</span><br><span class="line"></span><br><span class="line"># https://blog.csdn.net/helunqu2017/article/details/78652261 详细配置</span><br><span class="line"></span><br><span class="line">plt.rcParams[&quot;font.sans-serif&quot;]=[&quot;SimHei&quot;] #正常显示中文</span><br><span class="line">plt.rcParams[&quot;axes.unicode_minus&quot;]=False #正常显示负号</span><br><span class="line"></span><br><span class="line">plt.tick_params(bottom=&apos;on&apos;,left=&apos;on&apos;) #坐标轴上的刻度小竖线显示</span><br><span class="line">import matplotlib #这里需要导入matplotlib总体包</span><br><span class="line">matplotlib.rcParams[&apos;xtick.direction&apos;]=&apos;in&apos; #小竖线显示位置</span><br><span class="line">matplotlib.rcParams[&apos;ytick.direction&apos;]=&apos;inout&apos;#多运行几次就刷新了</span><br></pre></td></tr></table></figure><h3 id="关闭坐标轴"><a href="#关闭坐标轴" class="headerlink" title="关闭坐标轴"></a>关闭坐标轴</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frame=plt.gca()</span><br><span class="line"># plt.axis(&apos;off&apos;) # </span><br><span class="line"># 还有X、Y轴不显示等操作</span><br></pre></td></tr></table></figure><h3 id="plt的其他参数样式太多用的时候再搜查"><a href="#plt的其他参数样式太多用的时候再搜查" class="headerlink" title="plt的其他参数样式太多用的时候再搜查"></a>plt的其他参数样式太多用的时候再搜查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linestyle 点、实线等</span><br><span class="line">marker 好多好多样式</span><br><span class="line">color 颜色</span><br><span class="line">alpha 透明度</span><br><span class="line">colormap 颜色渐变</span><br><span class="line"></span><br><span class="line">&lt;!-- 注意使用style之后所有的图表都会应用 想改变回来，就要重启 --&gt;</span><br><span class="line">style ; import matplotlib.style as psl;  psl.use(&apos;某种样式&apos;)</span><br></pre></td></tr></table></figure><h2 id="设置主副刻度对象属性-刻度定位器与格式"><a href="#设置主副刻度对象属性-刻度定位器与格式" class="headerlink" title="设置主副刻度对象属性-刻度定位器与格式"></a>设置主副刻度对象属性-刻度定位器与格式</h2><p><strong>注意事项：包的导入和修改设置等需要在一个jupyter输入框里面写否则修改不显示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib.ticker import MultipleLocator, FormatStrFormatter</span><br><span class="line">t = np.arange(0.0, 100.0, 1)</span><br><span class="line">s = np.sin(0.1*np.pi*t)*np.exp(-t*0.01)</span><br><span class="line"></span><br><span class="line">ax = plt.subplot(111) #注意:一般都在ax中设置,不在plot中设置</span><br><span class="line"></span><br><span class="line">plt.grid(True,linestyle=&apos;--&apos;,color=&apos;pink&apos;,linewidth=&apos;0.5&apos;,axis=&apos;both&apos;) #创建格网</span><br><span class="line"></span><br><span class="line">plt.plot(t,s,&apos;--r*&apos;)</span><br><span class="line"></span><br><span class="line">#修改主刻度</span><br><span class="line">xmajorLocator = MultipleLocator(20) #将x主刻度标签设置为20的倍数</span><br><span class="line">xmajorFormatter = FormatStrFormatter(&apos;%.0f&apos;) #设置x轴标签文本的格式</span><br><span class="line"># ymajorLocator = MultipleLocator(0.5) #将y轴主刻度标签设置为0.5的倍数</span><br><span class="line"># ymajorFormatter = FormatStrFormatter(&apos;%1.1f&apos;) #设置y轴标签文本的格式</span><br><span class="line"></span><br><span class="line">#设置主刻度标签的位置,标签文本的格式</span><br><span class="line">ax.xaxis.set_major_locator(xmajorLocator)</span><br><span class="line">ax.xaxis.set_major_formatter(xmajorFormatter)</span><br><span class="line"># ax.yaxis.set_major_locator(ymajorLocator)</span><br><span class="line"># ax.yaxis.set_major_formatter(ymajorFormatter)</span><br><span class="line"></span><br><span class="line">#修改次刻度</span><br><span class="line">xminorLocator = MultipleLocator(5) #将x轴次刻度标签设置为5的倍数</span><br><span class="line"># yminorLocator = MultipleLocator(0.1) #将此y轴次刻度标签设置为0.1的倍数</span><br><span class="line"></span><br><span class="line">#设置次刻度标签的位置,没有标签文本格式</span><br><span class="line">ax.xaxis.set_minor_locator(xminorLocator)</span><br><span class="line"># ax.yaxis.set_minor_locator(yminorLocator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打开网格 which=&apos;major&apos;\which=&apos;minor&apos;\which=&apos;both&apos;</span><br><span class="line">ax.xaxis.grid(True, which=&apos;major&apos;) #x坐标轴的网格使用主刻度</span><br><span class="line"># ax.yaxis.grid(True, which=&apos;minor&apos;) #y坐标轴的网格使用次刻度</span><br><span class="line"></span><br><span class="line"># 删除坐标轴的刻度显示</span><br><span class="line">ax.xaxis.set_major_formatter(plt.NullFormatter()) </span><br><span class="line"># ax.yaxis.set_major_locator(plt.NullLocator())</span><br></pre></td></tr></table></figure><h2 id="图像内的文字、注释、箭头"><a href="#图像内的文字、注释、箭头" class="headerlink" title="图像内的文字、注释、箭头"></a>图像内的文字、注释、箭头</h2><table><thead><tr><th>Pyplot函数</th><th>描述</th></tr></thead><tbody><tr><td>text()</td><td>在Axes对象的任意位置添加文字</td></tr><tr><td>suptitle()</td><td>为Figure对象添加中心化的标题</td></tr><tr><td>figtext()</td><td>在Figure对象的任意位置添加文字</td></tr><tr><td>annnotate()</td><td>为Axes对象添加注释（箭头可选）</td></tr></tbody></table><p>注意：所有的方法会返回一个matplotlib.text.Text对象</p><h2 id="注解-text-在Axes对象的任意位置添加文字"><a href="#注解-text-在Axes对象的任意位置添加文字" class="headerlink" title="注解 text()在Axes对象的任意位置添加文字"></a>注解 text()在Axes对象的任意位置添加文字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ax.text(横坐标，纵坐标，内容，其他样式设置)</span><br><span class="line"></span><br><span class="line">ax.set_title(r&apos;$\alpha_i&gt; \beta_i$&apos;, fontsize=20)</span><br><span class="line"></span><br><span class="line">ax.text(0.6, 0.3, r&apos;sunck is a good man&apos;, fontsize = 20)</span><br><span class="line">ax.text(0.6, 0.6, r&apos;$\mathcal&#123;A&#125;\mathrm&#123;sin&#125;(2 \omega t)$&apos;, fontsize = 20)</span><br><span class="line">ax.text(0.1, -0.5, r&apos;$\sqrt&#123;2&#125;$&apos;, fontsize=10)</span><br><span class="line">ax.text(0.6, 0.1, &apos;The italic text wrapped in the data coordinates&apos;, style=&apos;italic&apos;, bbox = &#123;&apos;facecolor&apos;: &apos;red&apos;&#125;)</span><br><span class="line"></span><br><span class="line">ax.set_xlabel(&apos;time (s)&apos;)</span><br><span class="line">ax.set_ylabel(&apos;volts (mV)&apos;)</span><br><span class="line"></span><br><span class="line">ax.legend(labels=(&apos;k&apos;),loc=&quot;lower left&quot;)</span><br></pre></td></tr></table></figure><h2 id="suptitle-中心化标题、figtext-注释"><a href="#suptitle-中心化标题、figtext-注释" class="headerlink" title="suptitle()中心化标题、figtext()注释"></a>suptitle()中心化标题、figtext()注释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax2.set_title(&quot;cosine&quot;)</span><br><span class="line"></span><br><span class="line">plt.suptitle(&quot;sine&amp;cosine&quot;) ###</span><br><span class="line"></span><br><span class="line">plt.figtext(1,0.5,s = &apos;sin(0) = 0&apos;)</span><br></pre></td></tr></table></figure><h2 id="annotate-箭头"><a href="#annotate-箭头" class="headerlink" title="annotate()箭头"></a>annotate()箭头</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>xy</td><td>设置箭头指示的位置</td></tr><tr><td>xytext</td><td>设置注释文字的位置</td></tr><tr><td>arrowprops</td><td>以字典的形式设置箭头的样式</td></tr></tbody></table><table><thead><tr><th>箭头样式属性</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>设置箭头长方形部分的宽度</td></tr><tr><td>headlength</td><td>设置箭头尖端的长度</td></tr><tr><td>headwidth</td><td>设置箭头尖端底部的宽度</td></tr><tr><td>facecolor</td><td>设置箭头颜色</td></tr><tr><td>shrink</td><td>设置箭头顶点、尾部与指示点、注释文字的距离（比例值）</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"></span><br><span class="line">x = np.arange(0, math.pi*2, 0.05)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">ax.plot(x, y)</span><br><span class="line">ax.annotate(&apos;annotate&apos;, xy = (1.5,0.8), xytext = (1, 0.4), arrowprops = dict(facecolor = &apos;red&apos;, shrink = 0.005))</span><br></pre></td></tr></table></figure><h3 id="箭头汇总"><a href="#箭头汇总" class="headerlink" title="箭头汇总"></a>箭头汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(12,9))</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"></span><br><span class="line">arrstyles = [&apos;-&apos;, &apos;-&gt;&apos;, &apos;-[&apos;, &apos;&lt;-&apos;, &apos;&lt;-&gt;&apos;, &apos;fancy&apos;, &apos;simple&apos;, &apos;wedge&apos;]</span><br><span class="line">for i, style in enumerate(arrstyles):</span><br><span class="line">    ax.annotate(style, xy=(0.2, 0.9-0.1*i), xytext=(0.05, 0.85-0.1*i), arrowprops=dict(arrowstyle=style));</span><br><span class="line">    </span><br><span class="line">connstyles=[&quot;arc&quot;, &quot;arc,angleA=10,armA=30,rad=30&quot;, &quot;arc3,rad=.2&quot;, &quot;arc3,rad=-.2&quot;, &quot;angle&quot;, &quot;angle3&quot;]</span><br><span class="line">for i, style in enumerate(connstyles):</span><br><span class="line">    ax.annotate(style, xy=(0.7, 0.9-0.1*i), xytext=(0.6, 0.85-0.1*i), arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=style));</span><br></pre></td></tr></table></figure><h2 id="将绘图保存到图片"><a href="#将绘图保存到图片" class="headerlink" title="将绘图保存到图片"></a>将绘图保存到图片</h2><ul><li>图片周围空白设置 bbox_inches=’tight’ 不设置的话 刻度不显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig.savefig(&quot;./sin.png&quot;, dpi=400, facecolor=&quot;green&quot;,edgecolor=&apos;b&apos;,bbox_inches=&apos;tight&apos;)</span><br></pre></td></tr></table></figure><h2 id="创建子图"><a href="#创建子图" class="headerlink" title="创建子图"></a>创建子图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 先创建窗口figure，再通过fig.add_axes添加坐标轴区域</span><br><span class="line"># add_axes(rect, projection=None, polar=False, **kwargs)</span><br><span class="line">其中的 rect 是位置参数，接受一个4元素的浮点数列表，[left, bottom, width, height] ，它定义了要添加到figure中的矩形子区域的：左下角坐标(x, y)、宽度、高度。</span><br><span class="line"></span><br><span class="line">注意：每个元素的值是figure宽度和高度的分数。即将figure的宽、高作为1个单位。</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1]) </span><br><span class="line">langs = [&apos;C&apos;, &apos;C++&apos;, &apos;Java&apos;, &apos;Python&apos;, &apos;PHP&apos;]</span><br><span class="line">students = [23,17,35,29,12]</span><br><span class="line">ax.bar(langs,students,0.5,10,align=&apos;center&apos;,color=&quot;r&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 先创建窗口figure，再通过fig.add_subplot添加坐标轴axes</span><br><span class="line">fig=plt.figure()</span><br><span class="line">ax1=fig.add_subplot(221)#添加两行两列的axes，ax1是第一行第一个</span><br><span class="line">ax1.plot(np.random.rand(50).cumsum(),&apos;k--&apos;)</span><br><span class="line"></span><br><span class="line">ax2=fig.add_subplot(222)</span><br><span class="line">ax2.plot(np.random.rand(50).cumsum(),&apos;b--&apos;)</span><br><span class="line"></span><br><span class="line">ax4=fig.add_subplot(224)</span><br><span class="line">ax4.plot(np.random.rand(50).cumsum(),&apos;r--&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 同时创建figure和Axes，通过plt.subplots</span><br><span class="line">fig,axes=plt.subplots(2,3,figsize=(10,4))</span><br><span class="line">line=pd.Series(np.random.randn(100).cumsum())</span><br><span class="line">print(axes,axes.shape,type(axes))</span><br><span class="line"></span><br><span class="line">axes[0,0].plot(np.random.rand(100))</span><br><span class="line">ax1=axes[0,1]</span><br><span class="line">ax1.plot(line)</span><br><span class="line"></span><br><span class="line"># plt.subplots参数调整</span><br><span class="line">fig,axes=plt.subplots(1,2,figsize=(10,4),sharey=True) #共享y轴</span><br><span class="line"></span><br><span class="line">axes[0].hist(np.random.randn(500))</span><br><span class="line">axes[1].hist(np.random.randn(500))</span><br><span class="line"></span><br><span class="line">plt.subplots_adjust(wspace=0,hspace=0) #图像间距</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建子图</span><br><span class="line">data=np.random.randn(1000,4)</span><br><span class="line">df=pd.DataFrame(data,columns=list(&apos;ABCD&apos;)).cumsum()</span><br><span class="line"></span><br><span class="line">data=np.random.randn(1000,4)</span><br><span class="line">df=pd.DataFrame(data,columns=list(&apos;ABCD&apos;)).cumsum()</span><br><span class="line">df.plot(style=&apos;--&apos;,figsize=(8,8)) #ABCD四个图在一起</span><br><span class="line"></span><br><span class="line">df.plot(style=&apos;--&apos;,figsize=(8,8),subplots=True) #四图分开，共享X轴</span><br></pre></td></tr></table></figure><h2 id="由Series或DataFrame直接生成图表"><a href="#由Series或DataFrame直接生成图表" class="headerlink" title="由Series或DataFrame直接生成图表"></a>由Series或DataFrame直接生成图表</h2><h3 id="Series直接生成图表"><a href="#Series直接生成图表" class="headerlink" title="Series直接生成图表"></a>Series直接生成图表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ss=pd.Series(np.random.randn(1000),index=pd.date_range(&apos;1/1/2021&apos;,periods=1000)).cumsum()</span><br><span class="line">ss.plot(kind=&apos;line&apos;,</span><br><span class="line">       label=&apos;haha&apos;,</span><br><span class="line">        color=&apos;red&apos;,</span><br><span class="line">        alpha=0.5,</span><br><span class="line">        grid=True,</span><br><span class="line">        rot=45,</span><br><span class="line">        figsize=(8,4),</span><br><span class="line">        title=&apos;Series直接生成图表&apos;,</span><br><span class="line">        legend=True,</span><br><span class="line">        ylim=[-50,50],</span><br><span class="line">        yticks=list(range(-50,50,10))</span><br><span class="line">       )</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c84b47844ef46bb21f443e.jpg" alt></p><h3 id="DataFrame直接生成图表"><a href="#DataFrame直接生成图表" class="headerlink" title="DataFrame直接生成图表"></a>DataFrame直接生成图表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.plot(kind=&apos;line&apos;,</span><br><span class="line">        subplots=False,#True图像分开显示，共享X轴</span><br><span class="line">        grid=True,</span><br><span class="line">        rot=45,</span><br><span class="line">        figsize=(10,6),</span><br><span class="line">        title=&apos;各国每年电影产量折线图&apos;,</span><br><span class="line">        legend=True,</span><br><span class="line">        )</span><br><span class="line">plt.legend(ncol=2)#图例太长，两列或多列显示</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c84a22844ef46bb20f0559.jpg" alt="DataFrame直接生成图表"></p><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 可以两种方式实现条形图的绘制：</span><br><span class="line"># ax.bar() 比较好的一种方式，推荐</span><br><span class="line"># series/df.plot() 这是pandas封装的一种方式</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1]) #位置参数 [left, bottom, width, height]</span><br><span class="line"># 每个元素的值是figure宽度和高度的分数。即将figure的宽、高作为1个单位。</span><br></pre></td></tr></table></figure><h3 id="水平基本条形图"><a href="#水平基本条形图" class="headerlink" title="水平基本条形图"></a>水平基本条形图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"></span><br><span class="line">langs = [&apos;C&apos;, &apos;C++&apos;, &apos;Java&apos;, &apos;Python&apos;, &apos;PHP&apos;]</span><br><span class="line">students = [23,17,35,29,12]</span><br><span class="line">ss=pd.Series(students,index=langs).sort_values()</span><br><span class="line"># print(ss)</span><br><span class="line">ax.barh(ss.index,ss,0.5,10,align=&apos;center&apos;,color=&quot;r&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig,axes=plt.subplots(3,1,figsize=(10,10))</span><br><span class="line">ss=pd.Series(np.random.randint(0,10,10),index=list(&apos;abcdefghij&apos;))#0-10的16个随机整数</span><br><span class="line">df=pd.DataFrame(np.random.rand(5,3),columns=list(&apos;ABC&apos;)) #生成5行3列的二维数组</span><br><span class="line"># print(ss)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"># 单系列</span><br><span class="line">axes[0].bar(ss.index,ss)</span><br><span class="line"># ss.plot(kind=&apos;bar&apos;,ax=axes[0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多系列</span><br><span class="line">x=np.arange(3)</span><br><span class="line">axes[1].bar(x + 0.00, df.iloc[0], color = &apos;b&apos;, width = 0.10)</span><br><span class="line">axes[1].bar(x + 0.10, df.iloc[1], color = &apos;g&apos;, width = 0.10)</span><br><span class="line">axes[1].bar(x + 0.20, df.iloc[2], color = &apos;r&apos;, width = 0.10)</span><br><span class="line">axes[1].bar(x + 0.30, df.iloc[3], color = &apos;y&apos;, width = 0.10)</span><br><span class="line">axes[1].bar(x + 0.40, df.iloc[4], color = &apos;pink&apos;, width = 0.10)</span><br><span class="line"># df.plot(kind=&apos;bar&apos;,ax=axes[1])</span><br><span class="line"></span><br><span class="line"># 多系列堆叠 垂直堆叠条形图 stacked=True</span><br><span class="line">df.plot(kind=&apos;bar&apos;,ax=axes[2],stacked=True,colormap=&apos;Set3&apos;)</span><br></pre></td></tr></table></figure><h2 id="折线图-条形图-面积图-比较"><a href="#折线图-条形图-面积图-比较" class="headerlink" title="折线图 条形图 面积图 比较"></a>折线图 条形图 面积图 比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 如果使用折线图，虽然也能很清晰反映出各种种产品的销量变化情况，</span><br><span class="line"># 但最想强调的——差距变化的部分，则欠缺可视化的突出表现。</span><br><span class="line"># 面积图也可以表示总体总量变化趋势。最高的那条线即总量</span><br><span class="line"></span><br><span class="line"># 当要表达多数据系列中部分与整体的关系，或者是表达累加的数据集，堆叠面积图就派上用场了。</span><br><span class="line"># 标准面积图stacked=False 适用于展示或者比较随着时间连续变化的定量。</span><br><span class="line"># 在需要绘制大量数据系列的情况下，折线图通常是更清晰的可视化表达方式</span><br><span class="line"></span><br><span class="line"># 堆叠面积图适用于可视化“部分-整体”的关系，这有助于我们展现各分类及总体的发展趋势和相互之间的关系。</span><br><span class="line"># 值得注意的是，堆叠面积图与标准面积图不同，某一分类的值并非与纵坐标完全对应，而是通过折线之间的相对高度来表达。</span><br><span class="line"># 因此堆叠面积图不会出现不同分类的数据点被遮盖、被隐藏的状况。</span><br><span class="line"></span><br><span class="line"># 为了数据表达能更加清晰，在设计面积图的时候，你要确保你做到了以下几点：</span><br><span class="line">对比类别的数量不要太多</span><br><span class="line">纵坐标从0开始</span><br><span class="line">使用透明色</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fig,axes=plt.subplots(4,1,figsize=(10,12))</span><br><span class="line">df1=pd.DataFrame(np.random.rand(10,4),columns=list(&apos;abcd&apos;))</span><br><span class="line">df2=pd.DataFrame(np.random.randn(10,4),columns=list(&apos;ABCD&apos;))</span><br><span class="line"></span><br><span class="line">df1.plot.area(ax=axes[0],alpha=0.5,colormap=&apos;Set1&apos;)#堆叠面积图</span><br><span class="line">df1.plot.area(ax=axes[1],stacked=False,alpha=0.5,colormap=&apos;Set1&apos;)#标准面积图</span><br><span class="line">df1.plot.bar(ax=axes[2]) #条形图</span><br><span class="line">df1.plot(ax=axes[3]) #折线图</span><br><span class="line"></span><br><span class="line"># 当stacked为True时，每一列都必须是正的或负的。</span><br><span class="line"># df2.plot.area(ax=axes[1],stacked=False,colormap=&apos;Set2&apos;)</span><br><span class="line"># print(df1)</span><br></pre></td></tr></table></figure><h2 id="填图"><a href="#填图" class="headerlink" title="填图"></a>填图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 对函数与坐标轴之间的区域进行填充，使用fill函数</span><br><span class="line">fig,axes = plt.subplots(2,1,figsize = (8,6))</span><br><span class="line">x = np.linspace(0, 1, 500)</span><br><span class="line">y1 = np.sin(4 * np.pi * x) * np.exp(-5 * x)</span><br><span class="line">y2 = -np.sin(4 * np.pi * x) * np.exp(-5 * x)</span><br><span class="line">axes[0].fill(x, y1, &apos;r&apos;,alpha=0.5,label=&apos;y1&apos;)</span><br><span class="line">axes[0].fill(x, y2, &apos;g&apos;,alpha=0.5,label=&apos;y2&apos;)</span><br><span class="line"></span><br><span class="line"># 填充两个函数之间的区域，使用fill_between函数</span><br><span class="line">x = np.linspace(0, 1, 1000)</span><br><span class="line">y1 = np.sin(x)  </span><br><span class="line">y2 = np.sin(2 * x)  </span><br><span class="line">axes[1].fill_between(x, y1, y2, color =&apos;r&apos;,alpha=0.5,label=&apos;area&apos;)  </span><br><span class="line"></span><br><span class="line"># 添加图例、格网</span><br><span class="line">for i in range(2):</span><br><span class="line">    axes[i].legend()</span><br><span class="line">    axes[i].grid()</span><br></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数组式，楔形大小</td></tr><tr><td>explode</td><td>设置每一块顶点距圆形的长度（比例值）</td></tr><tr><td>labels</td><td>列表。一系列字符串，为每个楔形提供标签</td></tr><tr><td>colors</td><td>一系列matplotlib颜色参数，饼图将通过它循环。如果为None，将使用当前活动周期中的颜色</td></tr><tr><td>autopct</td><td>string用于用数值标记楔形。标签将放在楔子内。格式字符串将为fmt%pct</td></tr><tr><td>pctdistance</td><td>设置比例值文字距离圆心的距离</td></tr><tr><td>shadow</td><td>布尔值，设置是否绘制阴影</td></tr><tr><td>startangle</td><td>设置旋转角度</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(10,5))</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line">ax.axis(&apos;equal&apos;) # 保证长宽相等</span><br><span class="line"></span><br><span class="line">langs = [&apos;C&apos;, &apos;C++&apos;, &apos;Java&apos;, &apos;Python&apos;, &apos;PHP&apos;]</span><br><span class="line">students = [23,17,35,29,12]</span><br><span class="line">ax.pie(students, labels = langs,autopct=&apos;%1.2f%%&apos;,colors=[&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;pink&quot;],explode = [0,0.1,0,0,0],shadow=True)</span><br></pre></td></tr></table></figure><h2 id="直方图反应的是数据的分布情况"><a href="#直方图反应的是数据的分布情况" class="headerlink" title="直方图反应的是数据的分布情况"></a>直方图反应的是数据的分布情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"></span><br><span class="line">a = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line">ax.hist(a, bins = 20,width=0.3)</span><br></pre></td></tr></table></figure><h2 id="密度图是与直方图密切相关的概念"><a href="#密度图是与直方图密切相关的概念" class="headerlink" title="密度图是与直方图密切相关的概念"></a>密度图是与直方图密切相关的概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">它用一条连续的曲线表示变量的分布，可以理解为直方图的”平滑版本“。</span><br><span class="line">生成密度图只需要在plot的时候指定kind=‘kde’,</span><br><span class="line">可以看到，在0附近的数据占到了全部数据的进40%</span><br><span class="line">s=pd.Series(a)</span><br><span class="line">s.plot(kind=&apos;kde&apos;)</span><br></pre></td></tr></table></figure><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(8,6))</span><br><span class="line">ax = fig.add_axes([0,0,1,1])</span><br><span class="line"></span><br><span class="line">x=np.random.randn(1000) #一个维度</span><br><span class="line">y=np.random.randn(1000) #一个维度</span><br><span class="line"></span><br><span class="line">ax.scatter(x,y,marker=&apos;.&apos;,</span><br><span class="line">           s=np.random.randn(1000)*100, #一个维度</span><br><span class="line">           c=np.random.randn(1000)*100, #一个维度</span><br><span class="line">           cmap=&apos;Reds&apos;</span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">x, y → 散点的坐标</span><br><span class="line">s → 散点的面积</span><br><span class="line">c → 散点的颜色</span><br><span class="line">marker 散点样式</span><br><span class="line">alpha 散点透明度</span><br><span class="line">linewidths 散点的边缘线宽</span><br><span class="line">edgecolors 散点的边缘颜色</span><br><span class="line"></span><br><span class="line"># 注意！为了调整“色盘”的颜色深浅范围，需要导入colors</span><br><span class="line">cmap 调色盘 from matplotlib import colors  </span><br><span class="line">changecolor = colors.Normalize(vmin=0.2, vmax=1) 定义变量</span><br><span class="line">plt.scatter(x, y, cmap=&apos;viridis&apos;,norm=changecolor)</span><br><span class="line"></span><br><span class="line">plt.colorbar()  # 显示颜色条 边上的那条</span><br></pre></td></tr></table></figure><h3 id="散点矩阵"><a href="#散点矩阵" class="headerlink" title="散点矩阵"></a>散点矩阵</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 将高维度 数据 中所有变量的两两之间的关系展示出来</span><br></pre></td></tr></table></figure><h2 id="箱形图"><a href="#箱形图" class="headerlink" title="箱形图"></a>箱形图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">箱型图：又称为盒须图、盒式图、盒状图或箱线图，是一种用作显示一组数据分散情况资料的统计图</span><br><span class="line">包含一组数据的：最大值、最小值、中位数、上四分位数（Q3）、下四分位数（Q1）、异常值</span><br><span class="line">① 中位数 → 一组数据平均分成两份，中间位置的数，即箱子里面的横线</span><br><span class="line">② 上四分位数Q1 → 箱子上边框</span><br><span class="line">③ 下四分位数Q3 → 箱子下边框</span><br><span class="line">④ 内限 → T形的盒须就是内限，最大值区间Q3+1.5IQR,最小值区间Q1-1.5IQR （IQR=Q3-Q1）</span><br><span class="line">⑤ 外限 → T形的盒须外就是外限，最大值区间Q3+3IQR,最小值区间Q1-3IQR （IQR=Q3-Q1）</span><br><span class="line">⑥ 异常值 → 内限之外 - 中度异常，外限之外 - 极度异常,最值之外的点</span><br><span class="line"></span><br><span class="line">最大值最小值：就是箱子外面虚线连接的两条横线，最大值、最小值是排除异常值之后的数据</span><br><span class="line">内限：两条横线到盒子之间的虚线部分，</span><br><span class="line">外限：就是横线之外的部分</span><br><span class="line">均值：箱子里面的小图形</span><br><span class="line"></span><br><span class="line">plt.plot.box(),plt.boxplot() #常见两种画法</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># plt.plot.box()绘制箱形图</span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(2,1,figsize=(10,6))</span><br><span class="line">df = pd.DataFrame(np.random.rand(10, 5), columns=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;])</span><br><span class="line">color = dict(boxes=&apos;DarkGreen&apos;, whiskers=&apos;DarkOrange&apos;, medians=&apos;DarkBlue&apos;, caps=&apos;Gray&apos;)</span><br><span class="line"># 箱型图着色</span><br><span class="line"># boxes → 箱线</span><br><span class="line"># whiskers → 分位数与error bar横线之间竖线的颜色</span><br><span class="line"># medians → 中位数线颜色</span><br><span class="line"># caps → error bar横线颜色</span><br><span class="line"></span><br><span class="line">df.plot.box(ylim=[0,1.2],</span><br><span class="line">           grid = True,</span><br><span class="line">           color = color,# color：颜色样式填充</span><br><span class="line">           ax = axes[0])</span><br><span class="line"></span><br><span class="line">df.plot.box(vert=False, # vert：是否垂直，默认True</span><br><span class="line">#             positions=[1, 4, 5, 6, 8],# position：箱型图占位</span><br><span class="line">            ax = axes[1],</span><br><span class="line">            grid = True,</span><br><span class="line">           color = color)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># plt.boxplot()绘制箱形图</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(10, 5), columns=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;])</span><br><span class="line">plt.figure(figsize=(10,4))</span><br><span class="line"></span><br><span class="line">f=df.boxplot(sym = &apos;o&apos;,  # 异常点形状，参考marker</span><br><span class="line">               vert = True,  # 是否垂直</span><br><span class="line">               whis = 1.5,  # IQR，默认1.5，也可以设置区间比如[5,95]，代表强制上下边缘为数据95%和5%位置</span><br><span class="line">               patch_artist = True,  # 上下四分位框内是否填充，True为填充</span><br><span class="line">               meanline = False,showmeans=True,  # 是否有均值线及其形状</span><br><span class="line">               showbox = True,  # 是否显示箱线</span><br><span class="line">               showcaps = True,  # 是否显示边缘线</span><br><span class="line">               showfliers = True,  # 是否显示异常值</span><br><span class="line">               notch = False,  # 中间箱体是否缺口</span><br><span class="line">               return_type=&apos;dict&apos;  # 返回类型为字典</span><br><span class="line">              ) </span><br><span class="line">plt.title(&apos;boxplot&apos;)</span><br><span class="line"># print(f)</span><br><span class="line"></span><br><span class="line">#颜色样式设置</span><br><span class="line">for box in f[&apos;boxes&apos;]:</span><br><span class="line">    box.set( color=&apos;b&apos;, linewidth=1)        # 箱体边框颜色</span><br><span class="line">    box.set( facecolor = &apos;b&apos; ,alpha=0.5)    # 箱体内部填充颜色</span><br><span class="line">for whisker in f[&apos;whiskers&apos;]:</span><br><span class="line">    whisker.set(color=&apos;k&apos;, linewidth=0.5,linestyle=&apos;-&apos;)</span><br><span class="line">for cap in f[&apos;caps&apos;]:</span><br><span class="line">    cap.set(color=&apos;gray&apos;, linewidth=2)</span><br><span class="line">for median in f[&apos;medians&apos;]:</span><br><span class="line">    median.set(color=&apos;DarkBlue&apos;, linewidth=2)</span><br><span class="line">for flier in f[&apos;fliers&apos;]:</span><br><span class="line">    flier.set(marker=&apos;o&apos;, color=&apos;y&apos;, alpha=0.5)</span><br><span class="line"># boxes, 箱线</span><br><span class="line"># medians, 中位值的横线,</span><br><span class="line"># whiskers, 从box到error bar之间的竖线.</span><br><span class="line"># fliers, 异常值</span><br><span class="line"># caps, error bar横线</span><br><span class="line"># means, 均值的横线</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># plt.boxplot()绘制 分组汇总</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(10,2), columns=[&apos;Col1&apos;, &apos;Col2&apos;] )</span><br><span class="line">df[&apos;X&apos;] = pd.Series([&apos;A&apos;,&apos;A&apos;,&apos;A&apos;,&apos;A&apos;,&apos;A&apos;,&apos;B&apos;,&apos;B&apos;,&apos;B&apos;,&apos;B&apos;,&apos;B&apos;])</span><br><span class="line">df[&apos;Y&apos;] = pd.Series([&apos;A&apos;,&apos;B&apos;,&apos;A&apos;,&apos;B&apos;,&apos;A&apos;,&apos;B&apos;,&apos;A&apos;,&apos;B&apos;,&apos;A&apos;,&apos;B&apos;])</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line">df.boxplot(by = &apos;X&apos;)</span><br><span class="line">df.boxplot(column=[&apos;Col1&apos;,&apos;Col2&apos;], by=[&apos;X&apos;,&apos;Y&apos;])</span><br><span class="line"># columns：按照数据的列分子图</span><br><span class="line"># by：按照列分组做箱型图</span><br></pre></td></tr></table></figure><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><ul><li>通过颜色的不同以及深浅展现差异</li><li>疫情地图</li></ul><p><img src="https://pic.imgdb.cn/item/60c853e4844ef46bb29c5f08.jpg" alt></p><h2 id="词云图一简单版"><a href="#词云图一简单版" class="headerlink" title="词云图一简单版"></a>词云图一简单版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import wordcloud</span><br><span class="line"></span><br><span class="line">c=wordcloud.WordCloud()            #1.配置对象参数background_color=&quot;white&quot;</span><br><span class="line">c.generate(&quot;wordcloud by python&quot;)  #2.加载词云文本</span><br><span class="line">c.to_file(&quot;pywordcloud.png&quot;)       #3.输出词云文件</span><br></pre></td></tr></table></figure><h2 id="词云图-完美版"><a href="#词云图-完美版" class="headerlink" title="词云图-完美版"></a>词云图-完美版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from wordcloud import WordCloud</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">data=pd.read_excel(&quot;E:/Users/lqy\Desktop/jupyternotebook/mooc数据分析/电影数据4.xlsx&quot;,usecols=[&apos;名字&apos;,&apos;类型&apos;,&apos;评分&apos;,&apos;投票人数&apos;])</span><br><span class="line"></span><br><span class="line">data_gener=data[&apos;类型&apos;].value_counts()</span><br><span class="line">keys=data_gener.index</span><br><span class="line">values=data_gener.values</span><br><span class="line">dic=dict(zip(keys,values)) #dict函数可以将元组包装成字典</span><br><span class="line"></span><br><span class="line">def makeImage(text): #定义一个创建词云图的函数</span><br><span class="line">  mask=np.array(Image.open(&apos;mask.jpg&apos;))</span><br><span class="line">  wc=WordCloud(background_color=&quot;white&quot;,max_words=17000,mask=mask)</span><br><span class="line">  wc.generate_from_frequencies(text)</span><br><span class="line">  plt.imshow(wc,interpolation=&apos;bilinear&apos;)</span><br><span class="line">  plt.axis(&apos;off&apos;)</span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line">makeImage(dic)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c98eea844ef46bb228d29f.png" alt></p><h2 id="Python-词云图创建记录-完美版"><a href="#Python-词云图创建记录-完美版" class="headerlink" title="Python 词云图创建记录-完美版"></a>Python 词云图创建记录-完美版</h2><ul><li>注意：from wordcloud import WordCloud 后面的WordCloud首字母大写</li><li>这里makeImage函数接受的参数是词典形式的数据</li><li>WordCloud的参数max_words的值要大于词频点的最大值</li><li>mask是提前准备好的图片，做背景形状</li><li>中文字体不显示问题：下载SimHei.ttf字体，</li><li>将其放入D:\Python3\Lib\site-packages\wordcloud目录之下，</li><li>并且打开此目录下的wordcloud.py文件，将字体名称修改为SimHei.ttf如下：</li><li>FONT_PATH = os.environ.get(‘FONT_PATH’, os.path.join(FILE, ‘SimHei.ttf’))</li><li>OK了</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-Matplotlib%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python数据分析之pandas</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-pandas%E7%AC%94%E8%AE%B0/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-pandas%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Thu, 15 Apr 2021 04:42:39 GMT</pubDate>
      <description>
      
        数据分析工具：Pandas数据处理
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="忽略警告warnings"><a href="#忽略警告warnings" class="headerlink" title="忽略警告warnings"></a>忽略警告warnings</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&quot;ignore&quot;)</span><br></pre></td></tr></table></figure><h2 id="读取指定列的数据usecols"><a href="#读取指定列的数据usecols" class="headerlink" title="读取指定列的数据usecols"></a>读取指定列的数据usecols</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_excel(&apos;./豆瓣电影数据.xlsx&apos;,usecols=[&apos;名字&apos;,&apos;评分&apos;])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h2 id="Serious对象转list，只拿到值，不要索引"><a href="#Serious对象转list，只拿到值，不要索引" class="headerlink" title="Serious对象转list，只拿到值，不要索引"></a>Serious对象转list，只拿到值，不要索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls=[1,2,3]</span><br><span class="line">s=pd.Series(ls)</span><br><span class="line">print(s) #带索引的1，2，3</span><br><span class="line">print(s.values[0]) #转为列表，就可以只拿到值了</span><br></pre></td></tr></table></figure><h2 id="pandas-DataFrame列操作"><a href="#pandas-DataFrame列操作" class="headerlink" title="pandas DataFrame列操作"></a>pandas DataFrame列操作</h2><h3 id="列获取选择"><a href="#列获取选择" class="headerlink" title="列获取选择"></a>列获取选择</h3><h4 id="单列选择"><a href="#单列选择" class="headerlink" title="单列选择"></a>单列选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;name&apos;] 或df.name 或df.get(&apos;name&apos;) </span><br><span class="line">#只有get方法找不到不报错，返回none</span><br></pre></td></tr></table></figure><h4 id="多列选择"><a href="#多列选择" class="headerlink" title="多列选择"></a>多列选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[(df[&apos;one&apos;] &gt; 0) &amp; (df[&apos;two&apos;] &lt; 3)]</span><br></pre></td></tr></table></figure><h3 id="列删除-del-df-‘age’"><a href="#列删除-del-df-‘age’" class="headerlink" title="列删除 del df[‘age’]"></a>列删除 del df[‘age’]</h3><h2 id="pandas-DataFrame行操作"><a href="#pandas-DataFrame行操作" class="headerlink" title="pandas DataFrame行操作"></a>pandas DataFrame行操作</h2><h3 id="行选择df-loc-‘b’"><a href="#行选择df-loc-‘b’" class="headerlink" title="行选择df.loc[‘b’]"></a>行选择df.loc[‘b’]</h3><h3 id="行选择df-iloc-2-按数字index值"><a href="#行选择df-iloc-2-按数字index值" class="headerlink" title="行选择df.iloc[2] 按数字index值"></a>行选择df.iloc[2] 按数字index值</h3><h3 id="切片操作-运算符可以选择多行"><a href="#切片操作-运算符可以选择多行" class="headerlink" title="切片操作: 运算符可以选择多行"></a>切片操作<code>:</code> 运算符可以选择多行</h3><h3 id="loc和iloc，第二个参数都表示列选择，不写和写一个冒号都表示所有列，参数之间逗号隔开"><a href="#loc和iloc，第二个参数都表示列选择，不写和写一个冒号都表示所有列，参数之间逗号隔开" class="headerlink" title="loc和iloc，第二个参数都表示列选择，不写和写一个冒号都表示所有列，参数之间逗号隔开"></a>loc和iloc，第二个参数都表示列选择，不写和写一个冒号都表示所有列，参数之间逗号隔开</h3><h3 id="行修改"><a href="#行修改" class="headerlink" title="行修改"></a>行修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&quot;name&quot;: [&quot;sun&quot;, &quot;liu&quot;, &quot;hao&quot;, &quot;ren&quot;, &quot;dao&quot;], &quot;age&quot;:[18, 20, 16, 34, 25]&#125;</span><br><span class="line">df=pd.DataFrame(data,index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;])</span><br><span class="line">df.loc[&apos;b&apos;]=&#123;&apos;shu&apos;,22&#125;</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">name age</span><br><span class="line">asun18</span><br><span class="line">bshu22</span><br><span class="line">chao16</span><br><span class="line">dren34</span><br><span class="line">edao25</span><br></pre></td></tr></table></figure><h3 id="行添加append"><a href="#行添加append" class="headerlink" title="行添加append"></a>行添加append</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df2=pd.DataFrame([[&apos;lul&apos;,17],[&apos;yun&apos;,19]],index=[&apos;f&apos;,&apos;g&apos;],columns=[&apos;name&apos;,&apos;age&apos;])</span><br><span class="line">df=df.append(df2)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">nameage</span><br><span class="line">asun18</span><br><span class="line">blu23</span><br><span class="line">chao16</span><br><span class="line">dren34</span><br><span class="line">edao25</span><br><span class="line">flul17</span><br><span class="line">gyun19</span><br></pre></td></tr></table></figure><h3 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df3=df[:3]</span><br><span class="line">print(df3)</span><br><span class="line">  name  age</span><br><span class="line">a  sun   18</span><br><span class="line">b   lu   23</span><br><span class="line">c  hao   16</span><br><span class="line"></span><br><span class="line">df4=df3.drop(&apos;b&apos;) </span><br><span class="line">print(df4)</span><br><span class="line">  name  age</span><br><span class="line">a  sun   18</span><br><span class="line">c  hao   16</span><br></pre></td></tr></table></figure><h2 id="删除小数-8-0这种不算-，某一列含小数所有行"><a href="#删除小数-8-0这种不算-，某一列含小数所有行" class="headerlink" title="删除小数(8.0这种不算)，某一列含小数所有行"></a>删除小数(8.0这种不算)，某一列含小数所有行</h2><h3 id="number-1-0-这就是小数"><a href="#number-1-0-这就是小数" class="headerlink" title="number % 1 != 0 这就是小数"></a>number % 1 != 0 这就是小数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&quot;name&quot;: [&quot;sun&quot;, &quot;liu&quot;, &quot;zhan&quot;, &quot;ren&quot;, &quot;dao&quot;], &quot;age&quot;:[18.0, 20.3, 16, 34.5, 25]&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(d, index=[&quot;rank1&quot;, &quot;rank2&quot;, &quot;rank3&quot;, &quot;rank4&quot;, &quot;rank5&quot;])</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">df1=df.drop(df[df[&apos;age&apos;] % 1 != 0].index) </span><br><span class="line">df1</span><br></pre></td></tr></table></figure><h2 id="行列选择-第几行第几列"><a href="#行列选择-第几行第几列" class="headerlink" title="行列选择 第几行第几列"></a>行列选择 第几行第几列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[2].get(&apos;name&apos;) </span><br><span class="line">df[&apos;name&apos;].iloc[3]</span><br><span class="line">df.name.loc[4]</span><br><span class="line">df.iloc[2][[&apos;name&apos;,&apos;age&apos;]]</span><br><span class="line"></span><br><span class="line">df[:3] #到索引为3之前的行</span><br><span class="line">df.iloc[[1,3]] #索引第一行和第三行</span><br><span class="line"></span><br><span class="line">df.iloc[2:3,1:2] #第行索引为2，列索引为1</span><br></pre></td></tr></table></figure><h2 id="查看头尾"><a href="#查看头尾" class="headerlink" title="查看头尾"></a>查看头尾</h2><ul><li>快速浏览数据结构，可以传数字参数，表示获取几条数据</li><li>df.head()</li><li>df.tail()</li></ul><h2 id="显示Dateframe所有行-列"><a href="#显示Dateframe所有行-列" class="headerlink" title="显示Dateframe所有行/列"></a>显示Dateframe所有行/列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显示Dateframe所有列(参数设置为None代表显示所有行，也可以自行设置数字)</span><br><span class="line">pd.set_option(&apos;display.max_columns&apos;,None)</span><br><span class="line">#显示Dateframe所有行</span><br><span class="line">pd.set_option(&apos;display.max_rows&apos;,None)</span><br><span class="line">#设置Dataframe数据的显示长度，默认为50</span><br><span class="line">pd.set_option(&apos;max_colwidth&apos;,20)</span><br></pre></td></tr></table></figure><h2 id="重建索引reindex"><a href="#重建索引reindex" class="headerlink" title="重建索引reindex"></a>重建索引reindex</h2><ul><li>其作用是创建一个适应新索引的新对象</li><li>参数index行索引</li><li>参数columns列索引</li><li>index和columns必须是原索引的子集</li><li>copy=true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">df=pd.DataFrame([[&apos;lul&apos;,17],[&apos;yun&apos;,19]],columns=[&apos;name&apos;,&apos;age&apos;])</span><br><span class="line">print(df)</span><br><span class="line">df2=df.reindex(index=[1],columns=[&apos;name&apos;,&apos;age&apos;])</span><br><span class="line">print(&apos;df2:&apos;)</span><br><span class="line">print(df2)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">  name  age</span><br><span class="line">0  lul   17</span><br><span class="line">1  yun   19</span><br><span class="line"></span><br><span class="line">df2:</span><br><span class="line">  name  age</span><br><span class="line">1  yun   19</span><br><span class="line"></span><br><span class="line">  name  age</span><br><span class="line">0  lul   17</span><br><span class="line">1  yun   19</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="按行索引排序"><a href="#按行索引排序" class="headerlink" title="按行索引排序"></a>按行索引排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&quot;name&quot;: [&quot;sun&quot;, &quot;liu&quot;, &quot;hao&quot;, &quot;ren&quot;, &quot;dao&quot;], &quot;age&quot;:[18, 20, 16, 34, 25]&#125;</span><br><span class="line">df=pd.DataFrame(data,index=[3,2,4,0,1])</span><br><span class="line">print(df)</span><br><span class="line">df2=df.sort_index()</span><br></pre></td></tr></table></figure><h3 id="升降序可选ascending参数"><a href="#升降序可选ascending参数" class="headerlink" title="升降序可选ascending参数"></a>升降序可选ascending参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3=df.sort_index(ascending=False) #降序</span><br><span class="line">print(df3)</span><br></pre></td></tr></table></figure><h3 id="对列索引的名称排序"><a href="#对列索引的名称排序" class="headerlink" title="对列索引的名称排序"></a>对列索引的名称排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&quot;col2&quot;: [&quot;sun&quot;, &quot;liu&quot;, &quot;hao&quot;], &quot;col3&quot;:[18, 20, 16],&quot;col1&quot;:[&apos;sd&apos;,&apos;dd&apos;,8]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">df2=df.sort_index(axis=1) </span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">  col2  col3 col1</span><br><span class="line">0  sun    18   sd</span><br><span class="line">1  liu    20   dd</span><br><span class="line">2  hao    16    8</span><br><span class="line"></span><br><span class="line">  col1 col2  col3</span><br><span class="line">0   sd  sun    18</span><br><span class="line">1   dd  liu    20</span><br><span class="line">2    8  hao    16</span><br></pre></td></tr></table></figure><h3 id="按某列的值排序"><a href="#按某列的值排序" class="headerlink" title="按某列的值排序"></a>按某列的值排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&quot;col2&quot;: [&quot;sun&quot;, &quot;liu&quot;, &quot;hao&quot;], &quot;col3&quot;:[18, 20, 16],&quot;col1&quot;:[&apos;sd&apos;,&apos;dd&apos;,8]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">df2=df.sort_values(by=&apos;col3&apos;) #对col3列的值排序</span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">  col2  col3 col1</span><br><span class="line">0  sun    18   sd</span><br><span class="line">1  liu    20   dd</span><br><span class="line">2  hao    16    8</span><br><span class="line"></span><br><span class="line">  col2  col3 col1</span><br><span class="line">2  hao    16    8</span><br><span class="line">0  sun    18   sd</span><br><span class="line">1  liu    20   dd</span><br></pre></td></tr></table></figure><h2 id="层次化索引"><a href="#层次化索引" class="headerlink" title="层次化索引"></a>层次化索引</h2><h2 id="层次化行索引"><a href="#层次化行索引" class="headerlink" title="层次化行索引"></a>层次化行索引</h2><h2 id="层次化列索引"><a href="#层次化列索引" class="headerlink" title="层次化列索引"></a>层次化列索引</h2><h2 id="行列同时层次化索引"><a href="#行列同时层次化索引" class="headerlink" title="行列同时层次化索引"></a>行列同时层次化索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mindex1 = pd.MultiIndex.from_product([list(&quot;ABC&quot;),[&apos;期中&apos;,&apos;期末&apos;]])</span><br><span class="line">mindex2=pd.MultiIndex.from_product([[&apos;Python&apos;,&apos;Java&apos;, &apos;C++&apos;],[&apos;去年&apos;,&apos;今年&apos;]])</span><br><span class="line">socre = np.random.randint(0,150,(6,6))</span><br><span class="line">df = pd.DataFrame(data = socre,index = mindex1,columns = mindex2)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c5a39f844ef46bb238dceb.jpg" alt></p><h2 id="层次化索引选择"><a href="#层次化索引选择" class="headerlink" title="层次化索引选择"></a>层次化索引选择</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[&apos;Java&apos;,&apos;C++&apos;]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;Java&apos;][&apos;今年&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[&apos;A&apos;]</span><br></pre></td></tr></table></figure><h2 id="层次化行索引行列转置"><a href="#层次化行索引行列转置" class="headerlink" title="层次化行索引行列转置"></a>层次化行索引行列转置</h2><ul><li>stack()将列索引变为行索引</li><li>unstack()将行索引变为列索引</li><li>level参数：level=0对一级索引操作，=1对二级索引操作</li></ul><h3 id="一级列索引变为最小级行索引"><a href="#一级列索引变为最小级行索引" class="headerlink" title="一级列索引变为最小级行索引"></a>一级列索引变为最小级行索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.stack(level=0)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c5a4f2844ef46bb251d529.jpg" alt></p><h3 id="二级列索引变为最小级行索引"><a href="#二级列索引变为最小级行索引" class="headerlink" title="二级列索引变为最小级行索引"></a>二级列索引变为最小级行索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.stack(level=1)</span><br></pre></td></tr></table></figure><h3 id="一级行索引变为最小级列索引"><a href="#一级行索引变为最小级列索引" class="headerlink" title="一级行索引变为最小级列索引"></a>一级行索引变为最小级列索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.unstack(level=0)</span><br></pre></td></tr></table></figure><h3 id="二级行索引变为最小级列索引"><a href="#二级行索引变为最小级列索引" class="headerlink" title="二级行索引变为最小级列索引"></a>二级行索引变为最小级列索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.unstack(level=1)</span><br></pre></td></tr></table></figure><h2 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h2><ul><li>pandas模块下的datetime模块在将来的版本中会被弃用</li><li>建议直接引入datetime模块使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from datetime import datetime</span><br></pre></td></tr></table></figure><h3 id="获取日期、时间和时间戳"><a href="#获取日期、时间和时间戳" class="headerlink" title="获取日期、时间和时间戳"></a>获取日期、时间和时间戳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(datetime.now())</span><br><span class="line">print(datetime.now().date())</span><br><span class="line">print(datetime.now().time())</span><br><span class="line">print(datetime.now().timestamp())</span><br><span class="line"></span><br><span class="line">2021-04-12 14:11:17.790021</span><br><span class="line">2021-04-12</span><br><span class="line">14:11:17.791025</span><br><span class="line">1618207877.791025</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(datetime.today())</span><br><span class="line">print(datetime.today().date())</span><br><span class="line">print(datetime.today().time())</span><br><span class="line">print(datetime.today().timestamp())</span><br><span class="line"></span><br><span class="line">2021-04-12 14:35:16.016302</span><br><span class="line">2021-04-12</span><br><span class="line">14:35:16.016302</span><br><span class="line">1618209316.016302</span><br><span class="line"></span><br><span class="line">pd.datetime.now()</span><br><span class="line">2021-04-12 14:35:16.017273</span><br></pre></td></tr></table></figure><h3 id="字符串转日期时间pd-to-datetime"><a href="#字符串转日期时间pd-to-datetime" class="headerlink" title="字符串转日期时间pd.to_datetime"></a>字符串转日期时间pd.to_datetime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d=&apos;2021-5-1&apos;</span><br><span class="line">d1=[&apos;2021-1-1&apos;,&apos;2021-2-8&apos;,&apos;2021-3-2&apos;]</span><br><span class="line">d2=[&apos;2021-1-1&apos;,&apos;shulu&apos;,&apos;2021-3-2&apos;]</span><br><span class="line">print(pd.to_datetime(d))</span><br><span class="line">print(pd.to_datetime(d1))</span><br><span class="line">print(pd.to_datetime(d2,errors=&apos;ignore&apos;))</span><br><span class="line">print(pd.to_datetime(d2,errors=&apos;coerce&apos;))</span><br><span class="line"></span><br><span class="line">print(pd.Timestamp(d))</span><br><span class="line"></span><br><span class="line">2021-05-01 00:00:00</span><br><span class="line">DatetimeIndex([&apos;2021-01-01&apos;, &apos;2021-02-08&apos;, &apos;2021-03-02&apos;], dtype=&apos;datetime64[ns]&apos;, freq=None)</span><br><span class="line">Index([&apos;2021-1-1&apos;, &apos;shulu&apos;, &apos;2021-3-2&apos;], dtype=&apos;object&apos;)</span><br><span class="line">DatetimeIndex([&apos;2021-01-01&apos;, &apos;NaT&apos;, &apos;2021-03-02&apos;], dtype=&apos;datetime64[ns]&apos;, freq=None)</span><br><span class="line">2021-05-01 00:00:00</span><br><span class="line">#NaT表示不是一个时间的值(相当于NaN)</span><br></pre></td></tr></table></figure><h3 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">past=datetime(2017, 4, 16, 21, 21, 20, 871000)</span><br><span class="line">now=datetime.now()</span><br><span class="line">delta=now-past</span><br><span class="line">print(delta) </span><br><span class="line">print(delta.days)</span><br><span class="line"></span><br><span class="line">1456 days, 17:30:33.216922</span><br><span class="line">1456</span><br><span class="line"></span><br><span class="line">print(pd.Timedelta(now - past))</span><br><span class="line">1456 days 17:30:33.216922</span><br></pre></td></tr></table></figure><h3 id="时间戳索引DatetimeIndex的快速创建"><a href="#时间戳索引DatetimeIndex的快速创建" class="headerlink" title="时间戳索引DatetimeIndex的快速创建"></a>时间戳索引DatetimeIndex的快速创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(pd.date_range(start=&apos;2021-5-1&apos;,end=&apos;2021-5-3&apos;))</span><br><span class="line">print(pd.date_range(start=&apos;2021-6-15&apos;,end=&apos;2021-8-6&apos;,freq=&apos;M&apos;))</span><br><span class="line">print(pd.date_range(start=&apos;2021-5-1&apos;,periods=3))</span><br><span class="line">print(pd.date_range(end=&apos;2021-5-1&apos;,periods=3))</span><br><span class="line"></span><br><span class="line">DatetimeIndex([&apos;2021-05-01&apos;, &apos;2021-05-02&apos;, &apos;2021-05-03&apos;], dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br><span class="line">DatetimeIndex([&apos;2021-06-30&apos;, &apos;2021-07-31&apos;], dtype=&apos;datetime64[ns]&apos;, freq=&apos;M&apos;)</span><br><span class="line">DatetimeIndex([&apos;2021-05-01&apos;, &apos;2021-05-02&apos;, &apos;2021-05-03&apos;], dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br><span class="line">DatetimeIndex([&apos;2021-04-29&apos;, &apos;2021-04-30&apos;, &apos;2021-05-01&apos;], dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br></pre></td></tr></table></figure><h2 id="重采样pd-date-range"><a href="#重采样pd-date-range" class="headerlink" title="重采样pd.date_range"></a>重采样pd.date_range</h2><ul><li>重新采样，是对原样本重新处理的一个方法，是一个对常规时间序列数据重新采样和频率转换的便捷的方法。</li><li>降采样：高频数据到低频数据</li><li>升采样：低频数据到高频数据</li></ul><h3 id="降采样"><a href="#降采样" class="headerlink" title="降采样"></a>降采样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = pd.date_range(&apos;1/1/2021&apos;, periods=9, freq=&apos;D&apos;)</span><br><span class="line">series = pd.Series(range(9), index=index)</span><br><span class="line">print(series)</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c5a634844ef46bb26964a1.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#默认：closed=left, label=left</span><br><span class="line">print(series.resample(&apos;3D&apos;)) #DatetimeIndexResampler 得到这个重采样构建器</span><br><span class="line">DatetimeIndexResampler [freq=&lt;3 * Days&gt;, axis=0, closed=left, label=left, convention=start, origin=start_day]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(series.resample(&apos;3D&apos;).sum()) #通过聚合方法可以展现出来</span><br><span class="line">2021-01-01     3</span><br><span class="line">2021-01-04    12</span><br><span class="line">2021-01-07    21</span><br><span class="line">Freq: 3D, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(series.resample(&apos;3D&apos;,label=&apos;right&apos;).sum())</span><br><span class="line">2021-01-04     3</span><br><span class="line">2021-01-07    12</span><br><span class="line">2021-01-10    21</span><br><span class="line">Freq: 3D, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(series.resample(&apos;3D&apos;,closed=&apos;right&apos;).sum())</span><br><span class="line">2020-12-29     0</span><br><span class="line">2021-01-01     6</span><br><span class="line">2021-01-04    15</span><br><span class="line">2021-01-07    15</span><br><span class="line">Freq: 3D, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(series.resample(&apos;3D&apos;,label=&apos;right&apos;,closed=&apos;right&apos;).sum())</span><br><span class="line">2021-01-01     0</span><br><span class="line">2021-01-04     6</span><br><span class="line">2021-01-07    15</span><br><span class="line">2021-01-10    15</span><br><span class="line">Freq: 3D, dtype: int64</span><br></pre></td></tr></table></figure><h3 id="增采样"><a href="#增采样" class="headerlink" title="增采样"></a>增采样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = pd.date_range(&apos;1/1/2000&apos;, periods=9, freq=&apos;T&apos;)</span><br><span class="line">series = pd.Series(range(9), index=index)</span><br><span class="line">series</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c5a6c4844ef46bb273d040.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">series.resample(&apos;30S&apos;)</span><br><span class="line">&lt;pandas.core.resample.DatetimeIndexResampler object at 0x000002B91F375CA0&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">series.resample(&apos;30S&apos;).asfreq().head() #新索引没有值，为nan</span><br><span class="line"></span><br><span class="line">2000-01-01 00:00:00    0.0</span><br><span class="line">2000-01-01 00:00:30    NaN</span><br><span class="line">2000-01-01 00:01:00    1.0</span><br><span class="line">2000-01-01 00:01:30    NaN</span><br><span class="line">2000-01-01 00:02:00    2.0</span><br><span class="line">Freq: 30S, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">series.resample(&apos;30S&apos;).asfreq().bfill().head(8) #用后面的一个数据填充nan</span><br><span class="line">2000-01-01 00:00:00    0.0</span><br><span class="line">2000-01-01 00:00:30    1.0</span><br><span class="line">2000-01-01 00:01:00    1.0</span><br><span class="line">2000-01-01 00:01:30    2.0</span><br><span class="line">2000-01-01 00:02:00    2.0</span><br><span class="line">2000-01-01 00:02:30    3.0</span><br><span class="line">2000-01-01 00:03:00    3.0</span><br><span class="line">2000-01-01 00:03:30    4.0</span><br><span class="line">Freq: 30S, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">series.resample(&apos;30S&apos;).asfreq().ffill().head(6) #用前面的一个数据填充nan</span><br><span class="line">2000-01-01 00:00:00    0.0</span><br><span class="line">2000-01-01 00:00:30    0.0</span><br><span class="line">2000-01-01 00:01:00    1.0</span><br><span class="line">2000-01-01 00:01:30    1.0</span><br><span class="line">2000-01-01 00:02:00    2.0</span><br><span class="line">2000-01-01 00:02:30    2.0</span><br><span class="line">Freq: 30S, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="描述性统计信息函数"><a href="#描述性统计信息函数" class="headerlink" title="描述性统计信息函数"></a>描述性统计信息函数</h2><h3 id="非空观测数量"><a href="#非空观测数量" class="headerlink" title="非空观测数量"></a>非空观测数量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;count():非空观测数量&quot;)</span><br><span class="line">print(df.count())</span><br></pre></td></tr></table></figure><h3 id="累计总和"><a href="#累计总和" class="headerlink" title="累计总和"></a>累计总和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;cumsum()累计总和&apos;)</span><br><span class="line">print(df.cumsum())</span><br></pre></td></tr></table></figure><h3 id="累计乘积"><a href="#累计乘积" class="headerlink" title="累计乘积"></a>累计乘积</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;cumprod()累计乘积&apos;)</span><br><span class="line">print(df[[&apos;Age&apos;,&apos;Rating&apos;]].cumprod())</span><br></pre></td></tr></table></figure><h3 id="唯一值-去重"><a href="#唯一值-去重" class="headerlink" title="唯一值 去重"></a>唯一值 去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=pd.Series(list(&apos;asaddvfshu&apos;))</span><br><span class="line">print(s.value_counts()) #重复值计数</span><br><span class="line">sq=s.unique() #去重</span><br><span class="line">print(s) </span><br><span class="line">print(sq) #[&apos;a&apos; &apos;s&apos; &apos;d&apos; &apos;v&apos; &apos;f&apos; &apos;h&apos; &apos;u&apos;]</span><br><span class="line">print(pd.Series(sq)) #包装成Series</span><br></pre></td></tr></table></figure><h3 id="成员资格"><a href="#成员资格" class="headerlink" title="成员资格"></a>成员资格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=pd.Series(list([123]))</span><br><span class="line">s.isin([123,22])</span><br><span class="line"></span><br><span class="line">0    True</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h2 id="pandas的字符串操作"><a href="#pandas的字符串操作" class="headerlink" title="pandas的字符串操作"></a>pandas的字符串操作</h2><ul><li>某一列.str.contains(字符) 筛选出含有特定字符串的行</li><li>某一列.str.split(分割字符) 分割字符串(加参数expand=True分割后变两列)</li><li>某一列.str.replace(old,new)字符串的替换</li><li>某一列.str.startswith() 与 endswith()字符串两端的字符的判断 </li><li>某一列.str.findall()正则表达式 以数组形式返回 </li><li>某一列.str.cat()拼接字符串</li><li>某一列.str.extract() 抽取匹配的字符串出来，注意要加上括号，如extract(“([d-z])”)</li><li>某一列.str.match() 检测是否全部匹配给定点的字符串或者表达式</li><li>某一列.str.strip()去除特定字符(包括lstrip和rstrip)</li><li>某一列.str.get() 获取指定位置的字符串</li><li>某一列.str.pad() 左右补齐</li><li>某一列.str.len()len() 计算字符串的长度</li><li>某一列.str.center() 中间补齐</li><li>某一列.str.ljust() 右边补齐 rjust() 左边补齐</li><li>某一列.str.zfill() 左边补0</li><li>某一列.str.lower() 全部小写 upper() 全部大写</li><li>某一列.str.repeat() 重复</li><li>某一列.str.wrap() 在指定的位置加回车符号</li><li>某一列.str.slice() 按给点的开始结束位置切割字符串</li><li>某一列.str.slice_replace() 使用给定的字符串，替换指定的位置的字符</li><li>某一列.str.count() 计算给定单词出现的次数</li><li>某一列.str.strip() 去除前后的空白字符</li><li>某一列.str.strip() lstrip() rstrip() 去除前后的空白字符</li><li>某一列.str.find() 从左边开始，查找给定字符串的所在位置 rfind() 从右边开始</li><li>某一列.str.index() 查找给定字符串的位置，注意，如果不存在这个字符串，那么会报错</li><li>某一列.str.capitalize() 首字符大写</li><li>某一列.str.swapcase() 大小写互换</li><li>某一列.str.isalnum() 是否全部是数字和字母组成</li><li>某一列.str.isdecimal() 是否全是数字</li><li>某一列.str.isdigit() 是否全部都是数字</li><li>某一列.str.istitle() 是否只有首字母为大写，其他字母为小写</li><li>某一列.str.isspace() 是否空格</li><li>某一列.str.islower() 是否全部小写</li><li>某一列.str.isalpha() 是否全部是字母</li></ul><h2 id="列的合并merge-以某个键为参考，默认how-’inner’使用键的交集"><a href="#列的合并merge-以某个键为参考，默认how-’inner’使用键的交集" class="headerlink" title="列的合并merge,以某个键为参考，默认how=’inner’使用键的交集"></a>列的合并merge,以某个键为参考，默认how=’inner’使用键的交集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">left = pd.DataFrame(&#123;</span><br><span class="line">         &apos;id&apos;:[1,2,3,4,5],</span><br><span class="line">         &apos;Name&apos;: [&apos;Alex&apos;, &apos;Amy&apos;, &apos;Allen&apos;, &apos;Alice&apos;, &apos;Ayoung&apos;],</span><br><span class="line">         &apos;subject_id&apos;:[&apos;sub1&apos;,&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;)</span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">         &#123;&apos;id&apos;:[1,2,3,4,5],</span><br><span class="line">         &apos;Name&apos;: [&apos;Billy&apos;, &apos;Brian&apos;, &apos;Bran&apos;, &apos;Bryce&apos;, &apos;Betty&apos;],</span><br><span class="line">         &apos;subject_id&apos;:[&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub3&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;)</span><br><span class="line">print (left)</span><br><span class="line"></span><br><span class="line">print (right)</span><br></pre></td></tr></table></figure><h3 id="在一个键上合并两个数据帧"><a href="#在一个键上合并两个数据帧" class="headerlink" title="在一个键上合并两个数据帧"></a>在一个键上合并两个数据帧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mdf=pd.merge(left,right,on=&apos;id&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line"></span><br><span class="line">   id  Name_x subject_id_x Name_y subject_id_y</span><br><span class="line">0   1    Alex         sub1  Billy         sub2</span><br><span class="line">1   2     Amy         sub2  Brian         sub4</span><br><span class="line">2   3   Allen         sub4   Bran         sub3</span><br><span class="line">3   4   Alice         sub6  Bryce         sub6</span><br><span class="line">4   5  Ayoung         sub5  Betty         sub5</span><br></pre></td></tr></table></figure><h3 id="合并多个键上的两个数据帧"><a href="#合并多个键上的两个数据帧" class="headerlink" title="合并多个键上的两个数据帧"></a>合并多个键上的两个数据帧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mdf=pd.merge(left,right,on=[&apos;id&apos;,&apos;subject_id&apos;])</span><br><span class="line">print(mdf)</span><br><span class="line"></span><br><span class="line">   id  Name_x subject_id Name_y</span><br><span class="line">0   4   Alice       sub6  Bryce</span><br><span class="line">1   5  Ayoung       sub5  Betty</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 使用“how”的参数</span><br><span class="line"># left使用左侧对象的键</span><br><span class="line"># right使用右侧对象的键</span><br><span class="line"># outer使用键的并集</span><br><span class="line"># inner使用键的交集 默认inner</span><br><span class="line">mdf=pd.merge(left,right,on=&apos;subject_id&apos;,how=&apos;left&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">mdf=pd.merge(left,right,on=&apos;subject_id&apos;,how=&apos;right&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">mdf=pd.merge(left,right,on=&apos;subject_id&apos;,how=&apos;inner&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">mdf=pd.merge(left,right,on=&apos;subject_id&apos;,how=&apos;outer&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line"></span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line">0     1    Alex       sub1   NaN    NaN</span><br><span class="line">1     2     Amy       sub2   1.0  Billy</span><br><span class="line">2     3   Allen       sub4   2.0  Brian</span><br><span class="line">3     4   Alice       sub6   4.0  Bryce</span><br><span class="line">4     5  Ayoung       sub5   5.0  Betty</span><br><span class="line">========================================</span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line">0   2.0     Amy       sub2     1  Billy</span><br><span class="line">1   3.0   Allen       sub4     2  Brian</span><br><span class="line">2   NaN     NaN       sub3     3   Bran</span><br><span class="line">3   4.0   Alice       sub6     4  Bryce</span><br><span class="line">4   5.0  Ayoung       sub5     5  Betty</span><br><span class="line">========================================</span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line">0     2     Amy       sub2     1  Billy</span><br><span class="line">1     3   Allen       sub4     2  Brian</span><br><span class="line">2     4   Alice       sub6     4  Bryce</span><br><span class="line">3     5  Ayoung       sub5     5  Betty</span><br><span class="line">========================================</span><br><span class="line">   id_x  Name_x subject_id  id_y Name_y</span><br><span class="line">0   1.0    Alex       sub1   NaN    NaN</span><br><span class="line">1   2.0     Amy       sub2   1.0  Billy</span><br><span class="line">2   3.0   Allen       sub4   2.0  Brian</span><br><span class="line">3   4.0   Alice       sub6   4.0  Bryce</span><br><span class="line">4   5.0  Ayoung       sub5   5.0  Betty</span><br><span class="line">5   NaN     NaN       sub3   3.0   Bran</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">left = pd.DataFrame(&#123;</span><br><span class="line">         &apos;id&apos;:[1,2,3,4,5],</span><br><span class="line">         &apos;Name&apos;: [&apos;Alex&apos;, &apos;Amy&apos;, &apos;Allen&apos;, &apos;Alice&apos;, &apos;Ayoung&apos;],</span><br><span class="line">         &apos;sub_l&apos;:[&apos;sub1&apos;,&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;)</span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">         &#123;&apos;id&apos;:[1,2,3,4,5],</span><br><span class="line">         &apos;Name&apos;: [&apos;Billy&apos;, &apos;Brian&apos;, &apos;Bran&apos;, &apos;Bryce&apos;, &apos;Betty&apos;],</span><br><span class="line">         &apos;sub_r&apos;:[&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub3&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;)</span><br><span class="line">print (left)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">print (right)</span><br><span class="line"></span><br><span class="line">   id    Name sub_l</span><br><span class="line">0   1    Alex  sub1</span><br><span class="line">1   2     Amy  sub2</span><br><span class="line">2   3   Allen  sub4</span><br><span class="line">3   4   Alice  sub6</span><br><span class="line">4   5  Ayoung  sub5</span><br><span class="line">========================================</span><br><span class="line">   id   Name sub_r</span><br><span class="line">0   1  Billy  sub2</span><br><span class="line">1   2  Brian  sub4</span><br><span class="line">2   3   Bran  sub3</span><br><span class="line">3   4  Bryce  sub6</span><br><span class="line">4   5  Betty  sub5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mdf=pd.merge(left,right,left_on=&apos;sub_l&apos;,right_on=&apos;sub_r&apos;)</span><br><span class="line">print(mdf)</span><br><span class="line"></span><br><span class="line">   id_x  Name_x sub_l  id_y Name_y sub_r</span><br><span class="line">0     2     Amy  sub2     1  Billy  sub2</span><br><span class="line">1     3   Allen  sub4     2  Brian  sub4</span><br><span class="line">2     4   Alice  sub6     4  Bryce  sub6</span><br><span class="line">3     5  Ayoung  sub5     5  Betty  sub5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">left = pd.DataFrame(&#123;</span><br><span class="line">         &apos;id&apos;:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;],</span><br><span class="line">         &apos;Name&apos;: [&apos;Alex&apos;, &apos;Amy&apos;, &apos;Allen&apos;, &apos;Alice&apos;, &apos;Ayoung&apos;],</span><br><span class="line">         &apos;sub_l&apos;:[&apos;sub1&apos;,&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;)</span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">         &#123;&apos;Name&apos;: [&apos;Billy&apos;, &apos;Brian&apos;, &apos;Bran&apos;, &apos;Bryce&apos;, &apos;Betty&apos;],</span><br><span class="line">         &apos;sub_r&apos;:[&apos;sub2&apos;,&apos;sub4&apos;,&apos;sub3&apos;,&apos;sub6&apos;,&apos;sub5&apos;]&#125;,index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;])</span><br><span class="line">print (left)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">print (right)</span><br><span class="line"></span><br><span class="line">  id    Name sub_l</span><br><span class="line">0  a    Alex  sub1</span><br><span class="line">1  b     Amy  sub2</span><br><span class="line">2  c   Allen  sub4</span><br><span class="line">3  d   Alice  sub6</span><br><span class="line">4  e  Ayoung  sub5</span><br><span class="line">========================================</span><br><span class="line">    Name sub_r</span><br><span class="line">a  Billy  sub2</span><br><span class="line">b  Brian  sub4</span><br><span class="line">c   Bran  sub3</span><br><span class="line">d  Bryce  sub6</span><br><span class="line">e  Betty  sub5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mdf=pd.merge(left,right,left_on=&apos;id&apos;,right_index=True)</span><br><span class="line">print(mdf)</span><br><span class="line"></span><br><span class="line">  id  Name_x sub_l Name_y sub_r</span><br><span class="line">0  a    Alex  sub1  Billy  sub2</span><br><span class="line">1  b     Amy  sub2  Brian  sub4</span><br><span class="line">2  c   Allen  sub4   Bran  sub3</span><br><span class="line">3  d   Alice  sub6  Bryce  sub6</span><br><span class="line">4  e  Ayoung  sub5  Betty  sub5</span><br></pre></td></tr></table></figure><h2 id="数据帧的堆叠concat，默认join-’outer’取并集，axis-0竖向堆叠"><a href="#数据帧的堆叠concat，默认join-’outer’取并集，axis-0竖向堆叠" class="headerlink" title="数据帧的堆叠concat，默认join=’outer’取并集，axis=0竖向堆叠"></a>数据帧的堆叠concat，默认join=’outer’取并集，axis=0竖向堆叠</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;],</span><br><span class="line">                    &apos;B&apos;: [&apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;],</span><br><span class="line">                    &apos;C&apos;: [&apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;],</span><br><span class="line">                    &apos;D&apos;: [&apos;D0&apos;, &apos;D1&apos;, &apos;D2&apos;, &apos;D3&apos;]&#125;,</span><br><span class="line">                   index=[0, 1, 2, 3])</span><br><span class="line">df2 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A4&apos;, &apos;A5&apos;, &apos;A6&apos;, &apos;A7&apos;],</span><br><span class="line">                    &apos;B&apos;: [&apos;B4&apos;, &apos;B5&apos;, &apos;B6&apos;, &apos;B7&apos;],</span><br><span class="line">                    &apos;C&apos;: [&apos;C4&apos;, &apos;C5&apos;, &apos;C6&apos;, &apos;C7&apos;],</span><br><span class="line">                    &apos;D&apos;: [&apos;D4&apos;, &apos;D5&apos;, &apos;D6&apos;, &apos;D7&apos;]&#125;,</span><br><span class="line">                   index=[4, 5, 6, 7])</span><br><span class="line">df3 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A8&apos;, &apos;A9&apos;, &apos;A10&apos;, &apos;A11&apos;],</span><br><span class="line">                    &apos;B&apos;: [&apos;B8&apos;, &apos;B9&apos;, &apos;B10&apos;, &apos;B11&apos;],</span><br><span class="line">                    &apos;C&apos;: [&apos;C8&apos;, &apos;C9&apos;, &apos;C10&apos;, &apos;C11&apos;],</span><br><span class="line">                    &apos;D&apos;: [&apos;D8&apos;, &apos;D9&apos;, &apos;D10&apos;, &apos;D11&apos;]&#125;,</span><br><span class="line">                   index=[8, 9, 10, 11])</span><br><span class="line"></span><br><span class="line">print(&quot;df1:&quot;)</span><br><span class="line">print(df1)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">print(&quot;df2:&quot;)</span><br><span class="line">print(df2)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">print(&quot;df3:&quot;)</span><br><span class="line">print(df3)</span><br><span class="line"></span><br><span class="line">df1:</span><br><span class="line">    A   B   C   D</span><br><span class="line">0  A0  B0  C0  D0</span><br><span class="line">1  A1  B1  C1  D1</span><br><span class="line">2  A2  B2  C2  D2</span><br><span class="line">3  A3  B3  C3  D3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df2:</span><br><span class="line">    A   B   C   D</span><br><span class="line">4  A4  B4  C4  D4</span><br><span class="line">5  A5  B5  C5  D5</span><br><span class="line">6  A6  B6  C6  D6</span><br><span class="line">7  A7  B7  C7  D7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df3:</span><br><span class="line">      A    B    C    D</span><br><span class="line">8    A8   B8   C8   D8</span><br><span class="line">9    A9   B9   C9   D9</span><br><span class="line">10  A10  B10  C10  D10</span><br><span class="line">11  A11  B11  C11  D11</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#默认join=&apos;outer&apos;取并集，默认axis=0竖向堆叠</span><br><span class="line">cdf=pd.concat([df1,df2,df3]) </span><br><span class="line">print(cdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line"># 使用传递的键作为最外层构建层次索引。</span><br><span class="line">cdf=pd.concat([df1,df2,df3],keys=[&apos;x&apos;,&apos;y&apos;,&apos;z&apos;])</span><br><span class="line">print(cdf)</span><br><span class="line"></span><br><span class="line">      A    B    C    D</span><br><span class="line">0    A0   B0   C0   D0</span><br><span class="line">1    A1   B1   C1   D1</span><br><span class="line">2    A2   B2   C2   D2</span><br><span class="line">3    A3   B3   C3   D3</span><br><span class="line">4    A4   B4   C4   D4</span><br><span class="line">5    A5   B5   C5   D5</span><br><span class="line">6    A6   B6   C6   D6</span><br><span class="line">7    A7   B7   C7   D7</span><br><span class="line">8    A8   B8   C8   D8</span><br><span class="line">9    A9   B9   C9   D9</span><br><span class="line">10  A10  B10  C10  D10</span><br><span class="line">11  A11  B11  C11  D11</span><br><span class="line">========================================</span><br><span class="line">        A    B    C    D</span><br><span class="line">x 0    A0   B0   C0   D0</span><br><span class="line">  1    A1   B1   C1   D1</span><br><span class="line">  2    A2   B2   C2   D2</span><br><span class="line">  3    A3   B3   C3   D3</span><br><span class="line">y 4    A4   B4   C4   D4</span><br><span class="line">  5    A5   B5   C5   D5</span><br><span class="line">  6    A6   B6   C6   D6</span><br><span class="line">  7    A7   B7   C7   D7</span><br><span class="line">z 8    A8   B8   C8   D8</span><br><span class="line">  9    A9   B9   C9   D9</span><br><span class="line">  10  A10  B10  C10  D10</span><br><span class="line">  11  A11  B11  C11  D11</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#修改df3的index索引，方便对比</span><br><span class="line">df3 = pd.DataFrame(&#123;&apos;A&apos;: [&apos;A8&apos;, &apos;A9&apos;, &apos;A10&apos;, &apos;A11&apos;],</span><br><span class="line">                    &apos;B&apos;: [&apos;B8&apos;, &apos;B9&apos;, &apos;B10&apos;, &apos;B11&apos;],</span><br><span class="line">                    &apos;C&apos;: [&apos;C8&apos;, &apos;C9&apos;, &apos;C10&apos;, &apos;C11&apos;],</span><br><span class="line">                    &apos;D&apos;: [&apos;D8&apos;, &apos;D9&apos;, &apos;D10&apos;, &apos;D11&apos;]&#125;,</span><br><span class="line">                   index=[6, 7, 10, 11])</span><br><span class="line">print(df3)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line"></span><br><span class="line">cdf=pd.concat([df1,df2,df3])</span><br><span class="line">print(cdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line"># 如果想要生成的对象遵循新的索引，请将ignore_index设置为True</span><br><span class="line">cdf=pd.concat([df1,df2,df3],ignore_index=True)</span><br><span class="line">print(cdf)</span><br><span class="line"></span><br><span class="line">      A    B    C    D</span><br><span class="line">6    A8   B8   C8   D8</span><br><span class="line">7    A9   B9   C9   D9</span><br><span class="line">10  A10  B10  C10  D10</span><br><span class="line">11  A11  B11  C11  D11</span><br><span class="line">========================================</span><br><span class="line">      A    B    C    D</span><br><span class="line">0    A0   B0   C0   D0</span><br><span class="line">1    A1   B1   C1   D1</span><br><span class="line">2    A2   B2   C2   D2</span><br><span class="line">3    A3   B3   C3   D3</span><br><span class="line">4    A4   B4   C4   D4</span><br><span class="line">5    A5   B5   C5   D5</span><br><span class="line">6    A6   B6   C6   D6</span><br><span class="line">7    A7   B7   C7   D7</span><br><span class="line">6    A8   B8   C8   D8</span><br><span class="line">7    A9   B9   C9   D9</span><br><span class="line">10  A10  B10  C10  D10</span><br><span class="line">11  A11  B11  C11  D11</span><br><span class="line">========================================</span><br><span class="line">      A    B    C    D</span><br><span class="line">0    A0   B0   C0   D0</span><br><span class="line">1    A1   B1   C1   D1</span><br><span class="line">2    A2   B2   C2   D2</span><br><span class="line">3    A3   B3   C3   D3</span><br><span class="line">4    A4   B4   C4   D4</span><br><span class="line">5    A5   B5   C5   D5</span><br><span class="line">6    A6   B6   C6   D6</span><br><span class="line">7    A7   B7   C7   D7</span><br><span class="line">8    A8   B8   C8   D8</span><br><span class="line">9    A9   B9   C9   D9</span><br><span class="line">10  A10  B10  C10  D10</span><br><span class="line">11  A11  B11  C11  D11</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cdf=pd.concat([df1,df2],axis=1) #横向堆叠数据帧</span><br><span class="line">print(cdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">cdf=pd.concat([df2,df3],axis=1) #6,7两行索引一样</span><br><span class="line">print(cdf)</span><br><span class="line">print(&quot;========================================&quot;)</span><br><span class="line">cdf=pd.concat([df2,df3],axis=1,join=&apos;inner&apos;) #取交集</span><br><span class="line">print(cdf)</span><br><span class="line"></span><br><span class="line">     A    B    C    D    A    B    C    D</span><br><span class="line">0   A0   B0   C0   D0  NaN  NaN  NaN  NaN</span><br><span class="line">1   A1   B1   C1   D1  NaN  NaN  NaN  NaN</span><br><span class="line">2   A2   B2   C2   D2  NaN  NaN  NaN  NaN</span><br><span class="line">3   A3   B3   C3   D3  NaN  NaN  NaN  NaN</span><br><span class="line">4  NaN  NaN  NaN  NaN   A4   B4   C4   D4</span><br><span class="line">5  NaN  NaN  NaN  NaN   A5   B5   C5   D5</span><br><span class="line">6  NaN  NaN  NaN  NaN   A6   B6   C6   D6</span><br><span class="line">7  NaN  NaN  NaN  NaN   A7   B7   C7   D7</span><br><span class="line">========================================</span><br><span class="line">      A    B    C    D    A    B    C    D</span><br><span class="line">4    A4   B4   C4   D4  NaN  NaN  NaN  NaN</span><br><span class="line">5    A5   B5   C5   D5  NaN  NaN  NaN  NaN</span><br><span class="line">6    A6   B6   C6   D6   A8   B8   C8   D8</span><br><span class="line">7    A7   B7   C7   D7   A9   B9   C9   D9</span><br><span class="line">10  NaN  NaN  NaN  NaN  A10  B10  C10  D10</span><br><span class="line">11  NaN  NaN  NaN  NaN  A11  B11  C11  D11</span><br><span class="line">========================================</span><br><span class="line">    A   B   C   D   A   B   C   D</span><br><span class="line">6  A6  B6  C6  D6  A8  B8  C8  D8</span><br><span class="line">7  A7  B7  C7  D7  A9  B9  C9  D9</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cdf.index=[0,1]</span><br><span class="line">print(cdf)</span><br><span class="line"></span><br><span class="line">    A   B   C   D   A   B   C   D</span><br><span class="line">0  A6  B6  C6  D6  A8  B8  C8  D8</span><br><span class="line">1  A7  B7  C7  D7  A9  B9  C9  D9</span><br></pre></td></tr></table></figure><h2 id="去重duplicated-drop-duplicates"><a href="#去重duplicated-drop-duplicates" class="headerlink" title="去重duplicated(),drop_duplicates()"></a>去重duplicated(),drop_duplicates()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 去重</span><br><span class="line">data=&#123;</span><br><span class="line">    &apos;age&apos;:[1,2,1,2,3,2,1,4,5,3]</span><br><span class="line">&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">print(&apos;````````````````````````````&apos;)</span><br><span class="line">print(df.duplicated()) #得到布尔型df</span><br><span class="line">print(&apos;````````````````````````````&apos;)</span><br><span class="line">#通过布尔型索引得到去重后的值</span><br><span class="line">print(df[df.duplicated()==False])</span><br></pre></td></tr></table></figure><h3 id="在原数据之上修改"><a href="#在原数据之上修改" class="headerlink" title="在原数据之上修改"></a>在原数据之上修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.drop_duplicates(inplace=True)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="替换replace"><a href="#替换replace" class="headerlink" title="替换replace"></a>替换replace</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;</span><br><span class="line">    &apos;name&apos;:[&apos;shu&apos;,&apos;lu&apos;,&apos;yun&apos;,&apos;wu&apos;,&apos;jia&apos;,&apos;yi&apos;],</span><br><span class="line">    &apos;age&apos;:[1,2,1,4,5,3]</span><br><span class="line">&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">print(&apos;````````````````````````````&apos;)</span><br><span class="line"></span><br><span class="line">print(df[&apos;age&apos;].replace(1,18)) #用18替换所有的1</span><br><span class="line">print(&apos;````````````````````````````&apos;)</span><br><span class="line"></span><br><span class="line">print(df[&apos;age&apos;].replace([2,4],20)) #用20替换所有的2，4</span><br><span class="line">print(&apos;````````````````````````````&apos;)</span><br><span class="line"></span><br><span class="line">df[&apos;name&apos;].replace(&#123; #多个值分别替换</span><br><span class="line">    &apos;lu&apos;:&apos;lulu&apos;,</span><br><span class="line">    &apos;yi&apos;:&apos;loveyi&apos;,</span><br><span class="line">    &apos;jia&apos;:&apos;jiaa&apos;</span><br><span class="line">&#125;,inplace=True) #inplace=True修改原始值</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">  name  age</span><br><span class="line">0  shu    1</span><br><span class="line">1   lu    2</span><br><span class="line">2  yun    1</span><br><span class="line">3   wu    4</span><br><span class="line">4  jia    5</span><br><span class="line">5   yi    3</span><br><span class="line"></span><br><span class="line">0    18</span><br><span class="line">1     2</span><br><span class="line">2    18</span><br><span class="line">3     4</span><br><span class="line">4     5</span><br><span class="line">5     3</span><br><span class="line">Name: age, dtype: int64</span><br><span class="line"></span><br><span class="line">0     1</span><br><span class="line">1    20</span><br><span class="line">2     1</span><br><span class="line">3    20</span><br><span class="line">4     5</span><br><span class="line">5     3</span><br><span class="line">Name: age, dtype: int64</span><br><span class="line"></span><br><span class="line">     name  age</span><br><span class="line">0     shu    1</span><br><span class="line">1    lulu    2</span><br><span class="line">2     yun    1</span><br><span class="line">3      wu    4</span><br><span class="line">4    jiaa    5</span><br><span class="line">5  loveyi    3</span><br></pre></td></tr></table></figure><h2 id="分组groupby，我们将数据分成多个集合，并在每个子集上应用一些函数"><a href="#分组groupby，我们将数据分成多个集合，并在每个子集上应用一些函数" class="headerlink" title="分组groupby，我们将数据分成多个集合，并在每个子集上应用一些函数"></a>分组groupby，我们将数据分成多个集合，并在每个子集上应用一些函数</h2><ul><li>分组后可以执行操作：</li><li>聚合：计算汇总统计，指对有关数据进行内容挑选、分析、归类，最后分析得到想要的结果</li><li>转换：执行一些特定于组的操作</li><li>过滤：在某些情况下丢弃数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">**数据拆分成组并查看**</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;Team&apos;: [&apos;Riders&apos;, &apos;Riders&apos;, &apos;Devils&apos;, &apos;Devils&apos;, &apos;Kings&apos;,</span><br><span class="line">    &apos;king&apos;, &apos;Kings&apos;, &apos;Kings&apos;, &apos;Riders&apos;, &apos;Royals&apos;, &apos;Royals&apos;, &apos;Riders&apos;],</span><br><span class="line">    &apos;Rank&apos;: [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],</span><br><span class="line">    &apos;Year&apos;: [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],</span><br><span class="line">    &apos;Points&apos;:[876,789,863,673,741,812,756,788,694,701,804,690]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">gs = df.groupby(&quot;Team&quot;) #按列分组</span><br><span class="line">print(gs) #DataFrameGroupBy类对象</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">print(gs.groups) #字典形式，键为队名，值为索引构成的列表</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">2   Devils     2  2014     863</span><br><span class="line">3   Devils     3  2015     673</span><br><span class="line">4    Kings     3  2014     741</span><br><span class="line">5     king     4  2015     812</span><br><span class="line">6    Kings     1  2016     756</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">9   Royals     4  2014     701</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001FF1ACEE4C0&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&apos;Devils&apos;: [2, 3], &apos;Kings&apos;: [4, 6, 7], &apos;Riders&apos;: [0, 1, 8, 11], &apos;Royals&apos;: [9, 10], &apos;king&apos;: [5]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 遍历分组结果</span><br><span class="line">gs = df.groupby(&quot;Team&quot;)</span><br><span class="line">for name, g in gs:</span><br><span class="line">    print(name)</span><br><span class="line">    print(g)</span><br><span class="line">    print(&quot;------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">Devils</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">2  Devils     2  2014     863</span><br><span class="line">3  Devils     3  2015     673</span><br><span class="line">------------------------------</span><br><span class="line">Kings</span><br><span class="line">    Team  Rank  Year  Points</span><br><span class="line">4  Kings     3  2014     741</span><br><span class="line">6  Kings     1  2016     756</span><br><span class="line">7  Kings     1  2017     788</span><br><span class="line">------------------------------</span><br><span class="line">Riders</span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line">------------------------------</span><br><span class="line">Royals</span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">9   Royals     4  2014     701</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">------------------------------</span><br><span class="line">king</span><br><span class="line">   Team  Rank  Year  Points</span><br><span class="line">5  king     4  2015     812</span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">gs = df.groupby([&quot;Team&quot;, &quot;Year&quot;]) #按多列分组</span><br><span class="line">print(gs.groups)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">for name, g in gs:</span><br><span class="line">    print(name)</span><br><span class="line">    print(g)</span><br><span class="line">    print(&quot;-------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">&#123;(&apos;Devils&apos;, 2014): [2], (&apos;Devils&apos;, 2015): [3], (&apos;Kings&apos;, 2014): [4], (&apos;Kings&apos;, 2016): [6], (&apos;Kings&apos;, 2017): [7], (&apos;Riders&apos;, 2014): [0], (&apos;Riders&apos;, 2015): [1], (&apos;Riders&apos;, 2016): [8], (&apos;Riders&apos;, 2017): [11], (&apos;Royals&apos;, 2014): [9], (&apos;Royals&apos;, 2015): [10], (&apos;king&apos;, 2015): [5]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(&apos;Devils&apos;, 2014)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">2  Devils     2  2014     863</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Devils&apos;, 2015)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">3  Devils     3  2015     673</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Kings&apos;, 2014)</span><br><span class="line">    Team  Rank  Year  Points</span><br><span class="line">4  Kings     3  2014     741</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Kings&apos;, 2016)</span><br><span class="line">    Team  Rank  Year  Points</span><br><span class="line">6  Kings     1  2016     756</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Kings&apos;, 2017)</span><br><span class="line">    Team  Rank  Year  Points</span><br><span class="line">7  Kings     1  2017     788</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Riders&apos;, 2014)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">0  Riders     1  2014     876</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Riders&apos;, 2015)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">1  Riders     2  2015     789</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Riders&apos;, 2016)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">8  Riders     2  2016     694</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Riders&apos;, 2017)</span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Royals&apos;, 2014)</span><br><span class="line">     Team  Rank  Year  Points</span><br><span class="line">9  Royals     4  2014     701</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;Royals&apos;, 2015)</span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">-------------------------------</span><br><span class="line">(&apos;king&apos;, 2015)</span><br><span class="line">   Team  Rank  Year  Points</span><br><span class="line">5  king     4  2015     812</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># **选择一个分组**</span><br><span class="line">gs = df.groupby(&quot;Year&quot;)</span><br><span class="line">g = gs.get_group(2017)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">11  Riders     2  2017     690</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">gs=df.groupby(df.dtypes,axis=1) #按数据类型分组</span><br><span class="line">for name, g in gs:</span><br><span class="line">    print(name)</span><br><span class="line">    print(g)</span><br><span class="line">    print(&quot;-------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">int64</span><br><span class="line">    Rank  Year  Points</span><br><span class="line">0      1  2014     876</span><br><span class="line">1      2  2015     789</span><br><span class="line">2      2  2014     863</span><br><span class="line">3      3  2015     673</span><br><span class="line">4      3  2014     741</span><br><span class="line">5      4  2015     812</span><br><span class="line">6      1  2016     756</span><br><span class="line">7      1  2017     788</span><br><span class="line">8      2  2016     694</span><br><span class="line">9      4  2014     701</span><br><span class="line">10     1  2015     804</span><br><span class="line">11     2  2017     690</span><br><span class="line">-------------------------------</span><br><span class="line">object</span><br><span class="line">      Team</span><br><span class="line">0   Riders</span><br><span class="line">1   Riders</span><br><span class="line">2   Devils</span><br><span class="line">3   Devils</span><br><span class="line">4    Kings</span><br><span class="line">5     king</span><br><span class="line">6    Kings</span><br><span class="line">7    Kings</span><br><span class="line">8   Riders</span><br><span class="line">9   Royals</span><br><span class="line">10  Royals</span><br><span class="line">11  Riders</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><h2 id="聚合，操作分组后的数据"><a href="#聚合，操作分组后的数据" class="headerlink" title="聚合，操作分组后的数据"></a>聚合，操作分组后的数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合 **操作分组后的数据**  忽略nan值</span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;Team&apos;: [&apos;Riders&apos;, &apos;Riders&apos;, &apos;Devils&apos;, &apos;Devils&apos;, &apos;Kings&apos;,</span><br><span class="line">    &apos;king&apos;, &apos;Kings&apos;, &apos;Kings&apos;, &apos;Riders&apos;, &apos;Royals&apos;, &apos;Royals&apos;, &apos;Riders&apos;],</span><br><span class="line">    &apos;Rank&apos;: [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],</span><br><span class="line">    &apos;Year&apos;: [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],</span><br><span class="line">    &apos;Points&apos;:[876,789,863,673,741,812,756,788,694,701,804,690]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">print(&quot;\n&quot;)</span><br></pre></td></tr></table></figure><h3 id="应用一个聚合函数"><a href="#应用一个聚合函数" class="headerlink" title="应用一个聚合函数"></a>应用一个聚合函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">gs=df.groupby(&apos;Team&apos;).sum()#按队名分组，并对每个队的其他项目求和</span><br><span class="line">print(gs)</span><br><span class="line">print(&apos;----------------------------&apos;)</span><br><span class="line"></span><br><span class="line"># 同时应用多个聚合函数</span><br><span class="line">gs=df.groupby(&apos;Team&apos;)</span><br><span class="line"></span><br><span class="line"># 若要对每个项目都应用多个函数，则只需df.groupby(&apos;Team&apos;).agg([各个方法即可])</span><br><span class="line">#这里，按队名分组，并对每个队的&apos;Rank&apos;项目求各个值</span><br><span class="line">g=gs[&apos;Rank&apos;].agg([np.sum,np.min,np.size])#按队名分组，并对每个队的其他项目求和</span><br><span class="line">print(g)</span><br><span class="line">g.columns=[&apos;求和&apos;,&apos;最小值&apos;,&apos;个数&apos;]</span><br><span class="line">g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">2   Devils     2  2014     863</span><br><span class="line">3   Devils     3  2015     673</span><br><span class="line">4    Kings     3  2014     741</span><br><span class="line">5     king     4  2015     812</span><br><span class="line">6    Kings     1  2016     756</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">9   Royals     4  2014     701</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Rank  Year  Points</span><br><span class="line">Team                      </span><br><span class="line">Devils     5  4029    1536</span><br><span class="line">Kings      5  6047    2285</span><br><span class="line">Riders     7  8062    3049</span><br><span class="line">Royals     5  4029    1505</span><br><span class="line">king       4  2015     812</span><br><span class="line">----------------------------</span><br><span class="line">        sum  amin  size</span><br><span class="line">Team                   </span><br><span class="line">Devils    5     2     2</span><br><span class="line">Kings     5     1     3</span><br><span class="line">Riders    7     1     4</span><br><span class="line">Royals    5     1     2</span><br><span class="line">king      4     4     1</span><br><span class="line"></span><br><span class="line">      求和最小值个数</span><br><span class="line">Team</span><br><span class="line">Devils5    2    2</span><br><span class="line">Kings  5    1    3</span><br><span class="line">Riders7    1    4</span><br><span class="line">Royals5    1    2</span><br><span class="line">king  4    4    1</span><br></pre></td></tr></table></figure><h3 id="apply聚合-应用自己写的函数"><a href="#apply聚合-应用自己写的函数" class="headerlink" title="apply聚合 应用自己写的函数"></a>apply聚合 应用自己写的函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    &apos;Team&apos;: [&apos;Riders&apos;, &apos;Riders&apos;, &apos;Devils&apos;, &apos;Devils&apos;, &apos;Kings&apos;,</span><br><span class="line">    &apos;king&apos;, &apos;Kings&apos;, &apos;Kings&apos;, &apos;Riders&apos;, &apos;Royals&apos;, &apos;Royals&apos;, &apos;Riders&apos;],</span><br><span class="line">    &apos;Rank&apos;: [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],</span><br><span class="line">    &apos;Year&apos;: [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],</span><br><span class="line">    &apos;Points&apos;:[876,789,863,673,741,812,756,788,694,701,804,690]</span><br><span class="line">&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">print(df)</span><br><span class="line">print(&quot;\n&quot;)</span><br></pre></td></tr></table></figure><h3 id="应用一个自定义的聚合函数"><a href="#应用一个自定义的聚合函数" class="headerlink" title="应用一个自定义的聚合函数"></a>应用一个自定义的聚合函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs=df.groupby(&apos;Team&apos;)[&apos;Rank&apos;].apply(lambda x:x+10)</span><br><span class="line">print(gs)</span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">gs = df.groupby(&quot;Team&quot;)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"># 转换返回索引与原DataFrame的索引相同的对象</span><br><span class="line"># 对比gs=df.groupby(&apos;Team&apos;).sum()看更好理解</span><br><span class="line"></span><br><span class="line">print(gs.transform(np.sum))</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">print(gs[&quot;Points&quot;].transform(np.sum))</span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">2   Devils     2  2014     863</span><br><span class="line">3   Devils     3  2015     673</span><br><span class="line">4    Kings     3  2014     741</span><br><span class="line">5     king     4  2015     812</span><br><span class="line">6    Kings     1  2016     756</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">9   Royals     4  2014     701</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Rank  Year  Points</span><br><span class="line">0      7  8062    3049</span><br><span class="line">1      7  8062    3049</span><br><span class="line">2      5  4029    1536</span><br><span class="line">3      5  4029    1536</span><br><span class="line">4      5  6047    2285</span><br><span class="line">5      4  2015     812</span><br><span class="line">6      5  6047    2285</span><br><span class="line">7      5  6047    2285</span><br><span class="line">8      7  8062    3049</span><br><span class="line">9      5  4029    1505</span><br><span class="line">10     5  4029    1505</span><br><span class="line">11     7  8062    3049</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0     3049</span><br><span class="line">1     3049</span><br><span class="line">2     1536</span><br><span class="line">3     1536</span><br><span class="line">4     2285</span><br><span class="line">5      812</span><br><span class="line">6     2285</span><br><span class="line">7     2285</span><br><span class="line">8     3049</span><br><span class="line">9     1505</span><br><span class="line">10    1505</span><br><span class="line">11    3049</span><br><span class="line">Name: Points, dtype: int64</span><br></pre></td></tr></table></figure><h2 id="过滤-根据定义的标准，过滤数据并返回数据的子集"><a href="#过滤-根据定义的标准，过滤数据并返回数据的子集" class="headerlink" title="过滤 根据定义的标准，过滤数据并返回数据的子集"></a>过滤 根据定义的标准，过滤数据并返回数据的子集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">print(df)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">gs = df.groupby(&quot;Team&quot;)</span><br><span class="line">print(gs.groups)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">print(gs.filter(lambda x: len(x) &gt;= 4))</span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">2   Devils     2  2014     863</span><br><span class="line">3   Devils     3  2015     673</span><br><span class="line">4    Kings     3  2014     741</span><br><span class="line">5     king     4  2015     812</span><br><span class="line">6    Kings     1  2016     756</span><br><span class="line">7    Kings     1  2017     788</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">9   Royals     4  2014     701</span><br><span class="line">10  Royals     1  2015     804</span><br><span class="line">11  Riders     2  2017     690</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&apos;Devils&apos;: [2, 3], &apos;Kings&apos;: [4, 6, 7], &apos;Riders&apos;: [0, 1, 8, 11], &apos;Royals&apos;: [9, 10], &apos;king&apos;: [5]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Team  Rank  Year  Points</span><br><span class="line">0   Riders     1  2014     876</span><br><span class="line">1   Riders     2  2015     789</span><br><span class="line">8   Riders     2  2016     694</span><br><span class="line">11  Riders     2  2017     690</span><br></pre></td></tr></table></figure><h2 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h2><ul><li>未设置aggfunc时，它默认aggfunc=’mean’计算均值</li><li>它根据一个或多个键对数据进行聚合，</li><li>并根据行和列上的分组键将数据分配到各个矩形区域中。</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>DataFrame</td></tr><tr><td>values</td><td>待聚合的列的名称。默认聚合所有数值列</td></tr><tr><td>index</td><td>用于分组的列名或其他分组键，出现在结果透视表的行</td></tr><tr><td>columns</td><td>用于分组的列名或其他分组键，出现在结果透视表的列</td></tr><tr><td>aggfunc</td><td>聚合函数或函数列表，默认为‘mean’。可以使任何对groupby有效的函数</td></tr><tr><td>fill_value</td><td>用于替换结果表中的缺失值</td></tr><tr><td>dropna</td><td>boolean，默认为True</td></tr><tr><td>margins_name</td><td>string，默认为‘ALL’，当参数margins为True时，ALL行和列的名字</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path=&apos;E:/Users/lqy/Desktop/Pandas学习/James_Harden.csv&apos;</span><br><span class="line">df = pd.read_csv(path)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index</span><br><span class="line">作用：每个pivot_table必须拥有一个index，Index就是层次字段，</span><br><span class="line">要通过透视表获取什么信息就按照相应的顺序设置字段，</span><br><span class="line">所以在进行pivot之前你也需要足够了解你的数据</span><br><span class="line"></span><br><span class="line"># 如果想查看哈登对阵每个队伍的得分，首先我们将对手设置为index</span><br><span class="line">pd.pivot_table(df,index=[u&apos;对手&apos;]).head()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 对手成为了第一层索引，还想看看对阵同一对手在不同主客场下的数据，</span><br><span class="line"># 试着将对手与胜负与主客场都设置为index，其实就变成为了两层索引</span><br><span class="line">pd.pivot_table(df,index=[u&apos;对手&apos;, u&apos;主客场&apos;]).head()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 试着交换下它们的顺序，数据结果一样</span><br><span class="line">pd.pivot_table(df,index=[u&apos;主客场&apos;,u&apos;对手&apos;]).head(15)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># values</span><br><span class="line"># 作用：可以对需要的计算数据进行筛选</span><br><span class="line"># 案例：我们只需要james harden在主客场和不同胜负情况下的得分、篮板与助攻三项数据</span><br><span class="line">pd.pivot_table(df,index=[u&apos;主客场&apos;,u&apos;胜负&apos;],values=[u&apos;得分&apos;,u&apos;助攻&apos;,u&apos;篮板&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                助攻得分篮板</span><br><span class="line">主客场 胜负</span><br><span class="line">  主  胜10.55555634.2222225.444444</span><br><span class="line">        负8.66666729.6666675.000000</span><br><span class="line">  客  胜9.00000032.0000004.916667</span><br><span class="line">        负8.00000020.0000004.000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># aggfunc</span><br><span class="line"></span><br><span class="line"># 作用：设置我们对数据聚合时进行的函数操作，未设置aggfunc时，它默认aggfunc=&apos;mean&apos;计算均值</span><br><span class="line"></span><br><span class="line"># 1. 获得james harden在主客场和不同胜负情况下的总得分、总篮板、总助攻</span><br><span class="line">pd.pivot_table(df,index=[u&apos;主客场&apos;,u&apos;胜负&apos;],values=[u&apos;得分&apos;,u&apos;助攻&apos;,u&apos;篮板&apos;],aggfunc=[np.sum,np.max])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    sumamax</span><br><span class="line">          助攻得分篮板助攻得分篮板</span><br><span class="line">主客场胜负</span><br><span class="line">    主胜9530849175611</span><br><span class="line">        负26891511386</span><br><span class="line">    客胜10838459154810</span><br><span class="line">        负8  204  8  204</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># aggfunc也可以使用dict类型，助攻求min,max和mean,得分求mean</span><br><span class="line">pd.pivot_table(df,index=[u&apos;对手&apos;,u&apos;胜负&apos;],values=[u&apos;得分&apos;,u&apos;助攻&apos;,u&apos;篮板&apos;],</span><br><span class="line">               aggfunc=&#123;u&apos;得分&apos;:np.mean, u&apos;助攻&apos;:[min, max, np.mean]&#125;).head()</span><br><span class="line"></span><br><span class="line">      助攻        得分</span><br><span class="line">          maxmeanminmean</span><br><span class="line">对手胜负</span><br><span class="line">76人胜13.013.013.027.0</span><br><span class="line">      负7.0  7.0  7.0  29.0</span><br><span class="line">勇士胜11.011.011.027.0</span><br><span class="line">国王胜9.0  9.0  9.0  27.0</span><br><span class="line">太阳胜7.0  7.0  7.0  48.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># columns</span><br><span class="line"></span><br><span class="line"># 作用：类似Index可以设置列层次字段，它不是一个必要参数，作为一种分割数据的可选方式</span><br><span class="line">pd.pivot_table(df,index=[u&apos;对手&apos;,u&apos;胜负&apos;],columns=[u&apos;主客场&apos;],values=[u&apos;得分&apos;]).head()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        得分</span><br><span class="line">    主客场主客</span><br><span class="line">对手胜负</span><br><span class="line">76人胜NaN27.0</span><br><span class="line">      负29.0NaN</span><br><span class="line">勇士胜NaN27.0</span><br><span class="line">国王胜NaN27.0</span><br><span class="line">太阳胜NaN48.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># fill_value</span><br><span class="line"></span><br><span class="line"># 作用：填充空值</span><br><span class="line">pd.pivot_table(df,index=[u&apos;对手&apos;,u&apos;胜负&apos;],columns=[u&apos;主客场&apos;],values=[u&apos;得分&apos;], fill_value=0).head()</span><br><span class="line"></span><br><span class="line">  得分</span><br><span class="line">    主客场 主客</span><br><span class="line">对手胜负</span><br><span class="line">76人胜0  27</span><br><span class="line">      负290</span><br><span class="line">勇士胜0  27</span><br><span class="line">国王胜0  27</span><br><span class="line">太阳胜0  48</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># margins</span><br><span class="line"></span><br><span class="line"># 作用：是否进行汇总</span><br><span class="line">pd.pivot_table(df,index=[u&apos;主客场&apos;],columns=[u&apos;对手&apos;],values=[u&apos;得分&apos;],aggfunc=[np.sum],fill_value=0,margins=1)</span><br><span class="line"></span><br><span class="line">    sum</span><br><span class="line">      得分</span><br><span class="line">对手76人勇士国王太阳小牛尼克斯开拓者掘金步行者湖人灰熊爵士猛龙篮网老鹰骑士鹈鹕黄蜂All</span><br><span class="line">主客场</span><br><span class="line">  主29000293702129060563837035260397</span><br><span class="line">  客272727480314802636492900290027404</span><br><span class="line">  All5627274829684821553610985383729352627801</span><br></pre></td></tr></table></figure><h2 id="数据交叉表"><a href="#数据交叉表" class="headerlink" title="数据交叉表"></a>数据交叉表</h2><ol><li>透视表pivot_table()是一种进行分组统计的函数，参数aggfunc决定统计类型</li><li>交叉表crosstab()是一种特殊的pivot_table()，专用于计算分组频率</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&apos;Sample&apos;: range(1, 8), </span><br><span class="line">                   &apos;Gender&apos;: [&apos;Female&apos;, &apos;Male&apos;, &apos;Female&apos;, &apos;Male&apos;, &apos;Male&apos;, &apos;Male&apos;, &apos;Female&apos;], </span><br><span class="line">                   &apos;Handedness&apos;: [&apos;Right-handed&apos;, &apos;Left-handed&apos;, &apos;Right-handed&apos;, &apos;Right-handed&apos;, &apos;Left-handed&apos;, &apos;Right-handed&apos;, &apos;Right-handed&apos;]&#125;)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">SampleGenderHandedness</span><br><span class="line">01FemaleRight-handed</span><br><span class="line">12MaleLeft-handed</span><br><span class="line">23FemaleRight-handed</span><br><span class="line">34MaleRight-handed</span><br><span class="line">45MaleLeft-handed</span><br><span class="line">56MaleRight-handed</span><br><span class="line">67FemaleRight-handed</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 需求：根据性别和用手习惯对这段数据进行统计汇总</span><br><span class="line"></span><br><span class="line"># 1. pivot_table()实现该功能</span><br><span class="line">pd.pivot_table(df, index=[&apos;Gender&apos;], columns=&apos;Handedness&apos;, aggfunc=len, margins=True)</span><br><span class="line"></span><br><span class="line">    Sample</span><br><span class="line">HandednessLeft-handedRight-handedAll</span><br><span class="line">    Gender</span><br><span class="line">    FemaleNaN          3.0       3</span><br><span class="line">      Male2.0          2.0        4</span><br><span class="line">       All2.0          5.0         7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># crosstab()函数会更方便</span><br><span class="line">pd.crosstab(df.Gender, df.Handedness, margins=True)</span><br><span class="line"></span><br><span class="line">HandednessLeft-handedRight-handedAll</span><br><span class="line">    Gender</span><br><span class="line">    Female0              3          3</span><br><span class="line">      Male2              2          4</span><br><span class="line">      All  2              5          7</span><br></pre></td></tr></table></figure><h2 id="IO操作-文件读写"><a href="#IO操作-文件读写" class="headerlink" title="IO操作 文件读写"></a>IO操作 文件读写</h2><table><thead><tr><th>read_csv</th><th>读取CSV文件</th></tr></thead><tbody><tr><td>read_excel</td><td>读取Excel文件</td></tr><tr><td>read_html</td><td>读取网页HTML文件</td></tr><tr><td>read_sql</td><td>读取sql数据库</td></tr><tr><td>read_sql_table</td><td>读取sql数据库中的表</td></tr></tbody></table><table><thead><tr><th>常用写文件方法</th><th>说明</th></tr></thead><tbody><tr><td>to_csv</td><td>写CSV文件</td></tr><tr><td>to_excel</td><td>写Excel文件</td></tr><tr><td>to_sql</td><td>写数据库</td></tr></tbody></table><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p>encoding一般情况下我们用utf-8编码进行保存，如果出现中文编码错误，则可以依次换用gbk，gb2312 , gb18030，一般总能成功的，本例中用utf-8</p></li><li><p>to_csv方法，具体参数还有很多，可以去看官方文档，这里提到一个index = False参数，表示保存csv的时候，我们不保存pandas 的Data frame的行索引1234这样的序号，默认情况不加的话是index = True，会有行号，这点在保存数据库mysql的时候体现尤其明显，不注意的话可能会出错</p></li></ol><p><strong>从csv文件读取后，作为DataFrame时，会自动添加索引列，然后保存，当再次读取时，会多一列叫：Unnamed: 0 ，处理如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_csv(&quot;./data.csv&quot;, index_col=[&quot;Unnamed: 0&quot;])</span><br><span class="line"></span><br><span class="line">或者直接删除这一列：del df[&apos;Unnamed: 0&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dtype的列可以作为字典传递,分别指定某一列的数据类型</span><br><span class="line">dtype=&#123;&apos;id&apos;: np.float64&#125;</span><br></pre></td></tr></table></figure><h2 id="日期时间样式数据统计"><a href="#日期时间样式数据统计" class="headerlink" title="日期时间样式数据统计"></a>日期时间样式数据统计</h2><h3 id="将上映时间设置为行索引-1986-06-08"><a href="#将上映时间设置为行索引-1986-06-08" class="headerlink" title="将上映时间设置为行索引 1986-06-08"></a>将上映时间设置为行索引 1986-06-08</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=data_dr.set_index(data_dr[&apos;上映时间&apos;])</span><br></pre></td></tr></table></figure><h3 id="并转换为日期时间格式"><a href="#并转换为日期时间格式" class="headerlink" title="并转换为日期时间格式"></a>并转换为日期时间格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&apos;上映时间&apos;]=pd.to_datetime(data[&apos;上映时间&apos;])</span><br></pre></td></tr></table></figure><h3 id="按年计数-即可得到每一年上应的电影数据"><a href="#按年计数-即可得到每一年上应的电影数据" class="headerlink" title="按年计数 即可得到每一年上应的电影数据"></a>按年计数 即可得到每一年上应的电影数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&apos;上映时间&apos;].resample(&apos;Y&apos;).count()</span><br></pre></td></tr></table></figure><h2 id="数据清理笔记"><a href="#数据清理笔记" class="headerlink" title="数据清理笔记"></a>数据清理笔记</h2><h3 id="从原始文件读取我们需要的字段usecols"><a href="#从原始文件读取我们需要的字段usecols" class="headerlink" title="从原始文件读取我们需要的字段usecols"></a>从原始文件读取我们需要的字段usecols</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data=pd.read_excel(&apos;./豆瓣电影数据.xlsx&apos;,usecols=[&apos;名字&apos;,&apos;类型&apos;,&apos;评分&apos;,&apos;投票人数&apos;,&apos;上映时间&apos;,&apos;产地&apos;])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><h3 id="对日期长度不足10位的设置为nan"><a href="#对日期长度不足10位的设置为nan" class="headerlink" title="对日期长度不足10位的设置为nan"></a>对日期长度不足10位的设置为nan</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df5=data[&apos;上映时间&apos;].apply(lambda x: x if (len(x)==10) else np.nan)</span><br></pre></td></tr></table></figure><h3 id="删除包含nan的数据"><a href="#删除包含nan的数据" class="headerlink" title="删除包含nan的数据"></a>删除包含nan的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_dr=data.drop(data[pd.isna(data[&apos;上映时间&apos;])].index)</span><br><span class="line">pd.isna(data_dr[&apos;上映时间&apos;]).value_counts()</span><br></pre></td></tr></table></figure><h3 id="删除包含斜杠的数据"><a href="#删除包含斜杠的数据" class="headerlink" title="删除包含斜杠的数据 /"></a>删除包含斜杠的数据 /</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_dr=data_dr.drop(data_dr[data_dr[&apos;上映时间&apos;].str.contains(&apos;/&apos;)].index)</span><br></pre></td></tr></table></figure><h3 id="对包含点的数据删除"><a href="#对包含点的数据删除" class="headerlink" title="对包含点的数据删除"></a>对包含点的数据删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_dr=data_dr.drop(data_dr[data_dr[&apos;上映时间&apos;].str.contains(&apos;\.&apos;)].index)</span><br></pre></td></tr></table></figure><h3 id="对包含’（’的数据删除"><a href="#对包含’（’的数据删除" class="headerlink" title="对包含’（’的数据删除"></a>对包含’（’的数据删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=data.drop(data[data[&apos;上映时间&apos;].str.contains(&apos;（&apos;)].index)</span><br></pre></td></tr></table></figure><h3 id="删除投票人数小于0的数据"><a href="#删除投票人数小于0的数据" class="headerlink" title="删除投票人数小于0的数据"></a>删除投票人数小于0的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_dr2 = data_dr.drop(data_dr[data_dr[&apos;投票人数&apos;] &lt; 0].index)</span><br></pre></td></tr></table></figure><h3 id="投票人数有小数，为异常值，删除"><a href="#投票人数有小数，为异常值，删除" class="headerlink" title="投票人数有小数，为异常值，删除"></a>投票人数有小数，为异常值，删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_dr3 = data_dr2.drop(data_dr2[data_dr2[&apos;投票人数&apos;] % 1 != 0].index)</span><br></pre></td></tr></table></figure><h3 id="对异常日期的清理，包括闰年等"><a href="#对异常日期的清理，包括闰年等" class="headerlink" title="对异常日期的清理，包括闰年等"></a>对异常日期的清理，包括闰年等</h3><h4 id="如下age字段第一条张三正常，其他都不符要求"><a href="#如下age字段第一条张三正常，其他都不符要求" class="headerlink" title="如下age字段第一条张三正常，其他都不符要求"></a>如下age字段第一条张三正常，其他都不符要求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import re</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;&apos;name&apos;:[&apos;张三&apos;,&apos;李四&apos;,&apos;王武&apos;,&apos;赵柳&apos;,&apos;马强&apos;,&apos;杨波&apos;],</span><br><span class="line">     &apos;age&apos;:[&apos;1994-09-10&apos;,&apos;20136-2013&apos;,&apos;2020-02-29&apos;,&apos;19955.1997&apos;,&apos;19898/1989&apos;,&apos;2011-7（台湾）&apos;]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c59c6a844ef46bb2add6ef.jpg" alt></p><h4 id="yy-mm-dd格式的日期正则匹配"><a href="#yy-mm-dd格式的日期正则匹配" class="headerlink" title="yy-mm-dd格式的日期正则匹配"></a>yy-mm-dd格式的日期正则匹配</h4><h4 id="apply函数作用后返回一个新的列-，可以重新覆盖"><a href="#apply函数作用后返回一个新的列-，可以重新覆盖" class="headerlink" title="apply函数作用后返回一个新的列 ，可以重新覆盖"></a>apply函数作用后返回一个新的列 ，可以重新覆盖</h4><h4 id="将不匹配的数据全部转换为NAN，然后统一删除"><a href="#将不匹配的数据全部转换为NAN，然后统一删除" class="headerlink" title="将不匹配的数据全部转换为NAN，然后统一删除"></a>将不匹配的数据全部转换为NAN，然后统一删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;age&apos;]=df[&apos;age&apos;].apply(lambda x: x if (re.fullmatch(r&quot;([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))&quot;,x)) else np.nan)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c59dd9844ef46bb2c98a74.jpg" alt></p><h4 id="删除NAN-相应的行也删除"><a href="#删除NAN-相应的行也删除" class="headerlink" title="删除NAN,相应的行也删除"></a>删除NAN,相应的行也删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_dr=df.drop(df[pd.isna(df[&apos;age&apos;])].index)</span><br><span class="line">data_dr </span><br><span class="line"></span><br><span class="line">  nameage</span><br><span class="line">0张三1994-09-10</span><br></pre></td></tr></table></figure><h2 id="将一列字段元组拆分成两列字段，非常好"><a href="#将一列字段元组拆分成两列字段，非常好" class="headerlink" title="将一列字段元组拆分成两列字段，非常好"></a>将一列字段元组拆分成两列字段，非常好</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c5efa3844ef46bb2788259.jpg" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i in range (len(df2)):</span><br><span class="line">    l1 = [list(j)[0] for j in df2[0]]</span><br><span class="line">    l2 = [list(k)[1] for k in df2[0]]</span><br><span class="line">l1</span><br><span class="line">l2</span><br><span class="line">df2[&apos;country&apos;] = l1</span><br><span class="line">df2[&apos;year&apos;] = l2</span><br><span class="line">df2</span><br></pre></td></tr></table></figure></p><p><img src="https://pic.imgdb.cn/item/60c5f042844ef46bb27ed87d.jpg" alt></p><h2 id="找到2008年，中国产的电影数量"><a href="#找到2008年，中国产的电影数量" class="headerlink" title="找到2008年，中国产的电影数量"></a>找到2008年，中国产的电影数量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2[df2[&apos;country&apos;]==&apos;中国&apos;][df2[&apos;year&apos;]==&apos;2008&apos;][&apos;num&apos;])</span><br></pre></td></tr></table></figure><h2 id="生成2-0到3-9步长为0-1的列表"><a href="#生成2-0到3-9步长为0-1的列表" class="headerlink" title="生成2.0到3.9步长为0.1的列表"></a>生成2.0到3.9步长为0.1的列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bins=[]</span><br><span class="line">ls=[]</span><br><span class="line">x=20</span><br><span class="line">while x &lt;= 39:</span><br><span class="line">    bins.append(x)</span><br><span class="line">    x+= 1</span><br><span class="line"> </span><br><span class="line">for i in bins:</span><br><span class="line">    ls.append(i/10)</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h2 id="DataFrame-竖向形式的表遍历转为横向的表"><a href="#DataFrame-竖向形式的表遍历转为横向的表" class="headerlink" title="DataFrame 竖向形式的表遍历转为横向的表"></a>DataFrame 竖向形式的表遍历转为横向的表</h2><ul><li>其核心是根据第二个表的坐标，找到第一个表对应的值，填入第二个表对应的位置</li><li>若在第一个表中找不到，则填入np.nan，最后统一用0填补</li><li>坐标对应的两个字段必须是两个表都有的字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># country_year_num是竖向的表</span><br><span class="line"># df是横向的表</span><br><span class="line">for i in df.index:</span><br><span class="line">    for j in df.columns:</span><br><span class="line">        ls=country_year_num[country_year_num[&apos;country&apos;]==j][country_year_num[&apos;year&apos;]==i][&apos;num&apos;].values</span><br><span class="line">        if len(ls) &gt; 0:</span><br><span class="line">            df.loc[i][j]=ls[0] </span><br><span class="line">        else:</span><br><span class="line">            df.loc[i][j]=np.nan</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60c78486844ef46bb22b3173.jpg" alt="country_year_num是竖向的表"><br><img src="https://pic.imgdb.cn/item/60c784c9844ef46bb231010d.jpg" alt="df是横向的表"><br><img src="https://pic.imgdb.cn/item/60c785d5844ef46bb2482f34.jpg" alt="填充后"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(0)</span><br></pre></td></tr></table></figure></p><p><img src="https://pic.imgdb.cn/item/60c7852a844ef46bb2394e54.jpg" alt></p><h2 id="热力图heatmap"><a href="#热力图heatmap" class="headerlink" title="热力图heatmap"></a>热力图heatmap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib</span><br><span class="line"></span><br><span class="line">rates=df.index</span><br><span class="line">geners=df.columns</span><br><span class="line">nums=df.values</span><br></pre></td></tr></table></figure><h2 id="箱形图"><a href="#箱形图" class="headerlink" title="箱形图"></a>箱形图</h2><ul><li>四分位：一列数据从小到大排列，第四分之一位置即下四分位，上四分位即四分之三位，或从大到小的第四分之一位</li><li>IQR:上四分位减去下四分位</li><li>上界：上四分位+1.5IQR</li><li>下界：下四分位-1.5IQR</li><li>异常值：超过上界或下界的值</li><li>中位数：中间位置的数</li><li>最值：排除异常值之后的极值</li><li>箱子越短数据越集中</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-pandas%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据分析之NumPy笔记</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-NumPy%E7%AC%94%E8%AE%B0/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-NumPy%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Thu, 08 Apr 2021 14:03:00 GMT</pubDate>
      <description>
      
        Python数据分析以及机器学习的基础知识NumPy简单了解
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="NumPy简介"><a href="#NumPy简介" class="headerlink" title="NumPy简介"></a>NumPy简介</h2><ul><li>是一个运行速度非常快的数学库，主要用于数组计算</li><li>NumPy 通常与 SciPy和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab</li><li>是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习</li><li>包含一个强大的N维数组对象 ndarray<h3 id="NumPy数据结构"><a href="#NumPy数据结构" class="headerlink" title="NumPy数据结构"></a>NumPy数据结构</h3></li><li>numpy 支持的数据类型比 Python 内置的类型要多很多，</li><li>基本上可以和 C 语言的数据类型对应上，其中部分类型对应为 Python 内置的类型</li></ul><h2 id="创建Ndarray数组对象"><a href="#创建Ndarray数组对象" class="headerlink" title="创建Ndarray数组对象"></a>创建Ndarray数组对象</h2><h3 id="使用array函数"><a href="#使用array函数" class="headerlink" title="使用array函数"></a>使用array函数</h3><ul><li>numpy默认ndarray的所有元素的类型是相同的，这一点与Python中的list不同</li><li>如果传进来的列表中包含不同的类型，则统一为同一类型，优先级：str&gt;float&gt;int<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一维数组</span><br><span class="line">import numpy as np</span><br><span class="line">arr = np.array([1,2,3,4,5])</span><br><span class="line">print(arr) # [1 2 3 4 5]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二维数组</span><br><span class="line">import numpy as np</span><br><span class="line">arr = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">print(arr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">常用的二维数组创建方式</span><br><span class="line">a=np.random.randint(0,8,6)</span><br><span class="line">print(a) #[6 2 4 4 0 6]</span><br><span class="line"></span><br><span class="line">a=np.random.randint(0,8,6).reshape(2,3)</span><br><span class="line">print(a) </span><br><span class="line">[[3 1 1]</span><br><span class="line"> [7 6 3]]</span><br><span class="line"></span><br><span class="line">a4=np.arange(0,20,2).reshape(2,5)</span><br><span class="line">print(a4)</span><br><span class="line"></span><br><span class="line">[[ 0,  2,  4,  6,  8],</span><br><span class="line">[10, 12, 14, 16, 18]])</span><br></pre></td></tr></table></figure><h2 id="数组形状"><a href="#数组形状" class="headerlink" title="数组形状"></a>数组形状</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a4.shape #(2, 5)</span><br><span class="line"></span><br><span class="line">#转置</span><br><span class="line">a5=a4.T</span><br><span class="line">a5</span><br><span class="line"></span><br><span class="line">[[ 0, 10],</span><br><span class="line">  [ 2, 12],</span><br><span class="line">  [ 4, 14],</span><br><span class="line">  [ 6, 16],</span><br><span class="line">  [ 8, 18]]</span><br><span class="line"></span><br><span class="line">a5.shape #(5, 2)</span><br><span class="line"></span><br><span class="line">#resize</span><br><span class="line">a6=np.arange(0,10,2)</span><br><span class="line">print(a6) #[0 2 4 6 8]</span><br><span class="line"></span><br><span class="line">a6.resize(3)</span><br><span class="line">print(a6) #[0 2 4]</span><br><span class="line"></span><br><span class="line">a6.resize(6)</span><br><span class="line">print(a6) #[0 2 4 6 8 0]</span><br><span class="line"></span><br><span class="line">a6.size #6</span><br></pre></td></tr></table></figure><h2 id="数组类型转换"><a href="#数组类型转换" class="headerlink" title="数组类型转换"></a>数组类型转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randint(1,8,3)</span><br><span class="line">a.dtype #dtype(&apos;int32&apos;)</span><br><span class="line"></span><br><span class="line">a=np.random.randint(1,8,3).astype(&apos;int64&apos;)</span><br><span class="line">a.dtype #dtype(&apos;int64&apos;)</span><br></pre></td></tr></table></figure><h2 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a1=np.arange(4)</span><br><span class="line">a2=np.arange(2,6)</span><br><span class="line">print(a1) #[0 1 2 3]</span><br><span class="line">print(a2) #[2 3 4 5]</span><br><span class="line">#横向拼接</span><br><span class="line">print(np.hstack((a1,a2))) #[0 1 2 3 2 3 4 5]</span><br><span class="line"></span><br><span class="line">#竖向拼接</span><br><span class="line">print(np.vstack((a1,a2)))</span><br><span class="line">[[0 1 2 3]</span><br><span class="line"> [2 3 4 5]]</span><br></pre></td></tr></table></figure><h2 id="数组添加"><a href="#数组添加" class="headerlink" title="数组添加"></a>数组添加</h2><ul><li>在数组的末尾添加值</li><li>追加操作会分配整个数组，并把原来的数组复制到新数组中</li><li>输入数组的维度必须匹配否则将生成ValueError</li><li>axis当axis无定义时，是横向加成，返回总是为一维数组！</li><li>当axis有定义的时候，分别为0和1的时候。为0的时候（列数要相同）。</li><li>当axis为1时，数组是加在右边（行数要相同）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x=np.arange(6).reshape(2,3)</span><br><span class="line">print(x) </span><br><span class="line"># [[0 1 2]</span><br><span class="line"> [3 4 5]]</span><br><span class="line"></span><br><span class="line">y=[7,8,9]</span><br><span class="line">z=np.append(x,y)</span><br><span class="line">print(z)</span><br><span class="line"># [0 1 2 3 4 5 7 8 9]</span><br><span class="line"></span><br><span class="line">z2=np.append(x,[y],axis=0)</span><br><span class="line">print(z2)</span><br><span class="line">#</span><br><span class="line">[[0 1 2]</span><br><span class="line"> [3 4 5]</span><br><span class="line"> [7 8 9]]</span><br></pre></td></tr></table></figure><ul><li>insert()方法</li><li>在给定索引之前，沿给定轴在输入数组中插入值</li></ul><h2 id="delete-删除"><a href="#delete-删除" class="headerlink" title="delete()删除"></a>delete()删除</h2><h2 id="unique-去重"><a href="#unique-去重" class="headerlink" title="unique()去重"></a>unique()去重</h2><h2 id="数组拆分"><a href="#数组拆分" class="headerlink" title="数组拆分"></a>数组拆分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a3=np.arange(16).reshape(4,4)</span><br><span class="line">#横向</span><br><span class="line">a4,a5=np.hsplit(a3,2)</span><br><span class="line">print(a3)</span><br><span class="line">print(a4)</span><br><span class="line">print(a5)</span><br><span class="line"></span><br><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]</span><br><span class="line"> [12 13 14 15]]</span><br><span class="line"></span><br><span class="line">[[ 0  1]</span><br><span class="line"> [ 4  5]</span><br><span class="line"> [ 8  9]</span><br><span class="line"> [12 13]]</span><br><span class="line"></span><br><span class="line">[[ 2  3]</span><br><span class="line"> [ 6  7]</span><br><span class="line"> [10 11]</span><br><span class="line"> [14 15]]</span><br><span class="line"></span><br><span class="line">#纵向</span><br><span class="line">a6,a7,a8,a9=np.vsplit(a3,4)</span><br><span class="line">print(a6) #[[0 1 2 3]]</span><br><span class="line">print(a7) #[[4 5 6 7]]</span><br><span class="line">print(a8) #[[ 8  9 10 11]]</span><br><span class="line">print(a9) #[[12 13 14 15]]</span><br></pre></td></tr></table></figure><h2 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h2><ul><li>复制数组，产生一个新的数组，而直接赋值的话，一个修改后另一个也跟着变<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([1,2,3])</span><br><span class="line">b=a</span><br><span class="line">print(a) #[1 2 3]</span><br><span class="line">print(b) #[1 2 3]</span><br><span class="line">b[0]=8</span><br><span class="line">print(a) #[8 2 3]</span><br><span class="line">print(b) #[8 2 3]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c=a.copy()</span><br><span class="line">print(c) #[8 2 3]</span><br><span class="line">c[1]=6</span><br><span class="line">print(a) #[8 2 3]</span><br><span class="line">print(c) #[8 6 3]</span><br></pre></td></tr></table></figure><h2 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h2><ul><li>ndarray对象的内容可以通过索引或切片来访问和修改，与Python中list的切片操作一样</li><li>二维时，a[1:,3:],这种第一个表示行索引，第二个表示列索引</li><li>布尔索引通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组,如print(a[a&gt;5])</li><li>可以通过冒号分隔切片参数 start:stop:step 来进行切片操作</li><li>冒号 : 的解释</li><li>如果只放置一个参数，如 [2]，将返回与该索引相对应的单个元素。如果为 [2:]，表示从该索引开始以后的所有项都将被提取。如果使用了两个参数，如 [2:7]，那么则提取两个索引(不包括停止索引)之间的项</li></ul><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><ul><li>是numpy对不同形状(shape)的数组进行数值计算的方式，对数组的算术运算通常在相应的元素上进行</li><li>较小的数组会广播到较大数组的大小，以便使它们的形状可兼容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([1,2,3])</span><br><span class="line">b=np.arange(12).reshape(4,3)</span><br><span class="line">print(a) #[1 2 3]</span><br><span class="line">print(b) </span><br><span class="line"></span><br><span class="line">[[ 0  1  2]</span><br><span class="line"> [ 3  4  5]</span><br><span class="line"> [ 6  7  8]</span><br><span class="line"> [ 9 10 11]]</span><br><span class="line"></span><br><span class="line">print(a+b)</span><br><span class="line">[[ 1,  3,  5],</span><br><span class="line">[ 4,  6,  8],</span><br><span class="line">[ 7,  9, 11],</span><br><span class="line">[10, 12, 14]]</span><br></pre></td></tr></table></figure><h2 id="extract-函数提取元素"><a href="#extract-函数提取元素" class="headerlink" title="extract()函数提取元素"></a>extract()函数提取元素</h2><ul><li>根据某个条件从数组中抽取元素，返回满足条件的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(5)</span><br><span class="line">print(np.extract(a&gt;2,a))</span><br><span class="line"># [3 4]</span><br></pre></td></tr></table></figure><h2 id="arange函数用于创建等差数组"><a href="#arange函数用于创建等差数组" class="headerlink" title="arange函数用于创建等差数组"></a>arange函数用于创建等差数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange([start, ]stop, [step, ]dtype=None)</span><br></pre></td></tr></table></figure><h2 id="np-random随机数"><a href="#np-random随机数" class="headerlink" title="np.random随机数"></a>np.random随机数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rand()</span><br><span class="line">生成一个[0,1),不包括1，之间的随机浮点数或N维浮点数组。</span><br><span class="line">1 np.random.rand(a)</span><br><span class="line">表示生成a个[0,1)的数</span><br><span class="line">2 np.random.rand(a,b))</span><br><span class="line">表示生成a行b列的二维数组，值为[0,1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.randn(d0, d1, …, dn)产生标准正态分布随机数</span><br><span class="line"></span><br><span class="line">np.random.randint(low[, high, size, dtype])产生随机整数</span><br><span class="line"></span><br><span class="line">np.random.random_sample([size])在[0,1）内产生随机数</span><br><span class="line"></span><br><span class="line">np.random.choice(a[, size, replace, p])从a中随机选择指定数据</span><br><span class="line"></span><br><span class="line">np.where(condition, x, y) 满足条件(condition)，输出x，不满足输出y。</span><br><span class="line"></span><br><span class="line">m=np.random.uniform(x,y,n)</span><br><span class="line"></span><br><span class="line"># x -- 随机数的最小值，包含该值。</span><br><span class="line"># y -- 随机数的最大值，不包含该值。</span><br><span class="line"># n -- 指定次数，n是几，x就有几个值</span><br><span class="line"># 返回一个浮点数</span><br></pre></td></tr></table></figure><h2 id="NumPy是后面pandas的基础，了解一下就行了，以后都是在它的封装之上的pandas上操作"><a href="#NumPy是后面pandas的基础，了解一下就行了，以后都是在它的封装之上的pandas上操作" class="headerlink" title="NumPy是后面pandas的基础，了解一下就行了，以后都是在它的封装之上的pandas上操作"></a>NumPy是后面pandas的基础，了解一下就行了，以后都是在它的封装之上的pandas上操作</h2><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%B7%A5%E5%85%B7-NumPy%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>excel笔记</title>
      <link>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/excel%E7%AC%94%E8%AE%B0/</link>
      <guid>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/excel%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sun, 04 Apr 2021 12:22:51 GMT</pubDate>
      <description>
      
        Excel使用小案例小技巧学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;编辑函数时，最好点击上面的fx这个东西，回调出参数说明窗口，以及自动添加双引号、补全括号等好处。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h2><ul><li>三个参数：判断条件，为真时的结果，为假时的结果<br><code>=IF(C2&gt;=90,&quot;良&quot;,IF(C2&gt;=80,&quot;优&quot;,IF(C2&gt;=60,&quot;及格&quot;,&quot;不及格&quot;)))</code></li></ul><p><img src="https://pic.imgdb.cn/item/60ed59715132923bf8fffe78.jpg" alt></p><ul><li>其实这个操作用vlookup更简便，注意要模糊匹配1</li></ul><p><img src="https://pic.imgdb.cn/item/60ed588f5132923bf8faa204.jpg" alt></p><h3 id="pandas实现"><a href="#pandas实现" class="headerlink" title="pandas实现"></a>pandas实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">df=pd.DataFrame(&#123;&apos;age&apos;:[3,4,5,21,33,72]&#125;)</span><br><span class="line"></span><br><span class="line">df[&apos;label&apos;]=df.age.apply(lambda x: &apos;小孩&apos; if (x&lt;18) else &apos;大人&apos;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h2 id="match查找函数，返回相对位置"><a href="#match查找函数，返回相对位置" class="headerlink" title="match查找函数，返回相对位置"></a>match查找函数，返回相对位置</h2><ul><li>查找谁，在哪些区域，精确查找<br><code>=MATCH(K4,$I$4:$I$27,0)</code></li></ul><h2 id="index函数根据行列索引返回交叉处的值"><a href="#index函数根据行列索引返回交叉处的值" class="headerlink" title="index函数根据行列索引返回交叉处的值"></a>index函数根据行列索引返回交叉处的值</h2><p><code>=INDEX(G4:K14,3,3)</code></p><p>根据一个值如编号，查找它一行中的所有信息<br><img src="https://pic.imgdb.cn/item/60e7210f5132923bf88eda59.jpg" alt><br>在工号单元格输入<code>=INDEX(H4:H14,$N$4)</code>，第三个参数不输，完成后向右拖即可，H4:H14是工号列，$N$4是No列</p><h2 id="拆分列数据-分列"><a href="#拆分列数据-分列" class="headerlink" title="拆分列数据-分列"></a>拆分列数据-分列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java|大数据|C语言</span><br><span class="line">数据分析|nodejs|css</span><br><span class="line">Java|大数据|C语言</span><br><span class="line">数据分析|nodejs|css</span><br><span class="line">Java|大数据|C语言</span><br><span class="line"></span><br><span class="line">#没个数据之间为“|”竖杠分割的</span><br><span class="line">1：选中数据区域</span><br><span class="line">2：菜单栏选数据&gt;分列</span><br><span class="line">3：&gt;按分隔符号&gt;下一步&gt;勾选其他并输入竖杠 | &gt;下一步&gt;OK</span><br></pre></td></tr></table></figure><h3 id="pandas实现-1"><a href="#pandas实现-1" class="headerlink" title="pandas实现"></a>pandas实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&apos;name&apos;].str.split(&apos;|&apos;,expand=True)</span><br></pre></td></tr></table></figure><h2 id="处理带单位的运算"><a href="#处理带单位的运算" class="headerlink" title="处理带单位的运算"></a>处理带单位的运算</h2><h3 id="pandas实现-2"><a href="#pandas实现-2" class="headerlink" title="pandas实现"></a>pandas实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">e1=pd.read_excel(&apos;E:/Users/lqy/Desktop/Excel学习/带单位运算.xlsx&apos;,sheet_name=&apos;带单位运算&apos;)</span><br><span class="line">e1</span><br><span class="line">*提取数字并将字符串类型转为数字类型*</span><br><span class="line">e1[&apos;单价&apos;]=e1[&apos;单价&apos;].str.extract(&apos;(\d+)&apos;).astype(&apos;int&apos;) </span><br><span class="line">e1[&apos;销量&apos;]=e1[&apos;销量&apos;].str.extract(&apos;(\d+)&apos;).astype(&apos;int&apos;)</span><br><span class="line">e1[&apos;销售额&apos;]=e1[&apos;单价&apos;]*e1[&apos;销量&apos;]</span><br><span class="line">e1</span><br><span class="line"></span><br><span class="line">e1.to_excel(&apos;E:/Users/lqy/Desktop/Excel学习/带单位运算.xlsx&apos;,sheet_name=&apos;带单位运算&apos;)</span><br></pre></td></tr></table></figure><h2 id="更换证件照底色"><a href="#更换证件照底色" class="headerlink" title="更换证件照底色"></a>更换证件照底色</h2><h3 id="抠图网站实现"><a href="#抠图网站实现" class="headerlink" title="抠图网站实现"></a>抠图网站实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不用Excel ，以下网站可以抠图并更换背景</span><br><span class="line">https://koutu.gaoding.com/clip?from=0&amp;id=15342049129143310</span><br></pre></td></tr></table></figure><h2 id="更改第一列的索引从1开始"><a href="#更改第一列的索引从1开始" class="headerlink" title="更改第一列的索引从1开始"></a>更改第一列的索引从1开始</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e1.index=list(range(1,len(e1[&apos;销量&apos;])+1))</span><br><span class="line">e1</span><br></pre></td></tr></table></figure><h2 id="多处自动求和"><a href="#多处自动求和" class="headerlink" title="多处自动求和"></a>多处自动求和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对应excel表中的汇总1和汇总2这两行都是要将他们上面的数据进行求和的，首先选中所有数据，CTRL+G ，在定位条件里面选择空值，然后，在菜单栏选择自动求和即可</span><br></pre></td></tr></table></figure><h2 id="身份证输入"><a href="#身份证输入" class="headerlink" title="身份证输入"></a>身份证输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单元格默认输入数字的长度为11个</span><br><span class="line">首先键入英文逗号’再在后面输入即可，本质上是将数字类型转为文本类型</span><br></pre></td></tr></table></figure><h2 id="分数输入3-4"><a href="#分数输入3-4" class="headerlink" title="分数输入3/4"></a>分数输入3/4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接输入会变成月份日期形式</span><br><span class="line">首先输入零0+空格，再输入即可3/4</span><br></pre></td></tr></table></figure><h2 id="工资条添加头部"><a href="#工资条添加头部" class="headerlink" title="工资条添加头部"></a>工资条添加头部</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假如有三个人的工资</span><br><span class="line">在表的右边工资行空白列输入1，2，3，三列然后再复制这三列到下面一格，然后在空白处点一下，</span><br><span class="line">在导航栏选择数据&gt;筛选&gt;升序，即可留出各个表头的空行，</span><br><span class="line">然后选中这些数据（不要辅助列），CTRL+G在定位条件里面选择空值，然后输入=，再点一下姓名那一格之后，按CTRL+enter即可</span><br></pre></td></tr></table></figure><h2 id="工号输入-前面带有0的长数字"><a href="#工号输入-前面带有0的长数字" class="headerlink" title="工号输入 前面带有0的长数字"></a>工号输入 前面带有0的长数字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前面有零会默认不显示的</span><br><span class="line">可以正常输入后再选中</span><br><span class="line">然后点击子体栏右下角，选择数字，自定义，右侧通用格式(第一行通用格式里面输入5个0即可)，几位工号输入几个0</span><br><span class="line">或者按身份证好的那种方法也可以</span><br></pre></td></tr></table></figure><h2 id="保护工作簿和工作表"><a href="#保护工作簿和工作表" class="headerlink" title="保护工作簿和工作表"></a>保护工作簿和工作表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择审阅，保护工作簿或保护工作表</span><br></pre></td></tr></table></figure><h2 id="将打开的两张工作簿，显示在一个一个窗口里面，方便对比"><a href="#将打开的两张工作簿，显示在一个一个窗口里面，方便对比" class="headerlink" title="将打开的两张工作簿，显示在一个一个窗口里面，方便对比"></a>将打开的两张工作簿，显示在一个一个窗口里面，方便对比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择视图&gt;全部重排&gt;垂直即可</span><br></pre></td></tr></table></figure><h2 id="打印页头"><a href="#打印页头" class="headerlink" title="打印页头"></a>打印页头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打印时保证每一页都有页头</span><br><span class="line">页面布局&gt;打印标题&gt;工作表&gt;顶端标题行，</span><br><span class="line">在这个框里面点击，然后在做左侧选择表头所在行点击即可</span><br></pre></td></tr></table></figure><h2 id="打印页脚"><a href="#打印页脚" class="headerlink" title="打印页脚"></a>打印页脚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">页面布局栏右下角&gt;页面设置&gt;页眉页脚&gt;页脚，</span><br><span class="line">一般选‘第几页，共几页’的格式即可</span><br><span class="line"></span><br><span class="line">#合并的单元格内容向下填充</span><br><span class="line">可以从右下角加号往下拉</span><br><span class="line">也可以选中这个单元格和下面的填充位置</span><br><span class="line">按CTRL+enter即可</span><br></pre></td></tr></table></figure><h2 id="合并的单元格公式向下填充：加法为例"><a href="#合并的单元格公式向下填充：加法为例" class="headerlink" title="合并的单元格公式向下填充：加法为例"></a>合并的单元格公式向下填充：加法为例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">点击这一格，按=号，点击前面需要加和的单元格，再按+号，</span><br><span class="line">再点击前面需要加和的单元格，</span><br><span class="line">输完公式，按enter，右下角加号往下拉即可</span><br><span class="line"></span><br><span class="line">或者输完公式，按enter后，选中这一格和需要填充的单元格</span><br><span class="line">在编辑栏（fx那一栏）点击一下， CTRL+enter即可</span><br></pre></td></tr></table></figure><h2 id="ctrl-E-快速拆分填充-2013版本新增功能"><a href="#ctrl-E-快速拆分填充-2013版本新增功能" class="headerlink" title="ctrl+E 快速拆分填充 2013版本新增功能"></a>ctrl+E 快速拆分填充 2013版本新增功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：https://zhuanlan.zhihu.com/p/42571089</span><br><span class="line">：以下内容2010版虽然不行，但是难不倒一个会python的帅哥！！</span><br><span class="line">字符中统一添加特定字符</span><br><span class="line">拆分姓名和手机号码 合并姓名和手机号码</span><br><span class="line">从身份证号码中提取生日</span><br><span class="line">提取括号内的字符和数字</span><br><span class="line">手机号码分段显示和加密</span><br><span class="line">提取市区名称</span><br><span class="line">银行账号添加空格</span><br></pre></td></tr></table></figure><h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CTRL + F即可调出查找和替换，两个在一起，</span><br><span class="line">点击全部查找，再点击全部替换，</span><br><span class="line">或点下一个也行</span><br><span class="line">可以点击右下角选项，有更多的搜索选项</span><br></pre></td></tr></table></figure><h2 id="CTRL-；快速输入日期"><a href="#CTRL-；快速输入日期" class="headerlink" title="CTRL+；快速输入日期"></a>CTRL+；快速输入日期</h2><h2 id="Alt-快速求和"><a href="#Alt-快速求和" class="headerlink" title="Alt+=快速求和"></a>Alt+=快速求和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选中数据框按Alt+=快速求和</span><br><span class="line">横向、竖向都会求和</span><br><span class="line">单独选横向，可以单独求和，竖向一样</span><br></pre></td></tr></table></figure><h2 id="F4重复上一步骤-添加-绝对引用符号"><a href="#F4重复上一步骤-添加-绝对引用符号" class="headerlink" title="F4重复上一步骤;添加$绝对引用符号"></a>F4重复上一步骤;添加$绝对引用符号</h2><h2 id="left函数：从左往右提取几个字符的内容left-单元格，取几个数"><a href="#left函数：从左往右提取几个字符的内容left-单元格，取几个数" class="headerlink" title="left函数：从左往右提取几个字符的内容left(单元格，取几个数)"></a>left函数：从左往右提取几个字符的内容left(单元格，取几个数)</h2><h2 id="right函数一样用法"><a href="#right函数一样用法" class="headerlink" title="right函数一样用法"></a>right函数一样用法</h2><h2 id="mid函数：从中间提取，mid-单元格，从第几位数开始-娶几个数"><a href="#mid函数：从中间提取，mid-单元格，从第几位数开始-娶几个数" class="headerlink" title="mid函数：从中间提取，mid(单元格，从第几位数开始, 娶几个数)"></a>mid函数：从中间提取，mid(单元格，从第几位数开始, 娶几个数)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如身份证号码提取生日：</span><br><span class="line">=MID(B3,7,8) 形如：19960823</span><br><span class="line">=TEXT(MID(B3,7,8),&quot;0000-00-00&quot;) 形如：1996-08-23</span><br></pre></td></tr></table></figure><h2 id="find函数，查找某一字符在数据源单元格里面出现的位置。"><a href="#find函数，查找某一字符在数据源单元格里面出现的位置。" class="headerlink" title="find函数，查找某一字符在数据源单元格里面出现的位置。"></a>find函数，查找某一字符在数据源单元格里面出现的位置。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配合上面的提取函数可以组合使用</span><br><span class="line">find(要查找的字符，数据源单元格)</span><br></pre></td></tr></table></figure><h2 id="len函数求某一单元格字符的长度，配合提取函数可以组合使用"><a href="#len函数求某一单元格字符的长度，配合提取函数可以组合使用" class="headerlink" title="len函数求某一单元格字符的长度，配合提取函数可以组合使用"></a>len函数求某一单元格字符的长度，配合提取函数可以组合使用</h2><h2 id="row函数，返回单元格所在的行号，‘动态变化的’"><a href="#row函数，返回单元格所在的行号，‘动态变化的’" class="headerlink" title="row函数，返回单元格所在的行号，‘动态变化的’"></a>row函数，返回单元格所在的行号，‘动态变化的’</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=ROW(单元格) - 一个数字，用作序号等</span><br></pre></td></tr></table></figure><h2 id="mod取模函数，实现隔行设置样式"><a href="#mod取模函数，实现隔行设置样式" class="headerlink" title="mod取模函数，实现隔行设置样式"></a>mod取模函数，实现隔行设置样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选中表格&gt;条件格式&gt;新建规则&gt;使用公式确定单元格格式&gt;</span><br><span class="line">=mod(row(),2)=1</span><br></pre></td></tr></table></figure><h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">即在公式中所引用的单元格会随着公式所在单元格的变化而相应的变化。</span><br><span class="line">比如对前面两列数据进行求和的操作</span><br></pre></td></tr></table></figure><h2 id="绝对引用"><a href="#绝对引用" class="headerlink" title="绝对引用"></a>绝对引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">即在公式中将所引用的特定单元格进行锁定。</span><br><span class="line">比如公式中的某个值只在某一个单元格里面，</span><br><span class="line">那进行向下填充公式时候就要将这个单元格绝对引用，</span><br><span class="line">在编辑栏点击单元格前后都行，按F4即可添加美元符号，表示绝对引用</span><br></pre></td></tr></table></figure><h2 id="countif函数实现分类统计计数"><a href="#countif函数实现分类统计计数" class="headerlink" title="countif函数实现分类统计计数"></a>countif函数实现分类统计计数</h2><p><img src="https://pic.imgdb.cn/item/60e6f8fc5132923bf8b10eb4.jpg" alt></p><p>按产品A、B、C、D分别统计销售次数<br>选中在产品A后面单元格输入countif函数，单击上面的公式编辑栏的fx弹出公式参数说明栏，根据说明选择区域即可。</p><p><img src="https://pic.imgdb.cn/item/60e6fa4f5132923bf8b64c5b.jpg" alt></p><h2 id="countif函数，避免重复输入"><a href="#countif函数，避免重复输入" class="headerlink" title="countif函数，避免重复输入"></a>countif函数，避免重复输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选中表格&gt;条件格式&gt;新建规则&gt;使用公式确定单元格格式&gt;编辑如下公式即可</span><br><span class="line">=countif($B:$B,B1)&gt;1，注意第二个参数不用绝对引用，去掉$符号即可</span><br><span class="line">点击格式，进行格式设置。</span><br><span class="line">效果是B列若输入了重复值，则重复值所在行按设置样式显示出来</span><br></pre></td></tr></table></figure><h2 id="根据日期得到星期几"><a href="#根据日期得到星期几" class="headerlink" title="根据日期得到星期几"></a>根据日期得到星期几</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=text(日期单元格, “aaaa”)</span><br></pre></td></tr></table></figure><h2 id="weekday设置周末样式"><a href="#weekday设置周末样式" class="headerlink" title="weekday设置周末样式"></a>weekday设置周末样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选中需要设置的数据区域，条件格式&gt;新建规则&gt;使用公式确定单元格格式&gt;编辑如下</span><br><span class="line">=weekday(C$1,2)&gt;5，点击格式，进行格式设置</span><br><span class="line">这里第一个日期在C1单元格，列相对引用，行绝对引用</span><br></pre></td></tr></table></figure><h2 id="输入内容时自动生成边框，删除时自动删除边框"><a href="#输入内容时自动生成边框，删除时自动删除边框" class="headerlink" title="输入内容时自动生成边框，删除时自动删除边框"></a>输入内容时自动生成边框，删除时自动删除边框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选择数据所在列，条件格式&gt;新建规则&gt;使用公式确定单元格格式&gt;编辑如下</span><br><span class="line">=$A1&lt;&gt;&quot;&quot;  然后设置相应的样式即可</span><br></pre></td></tr></table></figure><h2 id="rank排序函数"><a href="#rank排序函数" class="headerlink" title="rank排序函数"></a>rank排序函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在要放排序的第一个单元格输入=RANK(B2,$B$2:$B$5)，</span><br><span class="line">这里B2是第一个数据，B2到B5是数据区域</span><br></pre></td></tr></table></figure><h2 id="subtotal可视区域求和"><a href="#subtotal可视区域求和" class="headerlink" title="subtotal可视区域求和"></a>subtotal可视区域求和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先对首行做一个筛选，即点数据&gt;筛选</span><br><span class="line">对合计单元格公式  </span><br><span class="line">=CONCATENATE(&quot;合计: &quot;,SUBTOTAL(109,B2:B7))</span><br><span class="line">外层函数CONCATENATE是连接字符的函数，</span><br><span class="line">109表示求和函数，B2到B7是要求和的数据区域</span><br></pre></td></tr></table></figure><h2 id="phonetic合并单元格内容到另一单元格"><a href="#phonetic合并单元格内容到另一单元格" class="headerlink" title="phonetic合并单元格内容到另一单元格"></a>phonetic合并单元格内容到另一单元格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=PHONETIC(A2:C2)</span><br></pre></td></tr></table></figure><h2 id="sumifs隔列求和"><a href="#sumifs隔列求和" class="headerlink" title="sumifs隔列求和"></a>sumifs隔列求和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=SUMIFS(B3:E3,$B$2:$E$2,$F$2)</span><br><span class="line">参数1：求和数据，2：条件区域，3：求和条件</span><br></pre></td></tr></table></figure><h2 id="快速输入26个字母"><a href="#快速输入26个字母" class="headerlink" title="快速输入26个字母"></a>快速输入26个字母</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=CHAR(ROW()+63) </span><br><span class="line">假设从第二个单元格开始,则row行号等于2，</span><br><span class="line">而字母A等于65，所以加上63就是字母A了，</span><br><span class="line">向下拉即可得到26个字母</span><br></pre></td></tr></table></figure><h2 id="isodd函数判断奇偶，根据身份证得到性别"><a href="#isodd函数判断奇偶，根据身份证得到性别" class="headerlink" title="isodd函数判断奇偶，根据身份证得到性别"></a>isodd函数判断奇偶，根据身份证得到性别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">身份证倒数第二位奇数表示男性</span><br><span class="line">=IF(ISODD(MID(B2,17,1)),&quot;男&quot;,&quot;女&quot;)</span><br><span class="line">if函数三个参数，第一个条件判断，</span><br><span class="line">第二个参数是为true时返回值，第三个是为false时返回值</span><br></pre></td></tr></table></figure><h2 id="lookup函数做库存预警"><a href="#lookup函数做库存预警" class="headerlink" title="lookup函数做库存预警"></a>lookup函数做库存预警</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=LOOKUP(C2,$F$1:$G$4)</span><br><span class="line">C2是库存数据单元格，第二个参数是辅助列表，</span><br><span class="line">辅助表就是两列，第一列为数据区间，第二列为对应的区间名称</span><br><span class="line">选中库存预警列，</span><br><span class="line">条件格式&gt;突出显示单元格&gt;文本包含&gt;填写文本&gt;设置样式</span><br><span class="line"></span><br><span class="line">也可以用嵌套if来实现</span><br><span class="line">=IF(C12&gt;90,&quot;优秀&quot;,IF(C12&lt;60,&quot;差&quot;,&quot;合格&quot;))</span><br></pre></td></tr></table></figure><h2 id="kpi绩效计算"><a href="#kpi绩效计算" class="headerlink" title="kpi绩效计算"></a>kpi绩效计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=SUMPRODUCT($B$2:$E$2,B3:E3)</span><br><span class="line">B2到E2是百分比数据项，B3:E3是第一个人的各项得分</span><br></pre></td></tr></table></figure><h2 id="数据有效性，新版本叫数据验证"><a href="#数据有效性，新版本叫数据验证" class="headerlink" title="数据有效性，新版本叫数据验证"></a>数据有效性，新版本叫数据验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">当分类较多的时候就不用重复的输入，</span><br><span class="line">简单的设置一下数据的有效性就节省了很多时间</span><br><span class="line"></span><br><span class="line">对输入的数据有了规定，或只能从给定的里面选择性输入</span><br><span class="line">有效条件可以是：整数，小数，日期，时间，文本长度，</span><br><span class="line">序列(即写出几个选项,之间用英文逗号隔开)，还可以自定义条件</span><br><span class="line"></span><br><span class="line">案例：使用date函数做动态考勤表，年份、月份可选，</span><br><span class="line">配合text函数由日期得到星期</span><br><span class="line">并且配合weekday函数设置了周末的样式，都是动态可变得</span><br></pre></td></tr></table></figure><h2 id="VLOOKUP-查找"><a href="#VLOOKUP-查找" class="headerlink" title="VLOOKUP 查找"></a>VLOOKUP 查找</h2><h3 id="得到一列值"><a href="#得到一列值" class="headerlink" title="得到一列值"></a>得到一列值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数的语法结构：</span><br><span class="line">VLOOKUP(lookup_value,table_array,col_index_num,range_lookup)</span><br><span class="line">lookup_value：找谁</span><br><span class="line">table_array：在哪找</span><br><span class="line">col_index_num：返回数据在查找区域的第几列的值</span><br><span class="line">range_lookup：0精确匹配，1模糊</span><br></pre></td></tr></table></figure><p>vlookup可以用作if判断的简便实现<br><img src="https://pic.imgdb.cn/item/60ed57535132923bf8f3235a.jpg" alt></p><h3 id="得到多列数据"><a href="#得到多列数据" class="headerlink" title="得到多列数据"></a>得到多列数据</h3><p>姓名，岗位，地点，工资分别是A、B、C、D列<br><img src="https://pic.imgdb.cn/item/60e2e2505132923bf8dfa5b5.jpg" alt="原始数据"></p><p>在上表中找到以下人员对应的信息</p><p><img src="https://pic.imgdb.cn/item/60e2e2f75132923bf8e21a87.jpg" alt></p><p>选中F2:H5区域，输入如下公式，CTRL+enter即可</p><p><code>=VLOOKUP($E2,$A$2:$D$25,COLUMN(B1),0)</code></p><h3 id="python实现-根据某一列的某些值查找数据"><a href="#python实现-根据某一列的某些值查找数据" class="headerlink" title="python实现-根据某一列的某些值查找数据"></a>python实现-根据某一列的某些值查找数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data=pd.read_excel(&quot;./招聘.xlsx&quot;,usecols=[&apos;姓名&apos;,&apos;岗位&apos;,&apos;地点&apos;,&apos;工资&apos;])</span><br><span class="line"></span><br><span class="line">ls=[&apos;杨峰&apos;,&apos;贺锋&apos;,&apos;马克昌&apos;]</span><br><span class="line">df=pd.DataFrame(columns=[&apos;姓名&apos;,&apos;岗位&apos;,&apos;地点&apos;,&apos;工资&apos;])</span><br><span class="line"></span><br><span class="line">for i in ls:</span><br><span class="line">  df1=data[data[&apos;姓名&apos;]==i]</span><br><span class="line">  df=pd.concat([df,df1])</span><br><span class="line">  </span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><h2 id="N函数对数值类型的值做批注"><a href="#N函数对数值类型的值做批注" class="headerlink" title="N函数对数值类型的值做批注"></a>N函数对数值类型的值做批注</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=5397+N(&quot;这个妹子不错&quot;)</span><br><span class="line">当点击这个单元格的时候，上面的公式编辑栏就会出现备注内容</span><br></pre></td></tr></table></figure><h2 id="CTRL"><a href="#CTRL" class="headerlink" title="CTRL"></a>CTRL</h2><ul><li>CTRL+g 快速定位</li><li>CTRL+enter 快速填充，选中区域，输入内容，按下快捷键后，所选区域填充同样的内容</li><li>CTRL+D，向下填充</li><li>CTRL+R，向右填充</li></ul><h2 id="区域输入移动光标tab-enter"><a href="#区域输入移动光标tab-enter" class="headerlink" title="区域输入移动光标tab/enter"></a>区域输入移动光标tab/enter</h2><ul><li>选中要输入内容的区域，输完一格后按tab/enter可以向右或向下移动光标</li></ul><h2 id="填充序列"><a href="#填充序列" class="headerlink" title="填充序列"></a>填充序列</h2><ul><li>拖动填充</li><li>双击填充</li><li>循环填充 填上两个数字按CTRL再向下拖</li><li>填充序列 选中单元格输入起始值，找到开始-右上角填充-序列-列-步长和终止值</li><li>row()函数根据当前行号再减去一个数字即可</li></ul><h2 id="下拉列表-数据验证"><a href="#下拉列表-数据验证" class="headerlink" title="下拉列表 数据验证"></a>下拉列表 数据验证</h2><ul><li>某一个单元格要输入的内容是限定的，只能选中</li><li>选中这个单元格-数据-数据验证-数据验证-设置-选则自定义-在公式中输入内容，中间以逗号隔开，或者选中一些准备好的区域也行。</li></ul><h2 id="二级下拉列表-看秋叶教程"><a href="#二级下拉列表-看秋叶教程" class="headerlink" title="二级下拉列表 看秋叶教程"></a>二级下拉列表 看秋叶教程</h2><h2 id="日期规范"><a href="#日期规范" class="headerlink" title="日期规范"></a>日期规范</h2><ul><li>某些日期如20210708这种不符合规范</li><li>选中单元格-数据-分列-下一步-下一步-选中日期-完成</li></ul><h2 id="数据透视表-看我的知乎专栏excel数据透视表"><a href="#数据透视表-看我的知乎专栏excel数据透视表" class="headerlink" title="数据透视表-看我的知乎专栏excel数据透视表"></a>数据透视表-看我的知乎专栏excel数据透视表</h2><h2 id="数据带数据条"><a href="#数据带数据条" class="headerlink" title="数据带数据条"></a>数据带数据条</h2><ul><li>选中数据区域，选择条件格式数据条即可，管理规则里面可以调整数据条的最值</li></ul><p><img src="https://pic.imgdb.cn/item/60ed5eae5132923bf81df484.jpg" alt></p><h2 id="用图表集表示数据升降"><a href="#用图表集表示数据升降" class="headerlink" title="用图表集表示数据升降"></a>用图表集表示数据升降</h2><ul><li>选中数据区域，选择条件格式图标集即可，管理规则里面可以调整条件。</li></ul><p><img src="https://pic.imgdb.cn/item/60ed60725132923bf8278935.jpg" alt></p><h2 id="突出显示重复值"><a href="#突出显示重复值" class="headerlink" title="突出显示重复值"></a>突出显示重复值</h2><ul><li>选中数据区域，选择条件格式重复值即可，可以更改样式。</li></ul><p><img src="https://pic.imgdb.cn/item/60ed61935132923bf82d9ae0.jpg" alt></p><h2 id="根据条件突出显示整行数据"><a href="#根据条件突出显示整行数据" class="headerlink" title="根据条件突出显示整行数据"></a>根据条件突出显示整行数据</h2><ul><li>注意：选中数据时不要选中表头</li><li>注意：编辑公式中数字(即行号)不绝对索引=$S2=”E”</li></ul><p><img src="https://pic.imgdb.cn/item/60ed63fc5132923bf83a7522.jpg" alt><br><img src="https://pic.imgdb.cn/item/60ed643e5132923bf83bcd71.jpg" alt></p><h2 id="数据透视表-多表联动"><a href="#数据透视表-多表联动" class="headerlink" title="数据透视表-多表联动"></a>数据透视表-多表联动</h2><ul><li>插入数据透视表和数据透视图</li></ul><p><img src="https://pic.imgdb.cn/item/60ed6fab5132923bf8744020.jpg" alt></p><p><img src="https://pic.imgdb.cn/item/60ed71225132923bf87b196b.jpg" alt></p><ul><li>美化表：单击菜单栏右上角“字段按钮”即可取消字段按钮，删掉边上的数据等，加上数据标签</li></ul><p><img src="https://pic.imgdb.cn/item/60ed72115132923bf87f93ab.jpg" alt></p><ul><li>添加切片器，在数据透视图工具-分析-插入切片器</li></ul><p><img src="https://pic.imgdb.cn/item/60ed72a35132923bf882471b.jpg" alt></p><ul><li>美化切片器，选中它，点击菜单栏左上角编辑切片器，取消显示页面即可，将右上角的列改为5，回车，调整它的长短大小，并挑选一种样式。</li></ul><p><img src="https://pic.imgdb.cn/item/60ed73e05132923bf88815cb.jpg" alt></p><ul><li>同样的方法创建另一种数据透视图如饼图</li></ul><p><img src="https://pic.imgdb.cn/item/60ed74b95132923bf88c1b71.jpg" alt></p><ul><li>复制这个新的数据透视图到前面的那个图表所在的sheet,调整一下图表大小，选中切片器-菜单栏左上角报表连接-勾选工作表</li></ul><p><img src="https://pic.imgdb.cn/item/60ed76235132923bf892e3a9.jpg" alt></p><ul><li>做好的效果</li></ul><p><img src="https://pic.imgdb.cn/item/60ed78195132923bf89c29e9.jpg" alt></p><ul><li>表的内容可以选中不同的维度，实现分组展现</li></ul><p><img src="https://pic.imgdb.cn/item/60ed79935132923bf8a32bf1.jpg" alt></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/excel%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>几个小模块</title>
      <link>https://shulu520.com/python/Python-%E6%A8%A1%E5%9D%97/</link>
      <guid>https://shulu520.com/python/Python-%E6%A8%A1%E5%9D%97/</guid>
      <pubDate>Thu, 04 Mar 2021 09:45:30 GMT</pubDate>
      <description>
      
        datetime,pickle,re
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="常见的datetime日期时间模块"><a href="#常见的datetime日期时间模块" class="headerlink" title="常见的datetime日期时间模块"></a>常见的datetime日期时间模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#datetime模块重新封装了time模块</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">time1=datetime.datetime.now()</span><br><span class="line">print(time1) #2021-02-27 18:59:13.885794</span><br><span class="line"></span><br><span class="line">time2=datetime.date.today()</span><br><span class="line">print(time2) #2021-02-27</span><br><span class="line"></span><br><span class="line">time3=datetime.datetime.today()</span><br><span class="line">print(time3) #2021-02-27 18:58:39.614459</span><br><span class="line"></span><br><span class="line">time4=datetime.datetime.today().timestamp()</span><br><span class="line">print(time4) #1614423830.81342</span><br><span class="line"></span><br><span class="line"># 返回当前日期时间的日期部分：2021-02-27</span><br><span class="line">print(datetime.datetime.now().date())</span><br><span class="line"></span><br><span class="line"># 返回当前日期时间的时间部分：19:13:45.310397</span><br><span class="line">print(datetime.datetime.now().time())</span><br><span class="line"></span><br><span class="line"># delta时间间隔</span><br><span class="line">past=datetime.datetime(2017, 4, 16, 21, 21, 20, 871000)</span><br><span class="line">now=datetime.datetime.now()</span><br><span class="line">delta=now-past</span><br><span class="line">print(delta) #1412 days, 22:07:46.382359</span><br><span class="line">print(delta.days) #1412</span><br></pre></td></tr></table></figure><h2 id="pickle-文件模块"><a href="#pickle-文件模块" class="headerlink" title="pickle 文件模块"></a>pickle 文件模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pickle可以将一个对象保存成一个文件，例如列表，DataFrame等</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">os.chdir(&apos;E:\Users\lqy\Desktop\&apos;)</span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line">data=&#123;&apos;a&apos;:[1,2,3],&apos;b&apos;:8,&apos;c&apos;:&apos;shulu&apos;&#125;</span><br><span class="line"></span><br><span class="line">创建保存文件</span><br><span class="line">pic=open(&apos;data.pkl&apos;,&apos;wb&apos;)</span><br><span class="line">pickle.dump(data,pic)</span><br><span class="line">pic.close()</span><br><span class="line">print(&quot;完成了&quot;)</span><br><span class="line"></span><br><span class="line">读取文件</span><br><span class="line">pic2=open(&apos;E:/Users/lqy/Desktop/data.pkl&apos;,&apos;rb&apos;)</span><br><span class="line">data=pickle.load(pic2)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><h2 id="re-正则"><a href="#re-正则" class="headerlink" title="re 正则"></a>re 正则</h2><h3 id="字符串提取数字或字母"><a href="#字符串提取数字或字母" class="headerlink" title="字符串提取数字或字母"></a>字符串提取数字或字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"># 字符串中提取数字</span><br><span class="line">s=&quot;sDsd123.555dfd888F&quot;</span><br><span class="line">print(re.findall(&apos;\d+\.?\d*&apos;,s))</span><br><span class="line"></span><br><span class="line"># 字符串中提取字母</span><br><span class="line">print(re.findall(&apos;[A-Za-z]&apos;, s))</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/python/Python-%E6%A8%A1%E5%9D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python操作Word文档</title>
      <link>https://shulu520.com/py-word/Python-word/</link>
      <guid>https://shulu520.com/py-word/Python-word/</guid>
      <pubDate>Fri, 26 Feb 2021 05:48:10 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div style=&quot;width:100%;height:1px;background-color:pink;opacity:.7&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h1 id="python操作Word文档"><a href="#python操作Word文档" class="headerlink" title="python操作Word文档"></a>python操作Word文档</h1><p><code>https://python-docx.readthedocs.io/en/latest/user/quickstart.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line"># 获取文档对象</span><br><span class="line">doc=Document(&apos;./我的.docx&apos;)</span><br><span class="line"></span><br><span class="line"># 获取段落</span><br><span class="line">paragraphs=doc.paragraphs</span><br><span class="line">for para in paragraphs:</span><br><span class="line">  # 每一段落的内容</span><br><span class="line">  print(para.text)</span><br><span class="line">  # 文字块 相同格式的内容</span><br><span class="line">  runs=para.runs</span><br><span class="line">  for run in runs:</span><br><span class="line">    print(run.text)</span><br></pre></td></tr></table></figure><h2 id="word基础"><a href="#word基础" class="headerlink" title="word基础"></a>word基础</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line">from docx.shared import Cm #图片单位厘米</span><br><span class="line"># 创建新的文本对象</span><br><span class="line">doc= Document()</span><br><span class="line"></span><br><span class="line"># 添加标题</span><br><span class="line">doc.add_heading(&apos;这是标题&apos;)</span><br><span class="line"># 默认情况下，这会添加一个顶级标题，在Word中显示为“标题1”。</span><br><span class="line"># 当您想要一个小节的标题时，只需将所需的级别指定为1到9之间的整数即可：</span><br><span class="line">doc.add_heading(&apos;二级标题&apos;,level=2)</span><br><span class="line"></span><br><span class="line"># 段落是Word的基础。它们用于正文，也用于标题和项目符号</span><br><span class="line"># 此方法返回对段落的引用</span><br><span class="line">para=doc.add_paragraph(&apos;添加一段内容添一段内容添加一段内容添加一段内容&apos;)</span><br><span class="line"></span><br><span class="line">para2=doc.add_paragraph()</span><br><span class="line">para2.add_run(&apos;fdfdfdfdf&apos;)</span><br><span class="line"></span><br><span class="line"># 也可以将一个段落用作“光标”，并在其上方直接插入一个新段落</span><br><span class="line">ins_para=para.insert_paragraph_before(&apos;把某一段落当做光标，可以在其上方直接插入一个新段落&apos;)</span><br><span class="line"></span><br><span class="line"># 添加分页</span><br><span class="line">doc.add_page_break()</span><br><span class="line"></span><br><span class="line"># 添加表格</span><br><span class="line">table=doc.add_table(rows=2,cols=3,style=&apos;Light List Accent 4&apos;)</span><br><span class="line"></span><br><span class="line"># 访问单个单元,您始终可以通过其行和列索引访问单元格：就像坐标一样</span><br><span class="line">cell=table.cell(0, 1)</span><br><span class="line">cell.text=&apos;表格内容&apos;</span><br><span class="line"></span><br><span class="line"># rows 表的属性提供对各个行的访问，每个行都有一个 .cells属性。</span><br><span class="line"># 该.cells两个属性Row和Column 支持索引访问，就像一个列表：</span><br><span class="line">row=table.rows[1]</span><br><span class="line">row.cells[2].text=&apos;表格内容&apos;</span><br><span class="line"># rows和.columns集合是可迭代的</span><br><span class="line"></span><br><span class="line"># 使用一个两层元组或两层列表的方式循环写入表格</span><br><span class="line">table2=doc.add_table(rows=3,cols=2)</span><br><span class="line">lst=[</span><br><span class="line">  [&apos;姓名&apos;,&apos;成绩&apos;],</span><br><span class="line">  [&apos;shulu&apos;,&apos;100&apos;],</span><br><span class="line">  [&apos;qiuyun&apos;,&apos;99&apos;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">for i in range(0,len(table2.rows)):</span><br><span class="line">  row=table2.rows[i]</span><br><span class="line">  for x in range(0,len(row.cells)):</span><br><span class="line">    cell=row.cells[x]</span><br><span class="line">    cell.text=lst[i][x]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加图片</span><br><span class="line"># doc.add_picture(&apos;shulu520.com.png&apos;)</span><br><span class="line"># 宽度高度设置一个，另一个自动缩放</span><br><span class="line">doc.add_picture(&apos;shulu520.com.png&apos;, width=Cm(5))</span><br><span class="line"></span><br><span class="line"># 保存</span><br><span class="line">doc.save(&apos;我的文档.docx&apos;)</span><br></pre></td></tr></table></figure><h2 id="搜索指定内容"><a href="#搜索指定内容" class="headerlink" title="搜索指定内容"></a>搜索指定内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 这一块的思路 非常重要！</span><br><span class="line"># 每次前进一个字符长度，每次匹配输入内容的长度个字符</span><br><span class="line"></span><br><span class="line">from docx import Document</span><br><span class="line">doc=Document(&apos;我的.docx&apos;)</span><br><span class="line"></span><br><span class="line">word=input(&apos;请输入搜索内容：&apos;)</span><br><span class="line"># 输入内容的长度，以此为每次切片搜索的长度单位</span><br><span class="line">word_len=len(word)</span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line"></span><br><span class="line">for para in doc.paragraphs:</span><br><span class="line">  # 每一段文本的长度</span><br><span class="line">  text_len=len(para.text) </span><br><span class="line"></span><br><span class="line">  for i in range(0,text_len-word_len+1):</span><br><span class="line">    if word==para.text[i:word_len+i]:</span><br><span class="line">      count+=1</span><br><span class="line"></span><br><span class="line">print(word+&apos;出现了&apos;+str(count)+&apos;次&apos;)</span><br></pre></td></tr></table></figure><h2 id="文本对齐方式和间距"><a href="#文本对齐方式和间距" class="headerlink" title="文本对齐方式和间距"></a>文本对齐方式和间距</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line">from docx.shared import Pt #英镑单位</span><br><span class="line"># WD_PARAGRAPH_ALIGNMENT 即word段落对齐</span><br><span class="line">from docx.enum.text import WD_PARAGRAPH_ALIGNMENT </span><br><span class="line">doc=Document(&apos;./word/美文.docx&apos;)</span><br><span class="line"></span><br><span class="line">for para in doc.paragraphs:</span><br><span class="line">  para.alignment=WD_PARAGRAPH_ALIGNMENT.CENTER</span><br><span class="line">  # WD_PARAGRAPH_ALIGNMENT虽然编辑器对其飘红，但程序会执行的</span><br><span class="line"></span><br><span class="line">  # 行间距</span><br><span class="line">  para.paragraph_format.line_spacing=2.0</span><br><span class="line">  </span><br><span class="line">  # 段前段后间距</span><br><span class="line">  para.paragraph_format.space_before=Pt(12)</span><br><span class="line">  para.paragraph_format.space_after=Pt(12)</span><br><span class="line"></span><br><span class="line">doc.save(&apos;./word/美文.docx&apos;)</span><br></pre></td></tr></table></figure><h2 id="设置字体和字体样式"><a href="#设置字体和字体样式" class="headerlink" title="设置字体和字体样式"></a>设置字体和字体样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line">from docx.oxml.ns import qn</span><br><span class="line">from docx.shared import Pt,RGBColor</span><br><span class="line">doc=Document()</span><br><span class="line">para=doc.add_paragraph()</span><br><span class="line">para.add_run(&apos;人生苦短&apos;).font.bold=True #加粗</span><br><span class="line">para.add_run(&apos;人生苦短&apos;).font.shadow=True #阴影</span><br><span class="line">para.add_run(&apos;Python&apos;).font.italic=True #倾斜</span><br><span class="line">para.add_run(&apos;你好吗&apos;).font.underline=True #下划线</span><br><span class="line">para.add_run(&apos;shulu&apos;).font.strike=True #删除线</span><br><span class="line">para.add_run(&apos;哈哈哈&apos;).font.size=Pt(20) #字体大小</span><br><span class="line">para.add_run(&apos;睡大觉&apos;).font.color.rgb=RGBColor(255,255,0) #字体颜色</span><br><span class="line"></span><br><span class="line"># 设置中文字体 宋体、楷体等等</span><br><span class="line">doc.styles[&apos;Normal&apos;].font.name = u&apos;楷体&apos;</span><br><span class="line">doc.styles[&apos;Normal&apos;]._element.rPr.rFonts.set(qn(&apos;w:eastAsia&apos;), u&apos;楷体&apos;)</span><br><span class="line"></span><br><span class="line">doc.save(&apos;中文字体.docx&apos;)</span><br></pre></td></tr></table></figure><h2 id="设置表格样式"><a href="#设置表格样式" class="headerlink" title="设置表格样式"></a>设置表格样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from docx import *</span><br><span class="line"># word当中的样式类型WD_STYLE_TYPE</span><br><span class="line">from docx.enum.style import WD_STYLE_TYPE </span><br><span class="line">doc=Document()</span><br><span class="line">styles=doc.styles</span><br><span class="line">print(styles) #所有文档样式</span><br><span class="line"></span><br><span class="line">for style in styles:</span><br><span class="line">  # 表格的样式</span><br><span class="line">  if style.type==WD_STYLE_TYPE.TABLE:</span><br><span class="line">    doc.add_paragraph(&apos;表格样式：&apos;+style.name)</span><br><span class="line">    table=doc.add_table(3,3,style=style)</span><br><span class="line">    cells=table.rows[0].cells</span><br><span class="line">    cells[0].text=&apos;第1列&apos;</span><br><span class="line">    cells[1].text=&apos;第2列&apos;</span><br><span class="line">    cells[2].text=&apos;第3列&apos;</span><br><span class="line"></span><br><span class="line"># 如上代码得到所有表格的样式名称，</span><br><span class="line"># 创建表格时，指定样式名称即可：</span><br><span class="line">doc.add_table(4,5,style=&apos;Light List Accent 4&apos;)</span><br><span class="line"></span><br><span class="line">doc.save(&apos;所有表格样式.docx&apos;)</span><br></pre></td></tr></table></figure><h2 id="读取文本文档并按指定的格式写入Word"><a href="#读取文本文档并按指定的格式写入Word" class="headerlink" title="读取文本文档并按指定的格式写入Word"></a>读取文本文档并按指定的格式写入Word</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 读取文本文档</span><br><span class="line"># 这里的line一行指的是上一个换行符&apos;\n&apos;&apos;与下一个\n&apos;之间的内容</span><br><span class="line"># 原文中的软回车删不掉！！！！！！</span><br><span class="line"></span><br><span class="line">from docx import Document</span><br><span class="line">from docx.shared import Pt</span><br><span class="line">from docx.oxml.ns import qn</span><br><span class="line">from docx.enum.text import WD_PARAGRAPH_ALIGNMENT</span><br><span class="line"></span><br><span class="line">with open(&apos;./word/生活.txt&apos;,&apos;r&apos;) as r_file:</span><br><span class="line">  lines=r_file.readlines()</span><br><span class="line"></span><br><span class="line">with open(&apos;./word/生活.txt&apos;,&apos;w&apos;) as w_file:</span><br><span class="line">  for line in lines:</span><br><span class="line">    if line!=&apos;\n&apos;:</span><br><span class="line">      w_file.write(line)</span><br><span class="line"></span><br><span class="line">with open(&apos;./word/生活.txt&apos;,&apos;r&apos;) as r_file:</span><br><span class="line">  lines=r_file.readlines()</span><br><span class="line">  for line in lines:</span><br><span class="line">    if line==&apos;\n&apos;:</span><br><span class="line">      lines.remove(line)</span><br><span class="line">print(len(lines))</span><br><span class="line"></span><br><span class="line">doc=Document()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标题部分</span><br><span class="line">title=doc.add_paragraph(lines[0])</span><br><span class="line">for run1 in title.runs:</span><br><span class="line">  run1.font.bold=True</span><br><span class="line">  run1.font.name=&apos;宋体&apos;</span><br><span class="line">  run1.font.size=Pt(20)</span><br><span class="line">  r=run1._element.rPr.rFonts</span><br><span class="line">  r.set(qn(&apos;w:eastAsia&apos;), &apos;微软雅黑&apos;)</span><br><span class="line"></span><br><span class="line">title.alignment=WD_PARAGRAPH_ALIGNMENT.CENTER</span><br><span class="line"></span><br><span class="line"># 日期部分</span><br><span class="line">para1=doc.add_paragraph(lines[1])</span><br><span class="line">para1.alignment=WD_PARAGRAPH_ALIGNMENT.RIGHT</span><br><span class="line"></span><br><span class="line"># 正文部分</span><br><span class="line">for i in range(2,len(lines)):</span><br><span class="line"></span><br><span class="line">  para_others=doc.add_paragraph(lines[i])</span><br><span class="line">  </span><br><span class="line">  for run2 in para_others.runs:</span><br><span class="line">    run2.font.size=Pt(12)</span><br><span class="line">    run2.font.name=&apos;微软雅黑&apos;</span><br><span class="line">    r=run2._element.rPr.rFonts</span><br><span class="line">    r.set(qn(&apos;w:eastAsia&apos;), &apos;微软雅黑&apos;)</span><br><span class="line">  para_others.paragraph_format.line_spacing=1.5 #行间距</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">doc.save(&apos;./word/生活.docx&apos;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/py-word/Python-word/#disqus_thread</comments>
    </item>
    
    <item>
      <title>officePython2</title>
      <link>https://shulu520.com/officePython/officePython2/</link>
      <guid>https://shulu520.com/officePython/officePython2/</guid>
      <pubDate>Sat, 20 Feb 2021 23:24:42 GMT</pubDate>
      <description>
      
        Python操作excel
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="打开一个Excel表格"><a href="#打开一个Excel表格" class="headerlink" title="打开一个Excel表格"></a>打开一个Excel表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 获取一个工作簿对象</span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line"># 获取所有工作簿的名称</span><br><span class="line">print(workbook.sheetnames)</span><br><span class="line"></span><br><span class="line"># 获取某一个具体的sheet工作表</span><br><span class="line">sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line"># 获取这个工作表的大小范围</span><br><span class="line">print(sheet.dimensions)</span><br><span class="line"></span><br><span class="line"># 获取单元格和内容</span><br><span class="line">cell=sheet[&apos;A2&apos;]</span><br><span class="line">print(cell.value)</span><br><span class="line"></span><br><span class="line"># 获取一些列的单元格</span><br><span class="line">cells=sheet[&apos;A1:A3&apos;]</span><br><span class="line">print(cells)</span><br><span class="line"></span><br><span class="line">for cell in cells:</span><br><span class="line">  print(cell[0].value) #两层元组</span><br><span class="line"></span><br><span class="line"># 获取一整列</span><br><span class="line">cols=sheet[&apos;A&apos;]</span><br><span class="line">for col in cols:</span><br><span class="line">  print(col.value)</span><br><span class="line"></span><br><span class="line"># 获取一整行</span><br><span class="line">row=sheet[3]</span><br><span class="line">for cell in row:</span><br><span class="line">  print(cell.value)</span><br><span class="line"></span><br><span class="line"># 获取所有行，再遍历输出</span><br><span class="line">rows=sheet.rows</span><br><span class="line"></span><br><span class="line"># 获取所有列，再遍历输出</span><br><span class="line">cols=sheet.columns</span><br><span class="line"></span><br><span class="line"># 在第1行到第5行，第1列到第3之间</span><br><span class="line">rows=sheet.iter_rows(min_row=1,max_row=5,min_col=1,max_col=3)</span><br><span class="line">for row in rows:</span><br><span class="line">  for cell in row:</span><br><span class="line">    print(cell.value)</span><br><span class="line">  print(&apos;-----------------&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在一列中筛选某一个值,也可以做个统计</span><br><span class="line">count=0</span><br><span class="line">cols=sheet[&apos;A&apos;]</span><br><span class="line">for col in cols:</span><br><span class="line">  if col.value==2:</span><br><span class="line">    count+=1</span><br><span class="line">    print(col.row) #输出目标值所在行</span><br><span class="line"></span><br><span class="line">print(&apos;count=&apos;+str(count))</span><br></pre></td></tr></table></figure><h2 id="创建一个工作薄-一个Excel文件"><a href="#创建一个工作薄-一个Excel文件" class="headerlink" title="创建一个工作薄(一个Excel文件)"></a>创建一个工作薄(一个Excel文件)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 关于报错：关闭手动打开的文件，重新运行即可</span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.Workbook()</span><br><span class="line"></span><br><span class="line"># 创建sheet工作表</span><br><span class="line">sheet=workbook.create_sheet() #在excel中显示为sheet1,默认的活动页</span><br><span class="line"></span><br><span class="line"># 向表中写入内容</span><br><span class="line">sheet[&apos;A1&apos;]=&apos;shulu520哈哈哈&apos;</span><br><span class="line">cell=sheet[&apos;A2&apos;]</span><br><span class="line">cell.value=&apos;do you love me?&apos;</span><br><span class="line"></span><br><span class="line">lst=[&apos;姓名&apos;,&apos;爱好&apos;]</span><br><span class="line">sheet.append(lst)</span><br><span class="line"></span><br><span class="line">stu_lst=[</span><br><span class="line">  [&apos;张三&apos;,80],</span><br><span class="line">  [&apos;李思&apos;,90],</span><br><span class="line">  [&apos;王武&apos;,100]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">for cell in stu_lst:</span><br><span class="line">  sheet.append(cell)</span><br><span class="line"></span><br><span class="line"># 可以给单元格赋求值公式</span><br><span class="line">sheet[&apos;B7&apos;]=&apos;=sum(B4:B6)&apos;</span><br><span class="line"></span><br><span class="line"># 保存工作簿并命名</span><br><span class="line">workbook.save(&apos;写入内容.xlsx&apos;)</span><br><span class="line"></span><br><span class="line"># 查看openpyxl支持的Excel公式</span><br><span class="line">from openpyxl.utils import FORMULAE</span><br><span class="line">print(FORMULAE)</span><br><span class="line"># https://product.pconline.com.cn/itbk/software/excel/1506/6538476.html</span><br></pre></td></tr></table></figure><h2 id="向工作表中指定位置插入一列"><a href="#向工作表中指定位置插入一列" class="headerlink" title="向工作表中指定位置插入一列"></a>向工作表中指定位置插入一列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 插入行与插入列做法一样，就不写了</span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line">sheet.insert_cols(idx=1) #往第一列插入一列</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="向工作表中指定位置插入多列"><a href="#向工作表中指定位置插入多列" class="headerlink" title="向工作表中指定位置插入多列"></a>向工作表中指定位置插入多列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line">sheet.insert_cols(idx=3,amount=2) #在第三列插入两列</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="删除行列"><a href="#删除行列" class="headerlink" title="删除行列"></a>删除行列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line">sheet.delete_cols(idx=1,amount=2) </span><br><span class="line">sheet.delete_rows(idx=1,amount=1) #从第一行开始删除一行</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="移动一些单元格"><a href="#移动一些单元格" class="headerlink" title="移动一些单元格"></a>移动一些单元格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 向下向右为正数，向左向上为负数</span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line">sheet.move_range(&apos;A1:B4&apos;,rows=2,cols=2)</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="sheet工作表的创建"><a href="#sheet工作表的创建" class="headerlink" title="sheet工作表的创建"></a>sheet工作表的创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line"># 创建工作表</span><br><span class="line">workbook.create_sheet(&apos;学生信息&apos;)</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="删除工作表"><a href="#删除工作表" class="headerlink" title="删除工作表"></a>删除工作表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet2&apos;]</span><br><span class="line">workbook.remove(sheet)</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="复制sheet和重命名"><a href="#复制sheet和重命名" class="headerlink" title="复制sheet和重命名"></a>复制sheet和重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">src_sheet=workbook[&apos;评论信息&apos;]</span><br><span class="line">sheet=workbook.copy_worksheet(src_sheet) #名称叫做：评论信息 Copy</span><br></pre></td></tr></table></figure><h2 id="修改sheet名称"><a href="#修改sheet名称" class="headerlink" title="修改sheet名称"></a>修改sheet名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sheet.title=&apos;mysheet&apos;</span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="冻结窗格"><a href="#冻结窗格" class="headerlink" title="冻结窗格"></a>冻结窗格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">如果对于太大而不能一屏显示的电子表格，“冻结”顶部的几行或最左边的几列，是很有帮助的，</span><br><span class="line">可以帮助你来判断这行或这列所对应的数据类型，比如查看你的成绩排名。</span><br><span class="line">例如，冻结的列或行表头，就算用户滚动电子表格，也是始终可见的。</span><br><span class="line">在 Openpyxl中，每个 Worksheet 对象都有一个 freeze_panes 属性，</span><br><span class="line">可以设置为一个 Cell 对象或一个单元格坐标的字符串。</span><br><span class="line">请注意，单元格上边的所有行和左边的所有列都会冻结，但单元格所在的行和列不会冻结。</span><br><span class="line">要解冻所有的单元格，就将 freeze_panes 设置为 None 或’A1’</span><br><span class="line"></span><br><span class="line">sheet.freeze_panes=‘A2’冻结第一行</span><br><span class="line">sheet.freeze_panes=‘B1’冻结第一列</span><br><span class="line">sheet.freeze_panes=‘C2’冻结第一行，第一列和第二列</span><br><span class="line">sheet.freeze_panes=None什么也不冻结</span><br><span class="line">sheet.freeze_panes=‘A1’什么也不冻结</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;冻结.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line"># 冻结，固定它的位置</span><br><span class="line">sheet.freeze_panes=&apos;A2&apos; #冻结第一行</span><br><span class="line">workbook.save(&apos;冻结.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="添加筛选按钮"><a href="#添加筛选按钮" class="headerlink" title="添加筛选按钮"></a>添加筛选按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;筛选.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line">sheet.auto_filter.ref=sheet.dimensions</span><br><span class="line">workbook.save(&apos;筛选.xlsx&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 筛选出所有关于41码鞋子的评论，并且将其添加到一个新的excel文件</span><br><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;课堂练习.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line">rows=sheet.rows #获取所有行 一个迭代器对象</span><br><span class="line"></span><br><span class="line">lst=[] #放入41码相关的所有行</span><br><span class="line"></span><br><span class="line">for row in rows:</span><br><span class="line">  # print(row) #每一行都是一个元组 每个元组共三个数据(只写了三列数据)</span><br><span class="line">  sub_lst=[] #把sub_lst在这里定义是为了每次进来它都是空的列表，然后再赋值，不重复添加</span><br><span class="line">  if row[2].value==41:</span><br><span class="line">    # print(row)</span><br><span class="line">    for i in range(0,3):</span><br><span class="line">      sub_lst.append(row[i].value)</span><br><span class="line">    lst.append(sub_lst) #这一行的缩进也很讲究</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 存放到一个新的excel文件中 创建新的工作簿</span><br><span class="line">new_workbook=openpyxl.Workbook()</span><br><span class="line">new_sheet=new_workbook.active #获取默认的活动页(Sheet)</span><br><span class="line">for row in lst:</span><br><span class="line">  new_sheet.append(row) </span><br><span class="line">  #因为lst是双层列表，所以这样就可以将相同类型的数据放到一列</span><br><span class="line"></span><br><span class="line">new_workbook.save(&apos;所有41码鞋子.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="填充颜色"><a href="#填充颜色" class="headerlink" title="填充颜色"></a>填充颜色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.styles import PatternFill</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;填充颜色.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line">cell_b5=sheet[&apos;B5&apos;]</span><br><span class="line">pattren_fill=PatternFill(fill_type=&apos;solid&apos;,fgColor=&apos;ff0000&apos;)</span><br><span class="line">cell_b5.fill=pattren_fill</span><br><span class="line"></span><br><span class="line"># workbook.save(&apos;填充颜色.xlsx&apos;)</span><br><span class="line"></span><br><span class="line"># 填充渐变色</span><br><span class="line">from openpyxl.styles import GradientFill</span><br><span class="line">cell_c3=sheet[&apos;C3&apos;]</span><br><span class="line">gradient=GradientFill(stop=(&apos;ff00ff&apos;,&apos;00ff00&apos;))</span><br><span class="line">cell_c3.fill=gradient</span><br><span class="line"></span><br><span class="line">workbook.save(&apos;填充颜色.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">rows=sheet.rows</span><br><span class="line">for row in rows:</span><br><span class="line">  if re.search(&apos;.*好.*&apos;,row[0].value):</span><br><span class="line">    for i in range(0,3):</span><br><span class="line">      row[i].fill=gradient </span><br><span class="line"></span><br><span class="line">workbook.save(&apos;看看.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="设置单元格的大小"><a href="#设置单元格的大小" class="headerlink" title="设置单元格的大小"></a>设置单元格的大小</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;练习.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line">sheet.row_dimensions[2].height=50</span><br><span class="line">sheet.column_dimensions[&apos;B&apos;].width=50</span><br></pre></td></tr></table></figure><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sheet.merge_cells(&apos;C2:E4&apos;)</span><br><span class="line"></span><br><span class="line"># 取消合并单元格</span><br><span class="line">sheet.unmerge_cells(&apos;C2:E4&apos;)</span><br><span class="line">workbook.save(&apos;练习.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="向excel中插入图片"><a href="#向excel中插入图片" class="headerlink" title="向excel中插入图片"></a>向excel中插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.drawing.image import Image</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook.create_sheet(&apos;插入图片&apos;)</span><br><span class="line"></span><br><span class="line"># 创建图片对象</span><br><span class="line">logo=Image(&apos;shulu520.com.png&apos;)</span><br><span class="line"></span><br><span class="line"># 设置宽高</span><br><span class="line">logo.height=200</span><br><span class="line">logo.width=180</span><br><span class="line"></span><br><span class="line"># 添加图片</span><br><span class="line">sheet.add_image(logo,&apos;E3&apos;)</span><br><span class="line"></span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="创建柱状图图表"><a href="#创建柱状图图表" class="headerlink" title="创建柱状图图表"></a>创建柱状图图表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.chart import BarChart,Reference</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;成绩&apos;]</span><br><span class="line"></span><br><span class="line"># 创建柱状图图表对象</span><br><span class="line">chart=BarChart()</span><br><span class="line"></span><br><span class="line"># 数据引用来源</span><br><span class="line">data=Reference(worksheet=sheet,min_row=1,max_row=7,min_col=1,max_col=2)</span><br><span class="line"></span><br><span class="line"># 将数据插入图表当中</span><br><span class="line">chart.add_data(data,titles_from_data=True)</span><br><span class="line"></span><br><span class="line"># 类别的引用范围 (柱子下面的东西)</span><br><span class="line">categorys=Reference(sheet,min_row=2,max_row=7,min_col=1)</span><br><span class="line"></span><br><span class="line"># 设置类别</span><br><span class="line">chart.set_categories(categorys)</span><br><span class="line"></span><br><span class="line"># 插入图表</span><br><span class="line">sheet.add_chart(chart,&apos;F8&apos;)</span><br><span class="line"></span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="生成条形图"><a href="#生成条形图" class="headerlink" title="生成条形图"></a>生成条形图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.chart import LineChart,Reference</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;我的工作簿.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;工资&apos;]</span><br><span class="line"></span><br><span class="line"># 创建图表对象</span><br><span class="line">chart=LineChart()</span><br><span class="line"></span><br><span class="line"># 数据引用来源</span><br><span class="line">data=Reference(worksheet=sheet,min_row=1,max_row=2,min_col=1,max_col=13)</span><br><span class="line"></span><br><span class="line"># # 将数据插入图表当中</span><br><span class="line">chart.add_data(data,from_rows=True,titles_from_data=True)</span><br><span class="line"></span><br><span class="line"># 类别的引用范围</span><br><span class="line">categorys=Reference(sheet,min_row=1,min_col=2,max_col=13)</span><br><span class="line"></span><br><span class="line"># 设置类别</span><br><span class="line">chart.set_categories(categorys)</span><br><span class="line"></span><br><span class="line"># 插入图表</span><br><span class="line">sheet.add_chart(chart,&apos;F8&apos;)</span><br><span class="line"></span><br><span class="line">workbook.save(&apos;我的工作簿.xlsx&apos;)</span><br></pre></td></tr></table></figure><h2 id="案例：工资明细"><a href="#案例：工资明细" class="headerlink" title="案例：工资明细"></a>案例：工资明细</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.styles import Font,Alignment,Border,Side</span><br><span class="line">workbook=openpyxl.load_workbook(&apos;工资明细.xlsx&apos;)</span><br><span class="line">sheet=workbook[&apos;Sheet1&apos;]</span><br><span class="line"></span><br><span class="line"># 设置字体样式</span><br><span class="line">font=Font(name=&apos;宋体&apos;,sz=20,b=True)</span><br><span class="line">font2=Font(name=&apos;宋体&apos;,sz=12,b=True)</span><br><span class="line"></span><br><span class="line"># 设置对其方式</span><br><span class="line">alignment=Alignment(horizontal=&apos;center&apos;,vertical=&apos;center&apos;,wrap_text=True)</span><br><span class="line"></span><br><span class="line"># 边框和线条</span><br><span class="line">side=Side(style=&apos;thin&apos;,color=&apos;000000&apos;)</span><br><span class="line">border=Border(left=side,right=side,top=side,bottom=side)</span><br><span class="line"></span><br><span class="line"># 获取指定单元格的值</span><br><span class="line">a1_value=sheet[&apos;A1&apos;].value</span><br><span class="line">l2_value=sheet[&apos;L2&apos;].value</span><br><span class="line"></span><br><span class="line"># 获取指定的行</span><br><span class="line">row3=sheet[3] #第三行 </span><br><span class="line"># 每一行都是一个元组 遍历元组，拿出每一个值，放入列表</span><br><span class="line">list_value=[]</span><br><span class="line">for cell in row3:</span><br><span class="line">  list_value.append(cell.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将需要的内容进新的excel文件</span><br><span class="line"># print(sheet.max_row) #工作表总共的行数 int类型</span><br><span class="line"></span><br><span class="line">for i in range(4,sheet.max_row+1):</span><br><span class="line">  write_book=openpyxl.Workbook()</span><br><span class="line">  write_sheet=write_book.active</span><br><span class="line"></span><br><span class="line">  # 合并新文件标题的单元格 </span><br><span class="line">  write_sheet.merge_cells(start_row=1,end_row=1,start_column=1,end_column=12)</span><br><span class="line">  write_sheet.row_dimensions[1].height=25.8 #第一行的高度</span><br><span class="line">  write_sheet[&apos;A1&apos;]=a1_value</span><br><span class="line">  write_sheet[&apos;A1&apos;].font=font</span><br><span class="line">  write_sheet[&apos;A1&apos;].alignment=alignment</span><br><span class="line"></span><br><span class="line">  # 薪水单位的单元格样式</span><br><span class="line">  write_sheet[&apos;L2&apos;]=l2_value</span><br><span class="line">  write_sheet[&apos;L2&apos;].font=font2</span><br><span class="line"></span><br><span class="line">  # 第三行样式</span><br><span class="line">  write_sheet.append(list_value) </span><br><span class="line">  three_rows=write_sheet[3]</span><br><span class="line">  for cell in three_rows:</span><br><span class="line">    cell.font=font2</span><br><span class="line">    cell.alignment=alignment</span><br><span class="line">    cell.border=border</span><br><span class="line">    # 设置每一列列宽</span><br><span class="line">    write_sheet.column_dimensions[cell.column_letter].width=13</span><br><span class="line"></span><br><span class="line">  # 第三行的高度</span><br><span class="line">  write_sheet.row_dimensions[3].height=40.8</span><br><span class="line"></span><br><span class="line">  # 第四行样式</span><br><span class="line">  four_rows=write_sheet[4]</span><br><span class="line">  for cell in four_rows:</span><br><span class="line">    cell.font=Font(name=&apos;宋体&apos;,sz=12)</span><br><span class="line">    cell.alignment=alignment</span><br><span class="line">    cell.border=border</span><br><span class="line"></span><br><span class="line">  # 向第四行的每一格添加数据</span><br><span class="line">  lst=[&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;]</span><br><span class="line">  for letter in lst:</span><br><span class="line">    write_sheet[letter+&apos;4&apos;].value=sheet[letter+str(i)].value</span><br><span class="line"></span><br><span class="line">  # 这两格的原内容是公式 </span><br><span class="line">  write_sheet[&apos;F4&apos;].value=&apos;=SUM(C4:E4)&apos;</span><br><span class="line">  write_sheet[&apos;L4&apos;].value=&apos;=F4-G4-H4-I4-J4-K4&apos;</span><br><span class="line"></span><br><span class="line">  # 以每一个人的姓名命名文件</span><br><span class="line">  write_book.save(&apos;工资/&apos;+write_sheet[&apos;B4&apos;].value+&apos;个人工资明细.xlsx&apos;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/officePython/officePython2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

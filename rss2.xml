<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Sat, 27 Jul 2019 14:49:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>sass</title>
      <link>https://shulu520.com/sass/css3-sass/</link>
      <guid>https://shulu520.com/sass/css3-sass/</guid>
      <pubDate>Sat, 27 Jul 2019 14:41:58 GMT</pubDate>
      <description>
      
        css预处理器-sass学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;学习使用css预处理器sass让我们更爽地敲css代码。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css预处理器-sass介绍"><a href="#css预处理器-sass介绍" class="headerlink" title="css预处理器-sass介绍"></a>css预处理器-sass介绍</h2><ul><li>sass使用ruby语言编写，下载使用有些不方便，使用cnpm成功率高</li><li>vscode 下载EasySass运行插件。</li><li><strong>注意</strong>：下载的是node-sass, sass的文件后缀是.scss</li></ul><ol><li>项目是npm init 过的</li><li>cnpm install node-sass </li><li>编写.scss后缀的文件后，自动会生成对应文件名的.css文件,以及压缩过的对应文件名的.min.css文件</li></ol><h2 id="css预处理器的作用"><a href="#css预处理器的作用" class="headerlink" title="css预处理器的作用"></a>css预处理器的作用</h2><ul><li>帮助我们更好的组织css代码</li><li>提高代码的复用率</li><li>提升可维护性</li></ul><h2 id="sass嵌套"><a href="#sass嵌套" class="headerlink" title="sass嵌套"></a>sass嵌套</h2><ul><li>选择器之间可以嵌套</li><li>反映层级和约束</li></ul><h2 id="sass变量"><a href="#sass变量" class="headerlink" title="sass变量-$"></a>sass变量-$</h2><ul><li>复用常用的个别属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">$fontSize: 18px;</span><br><span class="line">$bgColor: red;</span><br><span class="line"></span><br><span class="line">//使用变量</span><br><span class="line">.child&#123;</span><br><span class="line">  font-size: $font-size + 2px;</span><br><span class="line">  background-color: $bgColor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass运算"><a href="#sass运算" class="headerlink" title="sass运算"></a>sass运算</h2><ul><li>支持加减乘除多种运算。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: $font-size + 2px;</span><br></pre></td></tr></table></figure><h2 id="sass混入-Mixin"><a href="#sass混入-Mixin" class="headerlink" title="sass混入-Mixin"></a>sass混入-Mixin</h2><ul><li>复用css代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$color: pink;</span><br><span class="line">$bgColor: blue;</span><br><span class="line">$fontSize: 18px;</span><br><span class="line"></span><br><span class="line">//定义混入</span><br><span class="line">//注意：这里base是一个代码片段的名字</span><br><span class="line">@mixin base($color, $h, $bgc, $fontSize)&#123;</span><br><span class="line">  color: $color;</span><br><span class="line">  height: $h;</span><br><span class="line">  background: $bgc;</span><br><span class="line">  font-size: $fontSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用混入</span><br><span class="line">.wrap&#123;</span><br><span class="line">  @include base(yellow, 300px, $bgColor, $fontSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass继承-extend"><a href="#sass继承-extend" class="headerlink" title="sass继承-extend"></a>sass继承-extend</h2><ul><li>复用css代码片段</li><li>生成的样式中，样式片段没有重复</li><li>@extend会增加选择器之间的联系，然后把他们堆在一起。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 一个普通的类就是一个extend</span><br><span class="line">.button&#123;</span><br><span class="line">  color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用extend</span><br><span class="line">h2&#123;</span><br><span class="line">  @extend .button;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass中mixin的优缺点"><a href="#sass中mixin的优缺点" class="headerlink" title="sass中mixin的优缺点"></a>sass中mixin的优缺点</h2><ul><li><p>优点：@mixin主要的优势就是它能够接受参数。</p></li><li><p>优点：还能直接给@mixin传递样式片段。 </p></li><li><p>缺点：生成的代码会变得肿胀。</p></li></ul><h2 id="sass中extend的优缺点"><a href="#sass中extend的优缺点" class="headerlink" title="sass中extend的优缺点"></a>sass中extend的优缺点</h2><ul><li><p>优点：生成的样式中，样式片段没有重复。</p></li><li><p>缺点：@extend会增加选择器之间的联系，然后把他们堆在一起。被继承的选择器和继承别人的选择器可能会在样式表的不同位置，这就导致维护困难，放置顺序，或者需要差异化的一些问题。</p></li><li><p>缺点：@extend命令不够灵活。不能向它传递参数，它原本是啥样就是啥样。</p></li></ul><h2 id="sass中mixin-vs-extend"><a href="#sass中mixin-vs-extend" class="headerlink" title="sass中mixin vs extend"></a>sass中mixin vs extend</h2><ul><li>@mixin和@extend都能帮助你模块化代码，然后更加方便地在样式表中复用一些样式片段。</li><li>从结果上看，mixin是直接把代码复制过来，而extend是将有公共样式的选择器提取出来，用分组选择器把他们放在一起。</li><li><p>你可能会问，到底什么时候使用@mixin，什么时候使用@extend?</p></li><li><p><strong>总结：</strong>在大作数情况下@mixin会比@extend更好，但是它们俩都有自己的一席之地。当样式和选择器之间的关系在某些方面比较紧密的时候，使用@extend。除此之外，你可以使用@mixin在任何地方。</p></li></ul><h2 id="sass循环-loop"><a href="#sass循环-loop" class="headerlink" title="sass循环-loop"></a>sass循环-loop</h2><ul><li>生成一些复杂有规律的代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//直接使用for循环，生成各自宽度的col-1 ~ col-12的css代码片段。</span><br><span class="line">@for $i from 1 to 12 &#123;</span><br><span class="line">  .col-#&#123;$i&#125;&#123;</span><br><span class="line">    width: 1000px/12*$i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sass文件模块化-import"><a href="#sass文件模块化-import" class="headerlink" title="sass文件模块化@import"></a>sass文件模块化@import</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./header&quot;; .scss后缀可以省略</span><br><span class="line">@import &quot;./nav&quot;; </span><br><span class="line">@import &quot;./footer&quot;</span><br></pre></td></tr></table></figure><h2 id="sass中css预处理器框架"><a href="#sass中css预处理器框架" class="headerlink" title="sass中css预处理器框架"></a>sass中css预处理器框架</h2><ul><li>Compass</li><li>提供现成的mixin, 类似js类库，封装常用功能。 </li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/sass/css3-sass/#disqus_thread</comments>
    </item>
    
    <item>
      <title>less</title>
      <link>https://shulu520.com/less/css3-less/</link>
      <guid>https://shulu520.com/less/css3-less/</guid>
      <pubDate>Sat, 27 Jul 2019 14:33:18 GMT</pubDate>
      <description>
      
        css预处理器-less学习笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;学习使用css预处理器less让我们更爽地敲css代码。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css预处理器-less介绍"><a href="#css预处理器-less介绍" class="headerlink" title="css预处理器-less介绍"></a>css预处理器-less介绍</h2><ul><li>less使用nodejs编写，下载使用都方便</li><li>vscode 下载EasyLess运行插件。</li></ul><ol><li>项目是npm init 过的</li><li>npm i less 即可使用</li><li>编写.less后缀的文件后，自动会生成对应文件名的.css文件</li></ol><h2 id="css预处理器的作用"><a href="#css预处理器的作用" class="headerlink" title="css预处理器的作用"></a>css预处理器的作用</h2><ul><li>帮助我们更好的组织css代码</li><li>提高代码的复用率</li><li>提升可维护性</li></ul><h2 id="less嵌套"><a href="#less嵌套" class="headerlink" title="less嵌套"></a>less嵌套</h2><ul><li>选择器之间可以嵌套</li><li>反映层级和约束</li></ul><h2 id="less变量"><a href="#less变量" class="headerlink" title="less变量-@"></a>less变量-@</h2><ul><li>复用常用的个别属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">@font-size: 18px;</span><br><span class="line">@bgColor: red; </span><br><span class="line"></span><br><span class="line">//使用变量</span><br><span class="line">.child&#123;</span><br><span class="line">  font-size: @font-size + 2px;</span><br><span class="line">  background-color: @bgColor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less运算"><a href="#less运算" class="headerlink" title="less运算"></a>less运算</h2><ul><li>支持加减乘除多种运算。</li></ul><h2 id="less混入-Mixin"><a href="#less混入-Mixin" class="headerlink" title="less混入-Mixin"></a>less混入-Mixin</h2><ul><li>复用常用的css代码片段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@color: pink;</span><br><span class="line">@bgColor: blue;</span><br><span class="line">@fontSize: 18px;</span><br><span class="line"></span><br><span class="line">//定义混入</span><br><span class="line">//注意：这里.base是一个类名</span><br><span class="line">.base(@color, @h, @bgc, @fontSize)&#123;</span><br><span class="line">  color: @color;</span><br><span class="line">  height: @h;</span><br><span class="line">  background: @bgc;</span><br><span class="line">  font-size: @fontSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用混入</span><br><span class="line">.wrap&#123;</span><br><span class="line">  .base(yellow, 300px, @bgColor, @fontSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less继承-extend"><a href="#less继承-extend" class="headerlink" title="less继承-extend"></a>less继承-extend</h2><ul><li>复用css代码片段</li><li>生成的样式中，样式片段没有重复</li><li>&amp;:extend()会增加选择器之间的联系，然后把他们堆在一起。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 一个普通的类就是一个extend</span><br><span class="line">.box&#123;</span><br><span class="line">  color: @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用extend</span><br><span class="line">h2&#123;</span><br><span class="line">  &amp;:extend(.box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="less中mixin和extend的优缺点"><a href="#less中mixin和extend的优缺点" class="headerlink" title="less中mixin和extend的优缺点"></a>less中mixin和extend的优缺点</h2><ul><li>同sass中的一样，<a href="https://shulu520.com/css3-sass/sass">参考sass部分</a></li></ul><h2 id="less循环"><a href="#less循环" class="headerlink" title="less循环"></a>less循环</h2><ul><li>生成一些复杂有规律的代码片段</li><li>less中没有循环的方法,但是我们可以在mixin中使用递归方法模拟循环。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//在mixin中使用递归方法模拟循环。</span><br><span class="line">.gen-col(@n) when (@n &gt; 0) &#123;</span><br><span class="line">  .gen-col(@n - 1);</span><br><span class="line">  .col-@&#123;n&#125; &#123;</span><br><span class="line">    width: 1000px/12*@n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用循环，生成各自宽度的col-1 ~ col-12的css代码片段。</span><br><span class="line">.gen-col(12);</span><br></pre></td></tr></table></figure><h2 id="less文件模块化-import"><a href="#less文件模块化-import" class="headerlink" title="less文件模块化@import"></a>less文件模块化@import</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./header&quot;; .less后缀可以省略</span><br><span class="line">@import &quot;./nav&quot;; </span><br><span class="line">@import &quot;./footer&quot;;</span><br></pre></td></tr></table></figure><h2 id="less中css预处理器框架"><a href="#less中css预处理器框架" class="headerlink" title="less中css预处理器框架"></a>less中css预处理器框架</h2><ul><li>Lesshat</li><li>EST(百度大牛编写)</li><li>提供现成的mixin, 类似js类库，封装常用功能。</li></ul><h3 id="EST的介绍使用"><a href="#EST的介绍使用" class="headerlink" title="EST的介绍使用"></a>EST的介绍使用</h3><ul><li>est 是一个基于 Less 的样式工具库，帮助您更轻松地书写 Less 代码。</li><li>est 提供了一系列方便快捷的 mixin，只在调用时才输出代码。est 不希望提供直接给 HTML 调用的类名，用「样式类」污染 HTML 代码的语义。当然您也可以根据自己的项目需求基于 est 搭建样式类库，提供类名接口来进行快速开发。</li></ul><p><a href="http://ecomfe.github.io/est/" target="_blank" rel="noopener">官网教程</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">使用 Git 获取代码：</span><br><span class="line">git clone https://github.com/ecomfe/est.git</span><br><span class="line"></span><br><span class="line">然后在 Less 代码中引入。</span><br><span class="line">@import &quot;est/src/all.less&quot;;</span><br><span class="line"></span><br><span class="line">官网导航介绍：</span><br><span class="line"></span><br><span class="line">variables 全局变量设置。</span><br><span class="line"></span><br><span class="line">normalize 用来归一化不同浏览器下的页面样式。</span><br><span class="line"></span><br><span class="line">reset 进行全局样式重置。即 .global-reset()</span><br><span class="line"></span><br><span class="line">shapes 提供绘制基本形状的功能</span><br><span class="line"></span><br><span class="line">effects 提供预设视觉效果。</span><br><span class="line"></span><br><span class="line">layout 提供常见的基础布局。</span><br><span class="line"></span><br><span class="line">grid 帮助生成自定义的栅格布局。 </span><br><span class="line"></span><br><span class="line">clockhand 提供顺时针简写的功能。</span><br><span class="line"></span><br><span class="line">typography 文字排版相关功能。</span><br><span class="line"></span><br><span class="line">util 常用辅助类工具函数。</span><br><span class="line"></span><br><span class="line">compatibility 提供基础的兼容性封装。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ...your own awesome less code starts here...</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/less/css3-less/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-BFC</title>
      <link>https://shulu520.com/css3/css3-BFC/</link>
      <guid>https://shulu520.com/css3/css3-BFC/</guid>
      <pubDate>Mon, 22 Jul 2019 14:18:55 GMT</pubDate>
      <description>
      
        css3 块级格式化上下文知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;BFC就是页面上的一个独立容器，容器里面的元素不会影响到外面的元素，反之亦然。学习页面布局，css-BFC的知识要重点掌握。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC-块级格式化上下文"></a>BFC-块级格式化上下文</h2><h3 id="BFC规则、特性"><a href="#BFC规则、特性" class="headerlink" title="BFC规则、特性"></a>BFC规则、特性</h3><ul><li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻box的margin会发生重叠</li><li>BFC的区域不会与float box的重叠，紧贴着浮动盒子的边缘</li><li>计算BFC的高度时，浮动元素也参与计算。</li><li>BFC就是页面上的一个独立容器，容器里面的元素不会影响到外面的元素，反之亦然。</li></ul><h3 id="块级元素的BFC创立条件"><a href="#块级元素的BFC创立条件" class="headerlink" title="块级元素的BFC创立条件"></a>块级元素的BFC创立条件</h3><ul><li>float属性不为none</li><li>position属性为absolute或fixed</li><li>display属性为inline-block、table相关、flex</li><li>overflow属性不为visible(以上最常用的是overflow: hidden, 副作用少)</li></ul><h3 id="BFC的用途"><a href="#BFC的用途" class="headerlink" title="BFC的用途"></a>BFC的用途</h3><ul><li>清除浮动: 这时可以让父元素生成BFC，即解决子因子元素浮动而父级高度塌陷问题</li><li>解决外边距合并问题：假设有两个p元素，可以在其中一个p上包裹容器，然后触发其BFC，这样两个p就不在同一个BFC，因此就不会发生重叠</li><li>自适应两栏布局: 即左边盒子浮动，右边盒子触发BFC</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-BFC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-flex</title>
      <link>https://shulu520.com/css3/css3-flex/</link>
      <guid>https://shulu520.com/css3/css3-flex/</guid>
      <pubDate>Thu, 18 Jul 2019 13:58:53 GMT</pubDate>
      <description>
      
        css3-flex 弹性盒模型 常用知识总结
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><ul><li>规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间。</li><li>Flexbox即 Flexible Box Module（弹性盒模型）</li><li>Flexbox同一时间只能控制行或列中的一个维度。对于二维控制需要 grid网格布局。</li><li>主轴 即X轴方向(默认)</li><li>侧轴 即Y轴方向(默认) 侧轴垂直于主轴</li></ul><h2 id="flex-各个属性"><a href="#flex-各个属性" class="headerlink" title="flex 各个属性"></a>flex 各个属性</h2><h3 id="父元素-伸缩容器"><a href="#父元素-伸缩容器" class="headerlink" title="父元素-伸缩容器"></a>父元素-伸缩容器</h3><ul><li>display: flex; 声明使用伸缩布局</li><li>flex-direction: row(默认); 定义了主轴的方向(正方向或反方向)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: row;            x轴方向</span><br><span class="line">flex-direction: row-reverse;    -X轴方向</span><br><span class="line">flex-direction: column;         Y轴方向</span><br><span class="line">flex-direction: column-reverse; -Y轴方向</span><br></pre></td></tr></table></figure><ul><li>justify-content 主轴上项目的对齐方式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">justify-content: center;     居中排列 </span><br><span class="line">justify-content: start;      从行首起始位置开始排列 </span><br><span class="line">justify-content: end;        从行尾位置开始排列 </span><br><span class="line"></span><br><span class="line">justify-content: space-between;   均匀排列每个元素 首个元素放置于起点，末尾元素放置于终点 </span><br><span class="line">justify-content: space-around;    均匀排列每个元素 每个元素周围分配相同的空间 </span><br><span class="line">justify-content: space-evenly;    均匀排列每个元素 每个元素之间的间隔相等</span><br></pre></td></tr></table></figure><ul><li>align-items 侧轴上项目的对齐方式–针对单行即子元素只有一行(不换行)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">align-items: center; </span><br><span class="line">align-items: start;</span><br><span class="line">align-items: end; </span><br><span class="line">align-items: stretch; 拉伸子元素的高度以适应父元素的高度(子元素不给高度的情况)</span><br></pre></td></tr></table></figure><ul><li>align-content 侧轴上项目的对齐方式–针对多行即子元素有多行(换行)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">align-content: center;      将项目放置在中点 </span><br><span class="line">align-content: start;       最先放置项目 </span><br><span class="line">align-content: end;         最后放置项目 </span><br><span class="line"></span><br><span class="line">align-content: space-between;  均匀分布项目 第一项与起始点齐平，最后一项与终止点齐平 </span><br><span class="line">align-content: space-around;   均匀分布项目 项目在两端有一半大小的空间</span><br><span class="line">align-content: space-evenly;   均匀分布项目 项目周围有相等的空间 </span><br><span class="line">align-content: stretch;        均匀分布项目 拉伸‘自动’-大小的项目以充满容器</span><br></pre></td></tr></table></figure><ul><li>flex-wrap 是否允许子元素换行显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: nowrap;        默认不换行</span><br><span class="line">flex-wrap: wrap;          换行</span><br><span class="line">flex-wrap: wrap-reverse;  换行并反向显示</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//demo 水平垂直对齐三条属性就搞定</span><br><span class="line">html,body&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">#app&#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>flex-flow  简写属性 弹性流 flex-direction 和 flex-wrap 属性的简写</li></ul><h3 id="子元素-伸缩项目"><a href="#子元素-伸缩项目" class="headerlink" title="子元素-伸缩项目"></a>子元素-伸缩项目</h3><ul><li>flex: 1或2等无单位的数值，表示这个子元素占几份父元素的空间，当然子元素也可以指定宽度。简写属性， 是flex-grow、 flex-shrink 和 flex-basis 的简写。</li><li>order: -1或1、2等无单位的数值，表示子元素的排列顺序，数值越小排列越靠前</li><li>justify-self: 对齐主轴方向的某个项目</li><li>align-self 对齐侧轴方向的单个项目</li></ul><h3 id="扩展css属性"><a href="#扩展css属性" class="headerlink" title="扩展css属性"></a>扩展css属性</h3><ul><li>min-width: 如500px; 盒子可伸缩最小宽度</li><li>max-width: 如1000px; 盒子可伸缩最大宽度</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-flex/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-animation</title>
      <link>https://shulu520.com/css3/css3-animation/</link>
      <guid>https://shulu520.com/css3/css3-animation/</guid>
      <pubDate>Thu, 18 Jul 2019 04:34:45 GMT</pubDate>
      <description>
      
        硅谷css3-动画-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="动画定义-关键帧-keyframes"><a href="#动画定义-关键帧-keyframes" class="headerlink" title="动画定义 关键帧@keyframes"></a>动画定义 关键帧@keyframes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@keyframes animiationName&#123;</span><br><span class="line">  keyframes-selector&#123;</span><br><span class="line">      css-style;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animiationName:必写项，定义动画的名称</span><br><span class="line">keyframes-selector：必写项，动画持续时间的百分比,两个状态点的时候，可以用from、to,多组动画状态时使用百分比。</span><br><span class="line">  from：0%</span><br><span class="line">  to：100%</span><br><span class="line">css-style：css声明</span><br></pre></td></tr></table></figure><h2 id="动画使用-animation"><a href="#动画使用-animation" class="headerlink" title="动画使用 animation"></a>动画使用 animation</h2><ul><li>animation属性是一个简写属性形式: （可以用来描述可动画的属性）</li><li>可动画属性的列表：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties</a>        </li></ul><h3 id="简写属性animation"><a href="#简写属性animation" class="headerlink" title="简写属性animation"></a>简写属性animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">animation：</span><br><span class="line">  animation-name             动画名称</span><br><span class="line">  animation-duration         持续时间</span><br><span class="line">  animation-timing-function  速度曲线 (同过渡)</span><br><span class="line">  animation-delay            延时执行</span><br><span class="line">  animation-iteration-count  执行次数</span><br><span class="line">  animation-direction        动画方向</span><br><span class="line"></span><br><span class="line">  animation-fill-mode        </span><br><span class="line">    设置动画在执行之前和之后如何将样式应用于其目标。值forwards可以使其保持最终状态而不是恢复到原始状态(默认)</span><br><span class="line"></span><br><span class="line">  animation-play-state       设置动画状态    </span><br><span class="line">    running 当前动画正在运行。</span><br><span class="line">    paused 当前动画以被停止。</span><br></pre></td></tr></table></figure><ul><li>在每个动画定义中，顺序很重要：可以被解析为 <time>的第一个值被分配给animation-duration, 第二个分配给 animation-delay。</time></li></ul><h3 id="无缝滚动"><a href="#无缝滚动" class="headerlink" title="无缝滚动"></a>无缝滚动</h3><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-animation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-transform</title>
      <link>https://shulu520.com/css3/css3-transform/</link>
      <guid>https://shulu520.com/css3/css3-transform/</guid>
      <pubDate>Thu, 18 Jul 2019 04:33:48 GMT</pubDate>
      <description>
      
        硅谷css3-2D&amp;3D变形-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><ul><li>transform 属性 , 只对 <strong>block</strong> 级元素生效！</li></ul><h2 id="transform-2D"><a href="#transform-2D" class="headerlink" title="transform 2D"></a>transform 2D</h2><h3 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转 rotate"></a>旋转 rotate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform:rotate(angle/弧度);   </span><br><span class="line">正值:顺时针旋转  rotate(360deg/2Π)</span><br><span class="line">负值:逆时针旋转  rotate(-360deg/-2Π)</span><br><span class="line">只能设单值。正数表示顺时针旋转，负数表示逆时针旋转</span><br></pre></td></tr></table></figure><h3 id="平移-translate"><a href="#平移-translate" class="headerlink" title="平移 translate"></a>平移 translate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X方向平移:transform:  translateX(tx)</span><br><span class="line">Y方向平移:transform:  translateY(ty) </span><br><span class="line">二维平移：transform:  translate(tx[, ty])； 如果ty没有指定，它的值默认为0。</span><br><span class="line"> </span><br><span class="line">可设单值，也可设双值。</span><br><span class="line">正数表示XY轴正向位移，负数为反向位移。设单值表示只X轴位移，Y轴坐标不变，</span><br><span class="line">例如transform: translate(100px);等价于transform: translate(100px,0);</span><br><span class="line"></span><br><span class="line">百分比：</span><br><span class="line">translateX(50%) 向右平移自己宽度的一半</span><br></pre></td></tr></table></figure><h3 id="拓展-定位的盒子居中对齐-优美写法"><a href="#拓展-定位的盒子居中对齐-优美写法" class="headerlink" title="拓展-定位的盒子居中对齐-优美写法"></a>拓展-定位的盒子居中对齐-优美写法</h3><ul><li>定位的盒子居中对齐优美写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%; //父级高度的50%</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);//自己宽高的50%，无需手动计算</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>定位的盒子居中对齐传统写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">写法一：</span><br><span class="line">/* </span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-top: -150px;</span><br><span class="line">  margin-left: -150px;</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125; </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">写法二：</span><br><span class="line">/*</span><br><span class="line">#app&#123;</span><br><span class="line"></span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  margin: auto;</span><br><span class="line"></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125; </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="倾斜-skew"><a href="#倾斜-skew" class="headerlink" title="倾斜 skew"></a>倾斜 skew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">transform:skewX(45deg);</span><br><span class="line">X方向倾斜:transform:  skewX(angle)</span><br><span class="line">  skewX(45deg):参数值以deg为单位 代表与y轴之间的角度</span><br><span class="line"></span><br><span class="line">Y方向倾斜:transform:  skewY(angle)</span><br><span class="line">  skewY(45deg):参数值以deg为单位 代表与x轴之间的角度</span><br><span class="line"></span><br><span class="line">二维倾斜:transform:  skew(ax[, ay]);  如果ay未提供，在Y轴上没有倾斜</span><br><span class="line">  skew(45deg,15deg):参数值以deg为单位 第一个参数代表与y轴之间的角度</span><br><span class="line">                                                                第二个参数代表与x轴之间的角度</span><br><span class="line">  单值时表示只X轴扭曲，Y轴不变，如transform: skew(30deg);等价于     transform: skew(30deg, 0);</span><br><span class="line">  考虑到可读性，不推荐用单值，应该用transform: skewX(30deg);。skewY表示只Y轴扭曲，X轴不变  </span><br><span class="line"></span><br><span class="line"> 正值:拉正斜杠方向的两个角</span><br><span class="line"> 负值:拉反斜杠方向的两个角</span><br></pre></td></tr></table></figure><h3 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放 scale"></a>缩放 scale</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">transform:scale(2);</span><br><span class="line">X方向缩放:transform:  scaleX(sx); </span><br><span class="line">Y方向缩放:transform:  scaleY(sy);</span><br><span class="line">二维缩放 :transform:  scale(sx[, sy]);  (如果sy 未指定，默认认为和sx的值相同)  </span><br><span class="line"></span><br><span class="line">要缩小请设0.01～0.99之间的值，要放大请设超过1的值。</span><br><span class="line">例如缩小一倍可以transform: scale(.5);</span><br><span class="line">  放大一倍可以transform: scale(2);</span><br><span class="line"></span><br><span class="line">如果只想X轴缩放，可以用scaleX(.5)相当于scale(.5, 1)。</span><br><span class="line">同理只想Y轴缩放，可以用scaleY(.5)相当于scale(1, .5)</span><br><span class="line"></span><br><span class="line">正值:缩放的程度</span><br><span class="line">负值:不推荐使用（有旋转效果）</span><br><span class="line">单值时表示只X轴,Y轴上缩放粒度一样，如transform: scale(2);等价于transform: scale(2,2);</span><br></pre></td></tr></table></figure><h3 id="基点的变换-transform-origin"><a href="#基点的变换-transform-origin" class="headerlink" title="基点的变换 transform-origin"></a>基点的变换 transform-origin</h3><ul><li>transform-origin 属性让你更改一个元素变形的基点。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  一个值：</span><br><span class="line">必须是&lt;length&gt;，&lt;percentage&gt;，或 left, center, right, top, bottom关键字中的一个。</span><br><span class="line"></span><br><span class="line">  两个值：</span><br><span class="line">其中一个必须是&lt;length&gt;，&lt;percentage&gt;，或left, center, right关键字中的一个。</span><br><span class="line">另一个必须是&lt;length&gt;，&lt;percentage&gt;，或top, center, bottom关键字中的一个。</span><br><span class="line"></span><br><span class="line">  三个值：</span><br><span class="line">前两个值和只有两个值时的用法相同。</span><br><span class="line">第三个值必须是&lt;length&gt;。它始终代表Z轴偏移量。</span><br></pre></td></tr></table></figure><h2 id="transform-3D"><a href="#transform-3D" class="headerlink" title="transform 3D"></a>transform 3D</h2><h3 id="3D缩放"><a href="#3D缩放" class="headerlink" title="3D缩放"></a>3D缩放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform: scaleZ(number)</span><br><span class="line">transform: scale3d(scaleX,scaleY,scaleZ);</span><br><span class="line"> </span><br><span class="line">如果只设置scaleZ(number)，你会发现元素并没有被扩大或压缩，scaleZ(number)需要和translateZ(length)配合使用，number乘以length得到的值，是元素沿Z轴移动的距离，从而使得感觉被扩大或压缩</span><br></pre></td></tr></table></figure><h3 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CSS3中的3D旋转主要包括四个功能函数</span><br><span class="line">rotateX(angle)</span><br><span class="line">    </span><br><span class="line">rotateY(angle)</span><br><span class="line">    </span><br><span class="line">rotateZ(angle)等价于rotate(angle)</span><br><span class="line">    </span><br><span class="line">rotate3d(x,y,z,angle)</span><br><span class="line">x, y, z分别接受一个数值(number),用来计算矢量方向(direction vector)，矢量方向是三维空间中的一条线, 从坐标系原点到x, y, z值确定的那个点，元素围绕这条线旋转angle指定的值</span><br></pre></td></tr></table></figure><h3 id="3D平移"><a href="#3D平移" class="headerlink" title="3D平移"></a>3D平移</h3><ul><li>translateZ  它不能是百分比 值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transform: translateZ(length)是3D Transformaton特有的，其他两个2D中就有</span><br><span class="line"></span><br><span class="line">translateZ  它不能是百分比 值</span><br><span class="line"></span><br><span class="line">transform: translate3d(translateX,translateY,translateZ);</span><br></pre></td></tr></table></figure><h3 id="景深perspective"><a href="#景深perspective" class="headerlink" title="景深perspective"></a>景深perspective</h3><ul><li><p>景深是指相机对焦点前后相对清晰的成像范围。在光学中，尤其是录影或是摄影，是一个描述在空间中，可以清楚成像的距离范围。虽然透镜只能够将光聚 到某一固定的距离，远离此点则会逐渐模糊，但是在某一段特定的距离内，影像模糊的程度是肉眼无法察觉的，这段距离称之为景深。</p></li><li><p>简单的理解，景深就是我们的肉眼距离显示器的距离，景深越大，元素离我们越远，效果就不好，在我们CSS3中，perspective用于激活一个3D空间，属性值就是景深大小（默认none无景深）</p></li><li><p>应用景深的元素称为“舞台元素”，舞台元素的所有后代元素都会受影响，（如果后代元素中也添加了perspective属性，效果会叠加而不是覆盖）</p></li><li><p>perspective、perspective-origin<strong>设置在父元素上</strong>，对后代元素起作用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transform: perspective(depth);</span><br><span class="line">depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。</span><br><span class="line"></span><br><span class="line">1000px被认为是个正常值</span><br><span class="line">若使用perspective()函数，那么他必须被放置在transform属性的首位，如果放在其他函数之后，则会被忽略</span><br><span class="line"></span><br><span class="line">perspective: depth;</span><br><span class="line">同perspective()函数一样，depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。他们唯一的区别是，perspective属性是被用于元素的后代元素，而不是元素本身；就是说，为某个元素设置perspective属性后，是对这个元素的子元素起作用，而不是这个元素本身。</span><br><span class="line"></span><br><span class="line">perspective-origin</span><br><span class="line">同perspective属性，也是设置在父元素上，对后代元素起作用。 这个属性来设置你在X, Y轴坐标确定的那个点来看这个元素，Z轴是被perspective属性设置的</span><br></pre></td></tr></table></figure><ul><li>1000px被认为是个正常值</li><li>若使用perspective()函数，那么他必须被放置在transform属性的首位，如果放在其他函数之后，则会被忽略</li><li>perspective属性是设置在容器被作用于后代元素，而不是容器元素本身</li></ul><h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><ul><li><strong>此功能某些浏览器尚在开发中</strong></li><li>属性 backface-visibility 指定当元素背面朝向观察者时是否可见。</li><li>visible 背面朝向用户时可见。</li><li>hidden 背面朝向用户时不可见。</li></ul><h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><ul><li><strong>此功能某些浏览器尚在开发中</strong></li><li>属性 transform-style 设置元素的子元素是位于 3D 空间中还是平面中。</li><li>flat 设置元素的子元素位于该元素的平面中。</li><li>preserve-3d 指示元素的子元素应位于 3D 空间中。</li></ul><h3 id="灭点"><a href="#灭点" class="headerlink" title="灭点"></a>灭点</h3><ul><li>指的是立体图形各条边的延伸线所产生的相交点。透视点的消失点</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-transform/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-transition</title>
      <link>https://shulu520.com/css3/css3-transition/</link>
      <guid>https://shulu520.com/css3/css3-transition/</guid>
      <pubDate>Wed, 17 Jul 2019 03:24:42 GMT</pubDate>
      <description>
      
        硅谷css3-过渡-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h2><h3 id="简写属性transition"><a href="#简写属性transition" class="headerlink" title="简写属性transition"></a>简写属性transition</h3><ul><li>transition是一个简写属性</li><li>CSS 过渡 由简写属性 transition 定义是最好的方式，可以避免属性值列表长度不一，节省调试时间 </li></ul><h3 id="默认值："><a href="#默认值：" class="headerlink" title="默认值："></a>默认值：</h3><ul><li>transition-delay: 0s 属性规定了在过渡效果开始作用之前需要等待的时间。</li><li>transition-duration: 0s 属性以秒或毫秒为单位指定过渡动画所需的时间。</li><li>transition-property: all 默认值为 all，表示所有可被动画的属性都表现出过渡动画</li><li>transition-timing-function: ease 通过这个函数会建立一条加速度曲线，因此在整个transition变化过程中，变化速度可以不断改变</li></ul><h3 id="transition-timing-function属性值"><a href="#transition-timing-function属性值" class="headerlink" title="transition-timing-function属性值"></a>transition-timing-function属性值</h3><ol><li>ease：（加速然后减速）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).</li><li>linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).</li><li>ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).</li><li>ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).</li><li>ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)</li><li>cubic-bezier： 贝塞尔曲线</li><li>step-start：等同于steps(1,start)</li></ol><ul><li>step-end：等同于steps(1,end)</li><li>steps(<integer>,[,[start|end]]?)</integer></li><li>第一个参数：必须为正整数，指定函数的步数</li><li>第二个参数：指定每一步的值发生变化的时间点（默认值end）</li></ul><h3 id="当属性值的列表长度不一致时"><a href="#当属性值的列表长度不一致时" class="headerlink" title="当属性值的列表长度不一致时"></a>当属性值的列表长度不一致时</h3><ul><li>要过渡的属性的个数与对应的给出的时间列表长度不一致时，不够的时候，关于时间的会重复列表，关于transition-timing-function的时候使用的是默认值ease</li><li>超出的情况下是会被全部截掉的</li></ul><h3 id="检测过渡是否完成–争对属性而言的"><a href="#检测过渡是否完成–争对属性而言的" class="headerlink" title="检测过渡是否完成–争对属性而言的"></a>检测过渡是否完成–争对属性而言的</h3><ul><li>当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend, 在 WebKit 下是 webkitTransitionEnd</li><li>每一个拥有过渡的<strong>属性</strong>在其完成过渡时都会触发一次transitionend事件</li><li>在transition完成前设置 display: none，事件同样不会被触发</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在transition属性中，各个值的书写顺序是很重要的：第一个可以解析为时间的值会被赋值给transition-duration，第二个可以解析为时间的值会被赋值给transition-delay</li><li>关于时间要带单位</li></ul><h3 id="推荐抒写顺序"><a href="#推荐抒写顺序" class="headerlink" title="推荐抒写顺序"></a>推荐抒写顺序</h3><ul><li>过渡时间  过渡样式  过渡形式  延迟时间 </li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li>transition 可以不用厂商前缀，不过鉴于标准刚刚稳定，对于基于 Webkit的浏览器仍然需要厂商前缀。如果想兼容旧版本的浏览器那么也需要厂商前缀（例如Firefox 15 及之前版本, Opera 12 及之前版本)</li></ul><h3 id="拓展-贝塞尔曲线"><a href="#拓展-贝塞尔曲线" class="headerlink" title="拓展-贝塞尔曲线"></a>拓展-贝塞尔曲线</h3><ul><li>以物理学的角度看：贝塞尔曲线是一条位移时间曲线，其斜率表示速度。</li><li>transition: 3s all cubic-bezier(0.445, 0.05, 0.55, 0.95) 0s</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-transition/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-new-ui</title>
      <link>https://shulu520.com/css3/css3-new-ui/</link>
      <guid>https://shulu520.com/css3/css3-new-ui/</guid>
      <pubDate>Tue, 16 Jul 2019 14:46:52 GMT</pubDate>
      <description>
      
        硅谷css3-新的UI方案-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="新增文本样式"><a href="#新增文本样式" class="headerlink" title="新增文本样式"></a>新增文本样式</h2><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><ul><li>透明度，性能高</li><li>值为0~1</li></ul><h3 id="rgba"><a href="#rgba" class="headerlink" title="rgba"></a>rgba</h3><ul><li>rgba(0, 0, 0, .5)</li><li>颜色表示，a表示透明度</li><li>可以实现以前不能实现的样式—背景透明文字不透明</li></ul><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><ul><li>text-shadow: 1px 1px 1px pink, 1px 1px 1px orange;</li><li>参数为 x、y轴方向偏移阴影，以及模糊值，颜色</li><li>可以叠加阴影，第一个在最上面</li><li>浮雕文字</li></ul><h3 id="元素模糊"><a href="#元素模糊" class="headerlink" title="元素模糊"></a>元素模糊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">  filter: blur(5px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模糊背景</li></ul><h3 id="文字描边"><a href="#文字描边" class="headerlink" title="文字描边"></a>文字描边</h3><ul><li>只有webkit内核才支持：-webkit-text-stroke（准确的来说不能算是css3的东西，但需要大家知道）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  -webkit-text-stroke: pink 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h3><ul><li>direction:控制文字的方向</li><li>一定要配合unicode-bidi:bidi-override;来使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  direction: rtl; 从右向左</span><br><span class="line">  unicode-bidi: bidi-override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 前提是这个元素不是靠内容撑开的</span><br><span class="line">div&#123;</span><br><span class="line">  white-space: nowrap; 首先不换行</span><br><span class="line">  overflow: hidden; 溢出隐藏</span><br><span class="line">  text-overflow: ellipsis; 文本显示省略号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行文本溢出显示省略号"><a href="#多行文本溢出显示省略号" class="headerlink" title="多行文本溢出显示省略号"></a>多行文本溢出显示省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">  position: relative; </span><br><span class="line">  height: 40px; 高度为行高的整数倍，防止超出的文字露出</span><br><span class="line">  line-height: 20px; </span><br><span class="line">  overflow: hidden; 溢出隐藏</span><br><span class="line">&#125;</span><br><span class="line">p:after&#123; 将::after换为:after兼容ie8</span><br><span class="line">  content: &quot;...&quot;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0; </span><br><span class="line">  padding-left: 40px;</span><br><span class="line">  background: linear-gradient(to right, transparent, #fff 55%);</span><br><span class="line">  添加渐变背景可避免文字只显示一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="盒模型新增样式"><a href="#盒模型新增样式" class="headerlink" title="盒模型新增样式"></a>盒模型新增样式</h2><ul><li>img、input属于行内替换元素。</li><li>替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容</li><li><p>替换元素一般有内在尺寸，所以具有width和height，可以设定。</p></li><li><p>图片居中demo用容器的伪元素给图片做一个兄弟元素(高度=容器的高度，inline-block)，并让他两个基线对齐，就实现了图片的垂直居中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">#app&#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">#app::after&#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 100%;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;./love.gif&quot; alt=&quot;shulu&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="盒模型阴影-box-shadow"><a href="#盒模型阴影-box-shadow" class="headerlink" title="盒模型阴影 box-shadow"></a>盒模型阴影 box-shadow</h3><ul><li>box-shadow: 5px 5px 5px 5px pink</li><li>即x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 </li><li>可以做不占空间的边框。这个也挺好。</li><li>demo 一个元素生成哆啦A梦的图，即是这个元素的多个不同的阴影的叠加效果，配合border-radius，以及前后的两个伪元素。</li></ul><h3 id="倒影-webkit-box-reflect"><a href="#倒影-webkit-box-reflect" class="headerlink" title="倒影 -webkit-box-reflect"></a>倒影 -webkit-box-reflect</h3><ul><li>设置元素的倒影（准确的来说不能算是css3的东西，但需要大家知道）</li><li>倒影的方向<br>  第一个值，above, below, right, left</li><li>倒影的距离<br>  第二个值，长度单位</li><li>渐变<br>  第三个值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">  -webkit-box-reflect: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><ul><li>该属性允许你控制一个元素的可调整大小性。</li><li><p>一定要配合overflow：auto使用</p></li><li><p>both 允许用户在水平和垂直方向上调整元素的大小。</p></li><li>horizontal 水平方向</li><li>vertical 垂直方向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#text&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  resize: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><ul><li>该属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</li><li><p>box-sizing 属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行/列为。</p></li><li><p>默认值：content-box  不可继承</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content-box</span><br><span class="line">默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距, 边框 &amp; 外边距 都在这个盒子的外部。 比如. 如果 .box &#123;width: 350px&#125;; 而且 &#123;border: 10px solid black;&#125; 那么在浏览器中的渲染的实际宽度将是370px;</span><br><span class="line"></span><br><span class="line">尺寸计算公式：</span><br><span class="line">  width = 内容的宽度，</span><br><span class="line">  height = 内容的高度。</span><br><span class="line">  宽度和高度都不包含内容的边框（border）和内边距（padding）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">border-box</span><br><span class="line">width 和 height 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于 Quirks模式 时Internet Explorer使用的盒模型。</span><br><span class="line"></span><br><span class="line">这里的维度计算为：</span><br><span class="line">  width = border + padding + 内容的 width，</span><br><span class="line">  height = border + padding + 内容的 height。</span><br></pre></td></tr></table></figure><h2 id="新增UI样式"><a href="#新增UI样式" class="headerlink" title="新增UI样式"></a>新增UI样式</h2><h3 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 border-radius"></a>圆角 border-radius</h3><ul><li>传统的圆角生成方案，必须使用多张图片作为背景图案</li><li>CSS3圆角的出现，使得我们再也不必浪费时间去制作这些图片了，而且还有其他多个优点：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* 减少维护的工作量。图片文件的生成、更新、编写网页代码，这些工作都不再需要了。</span><br><span class="line"></span><br><span class="line">* 提高网页性能。由于不必再发出多余的HTTP请求，网页的载入速度将变快。</span><br><span class="line"></span><br><span class="line">* 增加视觉可靠性。某些情况下（网络拥堵、服务器出错、网速过慢等等），背景图片会下载失败，导致视觉效果不佳。CSS3就不会发生这种情况.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">注意 百分比值</span><br><span class="line"></span><br><span class="line">在旧版本的 Chrome 和 Safari 中不支持。(fixed in Sepember 2010)</span><br><span class="line">在 11.50 版本以前的 Opera 中实现有问题。</span><br><span class="line">Gecko 2.0 (Firefox 4) 版本前实现不标准：水平半轴和垂直半轴都相对于盒子模型的宽度。</span><br><span class="line">在旧版本的 iOS (iOS 5 之前) 和 Android 中 (WebKit 532 之前) 不支持。</span><br></pre></td></tr></table></figure><h3 id="扩展-绝对定位模拟固定定位"><a href="#扩展-绝对定位模拟固定定位" class="headerlink" title="扩展-绝对定位模拟固定定位"></a>扩展-绝对定位模拟固定定位</h3><ul><li>固定定位在ie6以及移动端的兼容性不太好，故需要模拟实现</li><li>html,body,#wrap三者的高度都为100%，即都等于文档视口的高度。</li><li>默认滚动条在document上，可以设置在一个全局的容器#wrap(高度=视口的高度，overflow: auto)身上</li><li><strong>初始包含块</strong>：是一个与视窗等大小、等位置的矩形，滚动默认滚动条它会跟着动</li><li>body作为父级(没有定位)，绝对定位的元素是相对于这个初始包含块定位的</li><li>禁止系统滚动条后，初始包含块便不会再动了</li><li>这样绝对定位的元素也不会动了，即模拟了固定定位的效果</li><li>demo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">html,body&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  /* 禁止系统滚动条 */</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">#wrap&#123;</span><br><span class="line">  /* 将滚动条设置到我们的容器上 */</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">&#125;</span><br><span class="line">#app&#123;</span><br><span class="line">  /* 为了撑开容器看到滚动条 */</span><br><span class="line">  height: 3000px;</span><br><span class="line">&#125;</span><br><span class="line">#red&#123;</span><br><span class="line">  /* 绝对定位的元素，实现了固定定位的效果 */</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;div id=&quot;wrap&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;red&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><ul><li>border-image 属性允许在元素的边框上绘制图像。这使得绘制复杂的外观组件更加简单，使用 border-image 时，其将会替换掉 border-style 属性所设置的边框样式如实线solid。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">border-image-source: url(./love.jpg) 图片</span><br><span class="line">border-image-slice:  百分比</span><br><span class="line">该属性会通过规范将图片明确的分割为9个区域：四个角，四边以及中心区域。图片见 MDN</span><br><span class="line">border-image-width: 定义图像边框宽度。 </span><br><span class="line">border-image-outset: 定义边框图像可超出边框盒的大小</span><br><span class="line">border-image-repeat:  定义图片如何填充边框。stretch(拉伸),repeat，round（平铺）</span><br></pre></td></tr></table></figure><h3 id="css2背景"><a href="#css2背景" class="headerlink" title="css2背景"></a>css2背景</h3><ul><li>background-color</li><li>background-image</li><li>background-position</li><li>background-repeat</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat-x  </span><br><span class="line">repeat-y  </span><br><span class="line">repeat    </span><br><span class="line">no-repeat</span><br></pre></td></tr></table></figure><h3 id="css3背景新增"><a href="#css3背景新增" class="headerlink" title="css3背景新增"></a>css3背景新增</h3><ul><li>background-origin设置背景渲染的起始位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border-box</span><br><span class="line">padding-box(默认)</span><br><span class="line">content-box</span><br></pre></td></tr></table></figure><ul><li>background-clip 设置背景裁剪位置</li><li>-webkit-background-clip 按文字剪贴背景(文字有透明才行)</li><li>background-size 设置背景图片大小</li><li>background 是CSS简写属性，用来集中设置各种背景属性。</li></ul><h3 id="线性渐变-背景图片渐变"><a href="#线性渐变-背景图片渐变" class="headerlink" title="线性渐变-背景图片渐变"></a>线性渐变-背景图片渐变</h3><ul><li><p>background-image: linear-gradient(red,blue);</p></li><li><p>为了创建一个线性渐变，你需要设置一个起始点和一个方向（指定为一个角度）。你还要定义终止色。终止色就是你想让浏览器去平滑的过渡过去，并且你必须指定至少两种，当然也会可以指定更多的颜色去创建更复杂的渐变效果。</p></li><li><p>默认从上到下发生渐变</p></li><li><p>linear-gradient(red,blue);</p></li><li><p>改变渐变方向：（top bottom left right）</p></li><li><p>linear-gradient(to 结束的方向,red,blue);</p></li><li><p>使用角度</p></li><li><p>linear-gradient(角度,red,blue);</p></li><li><p>颜色节点的分布（第一个不写为0%，最后一个不写为100%）</p></li><li><p>linear-gradient(red 长度或者百分比,blue 长度或者百分比);</p></li><li><p>重复渐变</p></li><li>repeating-linear-gradient(60deg,red 0,blue 30%);</li></ul><h3 id="径向渐变-背景图片渐变"><a href="#径向渐变-背景图片渐变" class="headerlink" title="径向渐变-背景图片渐变"></a>径向渐变-背景图片渐变</h3><ul><li>background-image: radial-gradient(red,blue);</li><li>radial-gradient() 函数创建一个<image>，用来展示由原点（渐变中心）辐射开的颜色渐变</image></li></ul><ul><li>默认均匀分布</li><li><p>radial-gradient(red,blue);</p></li><li><p>不均匀分布</p></li><li><p>radial-gradient(red 50%,blue 70%);</p></li><li><p>改变渐变的形状</p></li><li>radial-gradient(circle ,red,blue)</li><li>circle</li><li><p>ellipse（默认为椭圆）</p></li><li><p>渐变形状的大小</p></li><li>radial-gradient(closest-corner  circle ,red,blue)</li><li>closest-side   最近边</li><li>farthest-side  最远边</li><li>closest-corner 最近角</li><li><p>farthest-corner 最远角（默认值）</p></li><li><p>改变圆心</p></li><li>radial-gradient(closest-corner  circle at 10px 10px,red,blue);  </li></ul><h2 id="剪切元素-clip-path"><a href="#剪切元素-clip-path" class="headerlink" title="剪切元素 clip-path"></a>剪切元素 clip-path</h2><ul><li>该属性可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏。剪切区域是被引用内嵌的URL定义的路径或者外部svg的路径，或者作为一个形状例如circle()。</li><li>配合svg实现ios圆角</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-new-ui/#disqus_thread</comments>
    </item>
    
    <item>
      <title>哲学</title>
      <link>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:42:24 GMT</pubDate>
      <description>
      
        茶余饭后，我们还可以思考更深奥的东东。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E5%93%B2%E5%AD%A6/%E5%93%B2%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>电影学</title>
      <link>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:42:07 GMT</pubDate>
      <description>
      
        经典电影你值得一看
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;人生苦短，我只看经典电影。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E7%94%B5%E5%BD%B1%E5%AD%A6/%E7%94%B5%E5%BD%B1%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>心理学</title>
      <link>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:41:18 GMT</pubDate>
      <description>
      
        学习心理学不为看透别人，只为理解自己的内心。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%BF%83%E7%90%86%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>生活中的经济学</title>
      <link>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</link>
      <guid>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</guid>
      <pubDate>Tue, 16 Jul 2019 05:28:58 GMT</pubDate>
      <description>
      
        知识扩展之生活中的经济学
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;物以稀为贵。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-font</title>
      <link>https://shulu520.com/css3/css3-font/</link>
      <guid>https://shulu520.com/css3/css3-font/</guid>
      <pubDate>Sun, 14 Jul 2019 07:06:41 GMT</pubDate>
      <description>
      
        硅谷css3-自定义字体&amp;字体图标-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="位图vs矢量图"><a href="#位图vs矢量图" class="headerlink" title="位图vs矢量图"></a>位图vs矢量图</h2><h3 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h3><ul><li>位图图像（bitmap），亦称为点阵图像或栅格图像，是由称作像素（图片元素）的单个点组成的。这些点可以进行不同的排列和染色以构成图样。当放大位图时，可以看见赖以构成整个图像的无数单个方块。扩大位图尺寸的效果是增大单个像素，从而使线条和形状显得参差不齐。然而，如果从稍远的位置观看它，位图图像的颜色和形状又显得是连续的。用数码相机拍摄的照片、扫描仪扫描的图片以及计算机截屏图等都属于位图。位图的特点是可以表现色彩的变化和颜色的细微过渡，产生逼真的效果，缺点是在保存时需要记录每一个像素的位置和颜色值，占用较大的存储空间。常用的位图处理软件有Photoshop（同时也包含矢量功能）</li></ul><h3 id="矢量图"><a href="#矢量图" class="headerlink" title="矢量图"></a>矢量图</h3><ul><li>矢量图[vector]，也叫做向量图，简单的说，就是缩放不失真的图像格式。矢量图是通过多个对象的组合生成的，对其中的每一个对象的纪录方式，都是以数学函数来实现的，也就是说，矢量图实际上并不是象位图那样纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一付矢量图的时候，软件对图形象对应的函数进行运算，将运算结果[图形的形状和颜色]显示给你看。无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同[不失真]。</li></ul><h3 id="位图与矢量图的区别"><a href="#位图与矢量图的区别" class="headerlink" title="位图与矢量图的区别"></a>位图与矢量图的区别</h3><ul><li>最大的区别，矢量图形与分辨率无关，可以将它缩放到任意大小和以任意分辨率在输出设备上打印出来，都不会影响清晰度，而位图是由一个一个像素点产生，当放大图像时，像素点也放大了，但每个像素点表示的颜色是单一的，所以在位图放大后就会出现咱们平时所见到的马赛克状。</li><li>位图表现的色彩比较丰富，可以表现出色彩丰富的图象，可逼真表现自然界各类实物；而矢量图形色彩不丰富，无法表现逼真的实物，矢量图常常用来表示标识、图标、Logo等简单直接的图像。</li><li>由于位图表现的色彩比较丰富，所以占用的空间会很大，颜色信息越多，占用空间越大，图像越清晰，占用空间越大；由于矢量图形表现的图像颜色比较单一，所以所占用的空间会很小。</li></ul><h3 id="字体图标的好处"><a href="#字体图标的好处" class="headerlink" title="字体图标的好处"></a>字体图标的好处</h3><ul><li><p>图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。图片还有一个缺点就是不能很好的进行“缩放”，因此，有时候在“响应式设计”中需要使用图像的最好解决方案就是不去使用图片。</p></li><li><p>很容易任意地缩放；</p></li><li>很容易地改变颜色；</li><li>很容易地产生阴影；</li><li>可以拥有透明效果；</li><li>一般来说，有先进的浏览器支持；</li><li>可以使用CSS来装饰（可以得到CSS很好支持）；</li><li>可以快速转化形态（做出一些变化，如 :hover等）；</li><li>可以做出跟图片一样可以做的事情（改变透明度、旋转度，等）；</li><li>本身体积更小，但携带的信息并没有削减。</li><li>不用每次修改都还得重新切图替换。</li></ul><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">@font-face&#123;</span><br><span class="line">  font-family: &apos;自定义的名字&apos;; </span><br><span class="line">  src: url(&apos;../font/字体名称.eot&apos;);</span><br><span class="line">  src:url(&apos;../font/字体名称.woff&apos;) format(&apos;woff&apos;),</span><br><span class="line">      url(&apos;../font/字体名称.ttf&apos;) format(&apos;truetype&apos;),</span><br><span class="line">      url(&apos;../font/字体名称.svg&apos;) format(&apos;svg&apos;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">h1&#123;</span><br><span class="line">  font-size:36px;</span><br><span class="line">  color:#ccc;</span><br><span class="line">  font-family: &quot;自定义的名字&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><ul><li>字体图标就是运用了css3的自定义字体</li><li>有专门的网站可以做字体</li><li>常使用阿里巴巴字体图标库</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-font/#disqus_thread</comments>
    </item>
    
    <item>
      <title>css3-selectors</title>
      <link>https://shulu520.com/css3/css3-selectors/</link>
      <guid>https://shulu520.com/css3/css3-selectors/</guid>
      <pubDate>Sun, 14 Jul 2019 03:44:38 GMT</pubDate>
      <description>
      
        硅谷css3-选择器-视频教程笔记
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;走到世界尽头。那风从哪里吹来，云又将飘向哪儿，世界的尽头在何方，想知道答案，唯有往前走。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="css的全称"><a href="#css的全称" class="headerlink" title="css的全称"></a>css的全称</h2><ul><li>Cascading Style Sheets </li><li>CSS3选择器规范地址：<a href="https://www.w3.org/TR/2011/REC-css3-selectors-20110929/" target="_blank" rel="noopener">https://www.w3.org/TR/2011/REC-css3-selectors-20110929/</a></li><li>CSS3选择最新选择器规范:  <a href="https://www.w3.org/TR/selectors" target="_blank" rel="noopener">https://www.w3.org/TR/selectors</a>  </li></ul><h2 id="样式表的组成"><a href="#样式表的组成" class="headerlink" title="样式表的组成"></a>样式表的组成</h2><ul><li>规则—&gt;选择器+声明块 —&gt;css属性+css属性值组成的键值对 </li></ul><h2 id="浏览器读取选择器的顺序"><a href="#浏览器读取选择器的顺序" class="headerlink" title="浏览器读取选择器的顺序"></a>浏览器读取选择器的顺序</h2><ul><li>从右往左 即从小范围开始找 </li></ul><h2 id="属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点"><a href="#属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点" class="headerlink" title="属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点"></a>属性继承：有的属性有继承性有的没有，学习选择器时要注意到这一点</h2><ul><li>继承：html元素可以从父元素那里继承一部分css属性，即使当前元素没有定义该属性。</li><li>比如：color有继承性 而border没有</li></ul><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul><li>通配符选择器        * { margin: 0; padding: 0; border: none; }</li><li>元素选择器        body { background: #eee; }</li><li>类选择器        .list { list-style: square; }</li><li>ID选择器        #list { width: 500px; margin: 0 auto; }</li><li>后代选择器        .list li { margin-top: 10px; background: #abcdef; }</li></ul><h2 id="基本选择器扩展"><a href="#基本选择器扩展" class="headerlink" title="基本选择器扩展"></a>基本选择器扩展</h2><ul><li>子元素选择器    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap &gt; .inner &#123;color: pink;&#125;</span><br><span class="line">也可称为直接后代选择器,此类选择器只能匹配到直接后代，不能匹配到深层次的后代元素</span><br></pre></td></tr></table></figure><ul><li>相邻兄弟选择器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap #first + .inner &#123;color: #f00;&#125;</span><br><span class="line">它只会匹配紧跟着的兄弟元素</span><br></pre></td></tr></table></figure><ul><li>通用兄弟选择器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#wrap #first ~ div &#123; border: 1px solid;&#125;</span><br><span class="line">它会匹配所有的兄弟元素(不需要紧跟)</span><br></pre></td></tr></table></figure><ul><li>选择器分组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1,h2,h3&#123;color: pink;&#125;  </span><br><span class="line">此处的逗号我们称之为结合符</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="存在和值属性选择器"><a href="#存在和值属性选择器" class="headerlink" title="存在和值属性选择器"></a>存在和值属性选择器</h3><ul><li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li><li>[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li><li>[attr~=val]：表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。</li></ul><h3 id="子串值属性选择器"><a href="#子串值属性选择器" class="headerlink" title="子串值属性选择器"></a>子串值属性选择器</h3><ul><li>[attr|=val] : 选择attr属性的值是val（包括val）或以val-开头的元素。</li><li>[attr^=val] : 选择attr属性的值以val开头（包括val）的元素。</li><li>[attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。</li><li>[attr*=val] : 选择attr属性的值中包含字符串val的元素。</li></ul><h2 id="伪类与伪元素选择器"><a href="#伪类与伪元素选择器" class="headerlink" title="伪类与伪元素选择器"></a>伪类与伪元素选择器</h2><ul><li>伪类：其出现是为了拿到元素的一些状态</li><li>伪元素：其出现是为了拿到css tree以外的元素</li></ul><h3 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h3><ul><li><strong>注意</strong>:link，:visited，:target是作用于链接元素的！</li><li>:link          表示作为超链接，并指向一个未访问的地址的所有锚</li><li>:visited    表示作为超链接，并指向一个已访问的地址的所有锚</li><li>:target     代表一个特殊的元素，它的id是URI的片段标识符 </li></ul><h3 id="使用-target实现最简单的选项卡"><a href="#使用-target实现最简单的选项卡" class="headerlink" title="使用 :target实现最简单的选项卡"></a>使用 :target实现最简单的选项卡</h3><ul><li>demo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//样式：</span><br><span class="line">div&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  color: red;</span><br><span class="line">  background: #ccc;</span><br><span class="line">  font-size: 33px;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">:target&#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;a href=&quot;#div1&quot;&gt;div1&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#div2&quot;&gt;div2&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#div3&quot;&gt;div3&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div3&quot;&gt;div3&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><ul><li><strong>注意</strong>:hover，:active基本可以作用于所有的元素！</li><li>:hover    表示悬浮到元素上</li><li><p>:active    表示匹配被用户激活的元素（点击按住时）</p></li><li><p>由于a标签的:link和:visited可以覆盖了所有a标签的状态，</p></li><li>所以当:link，:visited，:hover，:active同时出现在a标签</li><li><p>身上时 :link和:visited不能放在最后！！！</p></li><li><p>隐私与:visited选择器</p></li><li>只有下列的属性才能被应用到已访问链接：<ul><li>color</li><li>background-color</li><li>border-color </li></ul></li></ul><h3 id="表单相关伪类"><a href="#表单相关伪类" class="headerlink" title="表单相关伪类"></a>表单相关伪类</h3><ul><li>:enabled    匹配可编辑的表单</li><li>:disable    匹配被禁用的表单</li><li>:checked    匹配被选中的表单</li><li><p>:focus        匹配获焦的表单</p></li><li><p>demo单选按钮:checked</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//样式：</span><br><span class="line">label&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  border: 1px solid </span><br><span class="line">&#125;</span><br><span class="line">label &gt; span&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0</span><br><span class="line">&#125;</span><br><span class="line">input:checked + span&#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.float&#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dom结构</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;label class=&quot;float&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;love&quot;&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure><h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><ul><li><strong>index的值从1开始计数！！！！</strong></li><li>index可以为变量n(只能是n)</li><li>index可以为even odd</li><li>.wrap ele:nth-child(index)        表示匹配#wrap中第index的子元素 这个子元素必须是ele</li><li>.wrap ele:nth-of-type(index)    表示匹配#wrap中第index的ele子元素</li><li><strong>除此之外:nth-child和:nth-of-type有一个很重要的区别！！</strong></li><li><strong>nth-of-type以元素为中心！！！</strong></li><li>:nth-child(index)系列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:nth-child(index)系列</span><br><span class="line">:first-child</span><br><span class="line">:last-child</span><br><span class="line">:nth-last-child(index)</span><br><span class="line">:only-child(相当于:first-child:last-child 或者 :nth-child(1):nth-last-child(1)</span><br></pre></td></tr></table></figure><ul><li>:nth-of-type(index)系列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:nth-of-type(index)系列</span><br><span class="line">:first-of-type</span><br><span class="line">:last-of-type</span><br><span class="line">:nth-last-type(index)</span><br><span class="line">:only-of-type(相当于:first-of-type:last-of-type 或者 :nth-of-type(1):nth-last-of-type(1)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">- :not非</span><br></pre></td></tr></table></figure><p>:not    非<br>面试题：常用来做前后边框<br>div &gt; a:not(:last-of-type){<br>  border-right: 1px solid<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- :empty(内容必须是空的，有空格都不行，有attr没关系)</span><br><span class="line"></span><br><span class="line">- :nth-child选择要求相对严格些</span><br><span class="line">- :nth-of-type选择要求相对宽松些</span><br><span class="line">- 在一个容器中只有一种子元素则二者没什么区别</span><br><span class="line"></span><br><span class="line">## 伪元素</span><br><span class="line">- ::after 常用来清除浮动</span><br><span class="line">- ::before</span><br><span class="line">- ::firstLetter</span><br><span class="line">- ::firstLine</span><br><span class="line">- ::selection 鼠标选中后的自定义样式</span><br><span class="line"></span><br><span class="line">## css声明的优先级</span><br><span class="line">###选择器的特殊性</span><br><span class="line">- 选择器的特殊性由选择器本身的组件确定，特殊性值表述为4个部分，如    0,0,0,0</span><br><span class="line">- 一个选择器的具体特殊性如下确定：</span><br></pre></td></tr></table></figure><p>通配符选择器的特殊性为0,0,0,0<br>对于选择器中的给定的各个元素和伪元素，加0,0,0,1<br>对于选择器中给定的各个类属性，属性选择，或伪类，加 0,0,1,0<br>对于选择器中给定的ID属性值，加 0,1,0,0<br>内联声明的特殊性都是1,0,0,0</p><p>结合符对选择器特殊性没有一点贡献<br>继承没有特殊性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">- 特殊性 1,0,0,0 大于所有以0开头的特殊性(不进位)</span><br><span class="line">- 选择器的特殊性最终都会授予给其对应的声明</span><br><span class="line">- 如果多个规则与同一个元素匹配，而且有些声明互相冲突时，特殊性越大的越占优势</span><br><span class="line"></span><br><span class="line">- **注意：id选择器和属性选择器**</span><br></pre></td></tr></table></figure><p>div[id=”test”]（0,0,1,1） 和 #test（0,1,0,0）  </p><p><code>`</code></p><h3 id="重要声明-important"><a href="#重要声明-important" class="headerlink" title="重要声明 !important"></a>重要声明 !important</h3><ul><li>有时某个声明比较重要，超过了所有其他声明，css2.1就称之为重要声明</li><li>并允许在这些声明的结束分号之前插入  !important  来标志</li><li>必须要准确的放置  !important 否则声明无效。 </li><li><p>!important 总是要放在声明的最后，即分号的前面</p></li><li><p>标志为 !important的声明并没有特殊的特殊性值，不过要与非重要声明分开考虑。</p></li><li>实际上所有的重要声明会被浏览器分为一组，重要声明的冲突会在其内部解决</li><li>非重要声明也会被分为一组，非重要声明的冲突也会在其内部解决</li><li>如果一个重要声明与非重要声明冲突，胜出的总是重要声明</li></ul><h3 id="样式继承"><a href="#样式继承" class="headerlink" title="样式继承"></a>样式继承</h3><ul><li>继承没有特殊性，甚至连0特殊性都没有</li><li>0特殊性要比无特殊性来的强</li><li>也就是说通配符选择器的样式比继承来的样式特殊性高</li></ul><h3 id="css样式来源"><a href="#css样式来源" class="headerlink" title="css样式来源"></a>css样式来源</h3><ul><li>css样式的来源大致有三种<ul><li>创作人员</li><li>读者</li><li>用户代理   </li></ul></li></ul><h3 id="css样式权重"><a href="#css样式权重" class="headerlink" title="css样式权重"></a>css样式权重</h3><ul><li>读者的重要声明 即用户的操作</li><li>创作人员的重要声明 即我猿</li><li>创作人员的正常声明</li><li>读者的正常声明</li><li>用户代理的声明 即浏览器</li></ul><h3 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h3><ul><li>找出所有相关的规则，这些规则都包含一个选择器</li><li>计算声明的优先级<ul><li>先按来源排序</li><li>在按选择器的特殊性排序</li><li>最终按顺序</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/css3/css3-selectors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>axios</title>
      <link>https://shulu520.com/axios/axios/</link>
      <guid>https://shulu520.com/axios/axios/</guid>
      <pubDate>Thu, 04 Jul 2019 09:57:25 GMT</pubDate>
      <description>
      
        axios的学习笔记。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;每一个不曾起舞的日子，都是对生命的一种辜负。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li>基于promise用于浏览器和node.js的http客户端   </li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF(跨站请求伪造)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 发起一个GET请求 */</span><br><span class="line"></span><br><span class="line">// 可以参数直接拼接</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">// 或者这样</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 发起一个POST请求 */</span><br><span class="line"></span><br><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">  name: &apos;shulu&apos;,</span><br><span class="line">  age: &apos;18&apos;</span><br><span class="line">&#125;)</span><br><span class="line">.then((result) =&gt; &#123;</span><br><span class="line">  console.log(result)</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 同时发起多个请求 */</span><br><span class="line"> </span><br><span class="line">let sendArr = [axios.get(&apos;/user/123&apos;), axios.get(&apos;/user/123/pions&apos;)]</span><br><span class="line">axios.all(sendArr) </span><br><span class="line">.then(axios.spread((resA, resB) =&gt; &#123;</span><br><span class="line">  // 这里就可以拿到响应resA, resB</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 一些最最常用的请求配置项 */</span><br><span class="line"></span><br><span class="line">// 公共 URL</span><br><span class="line">axios.defaults.baseURL = &apos;https://some-domain.com/api/&apos; </span><br><span class="line"></span><br><span class="line">// 定义POST请求中请求主体向服务器发送内容的格式，这里是项目中常用的格式</span><br><span class="line">// 这里似乎有点问题，得再看看</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line"></span><br><span class="line">// 添加一个响应拦截器</span><br><span class="line">// 直接将响应的结果过滤得到我们最想要的data即响应主体数据</span><br><span class="line">axios.interceptors.response.use(res =&gt; res.data)</span><br><span class="line"></span><br><span class="line">// 自定义对HTTP响应状态码的处理</span><br><span class="line">axios.defaults.validateStatus = (status =&gt; &#123;……&#125;)</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/axios/axios/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tcp</title>
      <link>https://shulu520.com/tcp/tcp/</link>
      <guid>https://shulu520.com/tcp/tcp/</guid>
      <pubDate>Tue, 25 Jun 2019 15:37:04 GMT</pubDate>
      <description>
      
        经典tcp三次握手四次挥手简述。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;什么时候，我们之间才会握手呢。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="tcp-三次握手"><a href="#tcp-三次握手" class="headerlink" title="tcp 三次握手"></a>tcp 三次握手</h2><ul><li><p>我们来聊聊三次握手，我们看到这个问题的时候，第一个疑问是，啥叫握手？俩机器之间怎么还能握手呢？我怎么没发现我家电脑有手？</p></li><li><p>第二个疑问是，为啥要三次？两次不行吗？我觉得握一下就行了~为啥要握三次？流氓~<br>那么现在我们有没有清楚为什么不能是两次握手了呢？</p></li><li>我们假设现在有A 和 B 两个之间要进行通信往来。</li><li>第一次握手只能让B知道A能发，第二次握手让A知道了B能收能发，但是这个时候B还不知道A能收，所以A需要发出信息，证明自己收到了B的回复~所以必须要三次才能让两台机器都知道对方能收能发。</li></ul><h2 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h2><ul><li>以一句话来说明四次挥手的根本目的，四次挥手核心就在于四个时间节点，分别是：<ul><li>A告诉B发完了，</li><li>B告诉A知道发完了，(接收还需要一段时间的)</li><li>B告诉A收完了，</li><li>A告诉B知道收完了。</li></ul></li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/tcp/tcp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-others</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-others/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-others/</guid>
      <pubDate>Tue, 25 Jun 2019 03:52:31 GMT</pubDate>
      <description>
      
        mooc js设计模式--其他一些不常用的模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br>&lt;!–more–</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><ul><li>代码演示</li></ul><p><code></code></p><p>// 执行者(前线士兵)<br>class Receiver {<br>  exec() {<br>    console.log(‘前线士兵 执行命令’)<br>  }<br>} </p><p>// 命令对象(由鼓手传递 开打开打！！！)<br>class Command {<br>  constructor(receiver) {<br>    this.receiver = receiver<br>  }<br>  cmd() {<br>    console.log(‘命令对象开始传递 “开打开打！！！”‘)<br>    this.receiver.exec()<br>  }<br>}</p><p>// 发布命令者(将军)<br>class Invoker {<br>  constructor(command) {<br>    this.command = command<br>  }<br>  invoke() {<br>    console.log(‘发布命令: 开打开打！！！’)<br>    this.command.cmd()<br>  }<br>}<br>// 士兵<br>let soldier = new Receiver()<br>// 鼓手<br>let drummer = new Command(soldier)<br>// 将军<br>let general = new Invoker(drummer)<br>// 将军发布命令<br>general.invoke()</p><p><code>`</code></p><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-others/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-prototype</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-prototype/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-prototype/</guid>
      <pubDate>Mon, 24 Jun 2019 09:19:51 GMT</pubDate>
      <description>
      
        mooc js 设计模式之原型模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const prototype = &#123;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return `first-name: $&#123;this.firstName&#125;, last-name: $&#123;this.lastName&#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  say() &#123;</span><br><span class="line">    console.log(&apos;love you&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 克隆自己，生成一个新的对象</span><br><span class="line">// Object.create()用到了原型模式的思想</span><br><span class="line">// 基于一个原型创建一个对象</span><br><span class="line"></span><br><span class="line">let x = Object.create(prototype)</span><br><span class="line">x.lastName = &apos;shulu&apos;</span><br><span class="line">x.firstName = &apos;lqy love&apos;</span><br><span class="line"></span><br><span class="line">x.say() //love you</span><br><span class="line">console.log(&apos;x.getName() :&apos;, x.getName())</span><br><span class="line"></span><br><span class="line">//打印为 x.getName() : first-name: lqy love, last-name: shulu</span><br></pre></td></tr></table></figure><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-prototype/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-state</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-state/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-state/</guid>
      <pubDate>Mon, 24 Jun 2019 02:24:23 GMT</pubDate>
      <description>
      
        mooc js设计模式之状态模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;莫辜负这仅有一次的人生。</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="状态模式介绍"><a href="#状态模式介绍" class="headerlink" title="状态模式介绍"></a>状态模式介绍</h2><ul><li>一个对象有状态变化</li><li>每次状态变化都会触发一个逻辑</li><li><p>不能总是用if…else来控制</p></li><li><p>交通信号灯不同颜色的变化</p></li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li><p>有限状态机(finite)</p><ul><li>有限个状态，以及在这些个状态之间的变化</li><li>开源的库 javascript-state-machine</li></ul></li><li><p>写一个简单的Promise</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">// 收藏/取消收藏例子</span><br><span class="line">import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;import StateMachine from &apos;javascript-state-machine&apos;</span><br><span class="line"></span><br><span class="line">// 初始化状态机模型</span><br><span class="line">let fsm = new StateMachine(&#123;</span><br><span class="line">  init: &apos;收藏&apos;,</span><br><span class="line">  transitions: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;doStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &apos;deleteStore&apos;,</span><br><span class="line">      from: &apos;收藏&apos;,</span><br><span class="line">      to: &apos;取消收藏&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 监听执行收藏</span><br><span class="line">    onDoStore() &#123;</span><br><span class="line">      console.log(&apos;收藏成功&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听取消收藏</span><br><span class="line">    onDeleteStore() &#123;</span><br><span class="line">      console.log(&apos;已经取消收藏&apos;)// 可以post请求</span><br><span class="line">      updateText()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新按钮的文案</span><br><span class="line"></span><br><span class="line">function updateText () &#123;</span><br><span class="line">  btn.text(fsm.state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;)</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">  if (fsm.is(&apos;收藏&apos;)) &#123;</span><br><span class="line">    fsm.doStore() //这里的函数名与前面的name对应</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    fsm.deleteStore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化文案</span><br><span class="line">updateText()</span><br></pre></td></tr></table></figure><h2 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h2><ul><li>将状态对象和主题对象分离，状态的变化逻辑单独处理</li><li>符合开放封闭原则</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-state/#disqus_thread</comments>
    </item>
    
    <item>
      <title>js-design-mode-iterator</title>
      <link>https://shulu520.com/js-design-mode/js-design-mode-iterator/</link>
      <guid>https://shulu520.com/js-design-mode/js-design-mode-iterator/</guid>
      <pubDate>Sun, 23 Jun 2019 13:48:55 GMT</pubDate>
      <description>
      
        mooc js 设计模式之迭代器模式。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>&emsp;&emsp;</p></blockquote><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div><br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><strong>顺序访问一个集合</strong></li><li>使用者无需知道内部的结构(封装)</li><li><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener">菜鸟教程</a></li></ul><h2 id="代码实现-自己写的初级的-后面es6提供的完善的-for-of"><a href="#代码实现-自己写的初级的-后面es6提供的完善的-for-of" class="headerlink" title="代码实现(自己写的初级的 后面es6提供的完善的 for of)"></a>代码实现(自己写的初级的 后面es6提供的完善的 for of)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 迭代器(遍历器)</span><br><span class="line">class Iterator &#123;</span><br><span class="line">  constructor(container) &#123;</span><br><span class="line">    this.list = container.list</span><br><span class="line">    this.index = 0</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    if (this.hasNext()) &#123;</span><br><span class="line">      return this.list[this.index++]</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    if (this.index &gt;= this.list.length) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125; </span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 迭代器的容器</span><br><span class="line">class Container &#123;</span><br><span class="line">  constructor(list) &#123;</span><br><span class="line">    this.list = list</span><br><span class="line">  &#125;</span><br><span class="line">  getIterator() &#123;</span><br><span class="line">    return new Iterator(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr = [1,2,3,4,5,6]</span><br><span class="line">let container = new Container(arr)</span><br><span class="line">let iterator = container.getIterator()</span><br><span class="line"></span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">  console.log(&apos;iterator.next() :&apos;, iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"></span><br><span class="line"> iterator.next() : 1 </span><br><span class="line"> iterator.next() : 2 </span><br><span class="line"> iterator.next() : 3 </span><br><span class="line"> iterator.next() : 4 </span><br><span class="line"> iterator.next() : 5 </span><br><span class="line"> iterator.next() : 6 </span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="es6-Iterator"><a href="#es6-Iterator" class="headerlink" title="es6 Iterator"></a>es6 Iterator</h2><ul><li><p>有序集合的数据如:</p><ul><li>Array </li><li>Map </li><li>Set </li><li>String </li><li>TypedArray </li><li>arguments</li><li>Nodelist </li></ul></li><li><p>以上数据类型，都有[Symbol.iterator]这个属性 </p></li><li>属性值是函数，执行函数返回一个迭代器</li><li>这个迭代器就有next方法可以顺序迭代子元素</li><li>可以运行Array.prototype[Symbol.iterator]来测试</li><li>注意 object 不是有序集合 可以用Map代替</li></ul><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//封装一个简单的each方法</span><br><span class="line">function each (data) &#123;</span><br><span class="line">  //data是可遍历的 即data[Symbol.iterator]有值</span><br><span class="line">  for(let item of data) &#123;</span><br><span class="line">    console.log(&apos;item :&apos;, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试几种可遍历的数据类型</span><br><span class="line">let str = &apos;love&apos;</span><br><span class="line">let arr = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">let map = new Map()</span><br><span class="line">map.set(0, &quot;zero&quot;)</span><br><span class="line">map.set(1, &quot;one&quot;)</span><br><span class="line"></span><br><span class="line">let set = new Set([6,7,8,9])</span><br><span class="line"></span><br><span class="line">each(str)</span><br><span class="line">each(arr)</span><br><span class="line">each(map)</span><br><span class="line">each(set)</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> item : l </span><br><span class="line"> item : o </span><br><span class="line"> item : v </span><br><span class="line"> item : e </span><br><span class="line"></span><br><span class="line"> item : 1 </span><br><span class="line"> item : 2 </span><br><span class="line"> item : 3 </span><br><span class="line"> item : 4 </span><br><span class="line"></span><br><span class="line"> item : [ 0, &apos;zero&apos; ] </span><br><span class="line"> item : [ 1, &apos;one&apos; ] </span><br><span class="line"></span><br><span class="line"> item : 6 </span><br><span class="line"> item : 7 </span><br><span class="line"> item : 8 </span><br><span class="line"> item : 9</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="Map-数据结构"><a href="#Map-数据结构" class="headerlink" title="Map 数据结构"></a>Map 数据结构</h2><ul><li>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</li><li>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</li><li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li><li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li><li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li><li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Obj- ect.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li><li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li></ul><p><div style="width:100%;height:1px;background-color:pink;opacity:.7"></div></p><center><img width="50px" height="50px" src="https://www.z4a.net/images/2019/05/27/20190527-20267.th.png" alt="QQ" border="0"><a target="_blank" style="color:skyblue;font-weight:bold;" href="http://wpa.qq.com/msgrd?v=3&uin=2642816105&site=qq&menu=yes">有事您Q我👇</a></center>]]></content:encoded>
      
      <comments>https://shulu520.com/js-design-mode/js-design-mode-iterator/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>梦不成</title>
    <link>https://shulu520.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>君子生非异也，善假于物也.</description>
    <pubDate>Sat, 20 Apr 2019 14:20:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>H5音悦台笔记</title>
      <link>https://shulu520.com/2019/04/22/guigu-h5-music/</link>
      <guid>https://shulu520.com/2019/04/22/guigu-h5-music/</guid>
      <pubDate>Mon, 22 Apr 2019 14:19:33 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;面向对象面向君，不负代码不负卿。&quot;&gt;&lt;a href=&quot;#面向对象面向君，不负代码不负卿。&quot; class=&quot;headerlink&quot; title=&quot;面向对象面向君，不负代码不负卿。&quot;&gt;&lt;/a&gt;面向对象面向君，不负代码不负卿。&lt;/h4&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="面向对象面向君，不负代码不负卿。"><a href="#面向对象面向君，不负代码不负卿。" class="headerlink" title="面向对象面向君，不负代码不负卿。"></a>面向对象面向君，不负代码不负卿。</h4> <a id="more"></a><h4 id="第一天-像素-适配"><a href="#第一天-像素-适配" class="headerlink" title="第一天 像素 适配"></a>第一天 像素 适配</h4><ul><li>四像素  三视口  两操作  一比例</li></ul><ul><li><img src="/2019/04/22/guigu-h5-music/3.png" alt="移动价值链"></li><li><img src="/2019/04/22/guigu-h5-music/1.png" alt="像素比 "></li><li><img src="/2019/04/22/guigu-h5-music/2.png" alt="像素总结"></li><li><img src="/2019/04/22/guigu-h5-music/1.jpg" alt="布局视口"></li><li><img src="/2019/04/22/guigu-h5-music/2.jpg" alt="完美视口 "> 太大的元素会出现滚动条，想要的</li><li><img src="/2019/04/22/guigu-h5-music/4.jpg" alt="冲突"></li><li><img src="/2019/04/22/guigu-h5-music/3.jpg" alt="最终的meta 标签"></li><li><img src="/2019/04/22/guigu-h5-music/5.jpg" alt="四个像素"></li><li><img src="/2019/04/22/guigu-h5-music/6.jpg" alt="em"></li><li><img src="/2019/04/22/guigu-h5-music/7.jpg" alt="rem"></li><li><img src="/2019/04/22/guigu-h5-music/8.jpg" alt="rem最终适配"></li><li><img src="/2019/04/22/guigu-h5-music/9.jpg" alt="rem适配原理"></li><li><img src="/2019/04/22/guigu-h5-music/10.jpg" alt="viewport适配即原理优缺点"></li></ul><ul><li><p>rem最终适配代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line">var styleNode = document.createElement(&quot;style&quot;);</span><br><span class="line">var w = document.documentElement.clientWidth/16;</span><br><span class="line">styleNode.innerHTML=&quot;html&#123;font-size:&quot;+w+&quot;px!important&#125;&quot;</span><br><span class="line">document.head.appendChild(styleNode);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>1物理像素的实现 用媒体查询的方法  一般用伪元素来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;/&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">*&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#test:before&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">bottom: 0px;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">display: block;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 1px;</span><br><span class="line">background: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media only screen and (-webkit-device-pixel-ratio:2 ) &#123;</span><br><span class="line">#test:before&#123;</span><br><span class="line">transform: scaleY(.5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (-webkit-device-pixel-ratio:3 ) &#123;</span><br><span class="line">#test:before&#123;</span><br><span class="line">transform: scaleY(.33333333333);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="第二天-移动端基础事件"><a href="#第二天-移动端基础事件" class="headerlink" title="第二天 移动端基础事件"></a>第二天 移动端基础事件</h4><ul><li>querySelectorAll() 匹配满足选择器的所有元素</li><li><p>改变dom结构后一定得再次获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.onload=function()&#123;</span><br><span class="line">//querySelectorAll:获取静态列表</span><br><span class="line">var itemNodes  = document.querySelectorAll(&quot;.item&quot;); // 第一次获取</span><br><span class="line">console.log(itemNodes.length)</span><br><span class="line">document.body.innerHTML+=&quot;&lt;div class=&apos;item&apos;&gt;&lt;/div&gt;&quot;;</span><br><span class="line">itemNodes  = document.querySelectorAll(&quot;.item&quot;);  // 改变dom结构后一定得再次获取</span><br><span class="line">console.log(itemNodes)</span><br><span class="line">for(var i=0;i&lt;itemNodes.length;i++)&#123;</span><br><span class="line">itemNodes[i].style.background=&quot;pink&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>querySelector 获取 querySelectorAll 匹配到的第一个</p><h4 id="触屏事件-监听用-addEventListener"><a href="#触屏事件-监听用-addEventListener" class="headerlink" title="触屏事件 监听用 addEventListener"></a>触屏事件 监听用 addEventListener</h4><figure class="highlight plain"><figcaption><span>pc端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">touchstartmousedown</span><br><span class="line">touchmovemousemove</span><br><span class="line">不可能单独触发可以单独触发</span><br><span class="line">touchendmouseup</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">var item = document.querySelector(&quot;.item&quot;);</span><br><span class="line">item.addEventListener(&quot;touchstart&quot;,function()&#123;</span><br><span class="line">console.log(&quot;touchstart&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移动端事件默认行为 长按选中，橡皮筋效果（下拉）等</p></li><li><p>全面禁止事件默认行为 在 touchstart事件上，即手指触摸上去的时候就开始禁止</p><figure class="highlight plain"><figcaption><span>一上来就这段代码，全面禁止事件默认行为</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.onload=function()&#123;</span><br><span class="line">document.addEventListener(&quot;touchstart&quot;,function(ev)&#123;</span><br><span class="line">ev=ev||event;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;)</span><br><span class="line">// 单独按需开启 </span><br><span class="line">item.addEventListener(&quot;touchstart&quot;,function(ev)&#123;</span><br><span class="line">ev=ev||event;</span><br><span class="line">ev.stopPropagation();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>右键菜单的阻止与开启 与自定义右键</p><figure class="highlight plain"><figcaption><span>全局阻止右键</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">document.oncontextmenu=function()&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">// 单独按需开启浏览器的右键菜单</span><br><span class="line">var inner = document.querySelector(&quot;#inner&quot;);</span><br><span class="line">inner.oncontextmenu=function(ev)&#123;</span><br><span class="line">ev.stopPropagation();</span><br><span class="line">&#125;</span><br><span class="line">// 也可以自定义右键菜单</span><br><span class="line"></span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">document.oncontextmenu=function(ev)&#123;</span><br><span class="line">ev = ev||event;</span><br><span class="line">var x = ev.clientX;</span><br><span class="line">var y = ev.clientY;</span><br><span class="line"></span><br><span class="line">var wrap =document.querySelector(&quot;#wrap&quot;);</span><br><span class="line">wrap.style.display=&quot;block&quot;;</span><br><span class="line">wrap.style.left = x+&quot;px&quot;;</span><br><span class="line">wrap.style.top = y+&quot;px&quot;;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">// 单击消失</span><br><span class="line">document.onclick=function()&#123;</span><br><span class="line">var wrap =document.querySelector(&quot;#wrap&quot;);</span><br><span class="line">wrap.style.display=&quot;none&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件点透<br>  pc端的事件可以在移动端触发<br>  PC端事件有300毫秒延迟<br>  移动端事件不会有延迟</p></li><li><p>移动端 a 标签跳转方案 并解决误触</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 阻止事件默认行为</span><br><span class="line">document.addEventListener(&quot;touchstart&quot;,function(ev)&#123;</span><br><span class="line">ev=ev||event;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;)</span><br><span class="line">//移动端a标签的跳转方案  解决误触</span><br><span class="line">var aNodes = document.querySelectorAll(&quot;a&quot;);</span><br><span class="line">for(var i=0;i&lt;aNodes.length;i++)&#123;</span><br><span class="line">aNodes[i].addEventListener(&quot;touchstart&quot;,function()&#123;</span><br><span class="line">this.isMoved=false;</span><br><span class="line">&#125;)</span><br><span class="line">aNodes[i].addEventListener(&quot;touchmove&quot;,function()&#123;</span><br><span class="line">this.isMoved=true;</span><br><span class="line">&#125;)</span><br><span class="line">aNodes[i].addEventListener(&quot;touchend&quot;,function()&#123;</span><br><span class="line">if(!this.isMoved)&#123;</span><br><span class="line">location.href=this.href;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>event :</p></li><li>//changedTouches: 触发当前事件的手指列表,  <em>最常用</em><br>//targetTouches: 触发当前事件时元素上的手指列表<br>//touches: 触发当前事件时屏幕上的手指列表<h4 id="常见问题-及解决方法"><a href="#常见问题-及解决方法" class="headerlink" title="常见问题 及解决方法"></a>常见问题 及解决方法</h4></li><li><p>禁止电话与邮箱,添加标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>按需开启 电话与邮箱</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   &lt;a href=&quot;tel:1383838438&quot;&gt;1383838438&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;mailto:2642816105@qq.com&quot;&gt;2642816105&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li><p>解决连接按钮高亮问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">text-decoration:none; // 去下划线</span><br><span class="line">webkit-tap-highlight-color:rgba(0,0,0,0); // 去背景高亮，只需字体高亮</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决圆角过圆的问题 加属性 webkit-appearance:none 即可</p></li><li>fontboosting 的问题 及显示的字体与设置的大小不一致的现象，加属性 max-height:999999px;即可</li><li>无缝华屏</li><li>移动端清除浮动：父元素ul元素上加 overflow:hidden 即可</li><li>表单：<pre><code>表单高亮：outline:none;表单内阴影：boder:none;</code></pre><h4 id="划屏相关"><a href="#划屏相关" class="headerlink" title="划屏相关"></a>划屏相关</h4></li><li>在谁上面划，即划屏包裹slide-wrapper</li><li>划的内容 即slide-content</li></ul><h4 id="元素排到一行的方法"><a href="#元素排到一行的方法" class="headerlink" title="元素排到一行的方法"></a>元素排到一行的方法</h4><ul><li>浮动 父容器宽度不够会自动换行</li><li>另一种技巧<br>  父容器white-space :nowrap;<br>  子元素: display: inline-block;<h4 id="橡皮筋效果"><a href="#橡皮筋效果" class="headerlink" title="橡皮筋效果"></a>橡皮筋效果</h4></li><li>减少每次move 的有效距离，最终的有效距离还是一直在增大</li></ul><h4 id="混合-继承"><a href="#混合-继承" class="headerlink" title="混合  继承"></a>混合  继承</h4><ul><li>可以单独定义一系列通用的样式，在需要的时候进行调用。从而减少代码的重复</li><li><p>混合：简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义混合 --&gt;</span><br><span class="line">.mixin()&#123;</span><br><span class="line">&lt;!-- 规则集 --&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 使用混合 --&gt;</span><br><span class="line">#text1&#123;</span><br><span class="line">&lt;!-- 相当于将规则集里面的代码cv到这里 --&gt;</span><br><span class="line">&lt;!-- 每次使用都是将代码复制到相应位置 --&gt;</span><br><span class="line">&lt;!-- 使用几次就有几处相同的代码 --&gt;</span><br><span class="line">.mixin();</span><br><span class="line">&#125;#text2&#123;</span><br><span class="line">.mixin();</span><br><span class="line">&#125;#text3&#123;</span><br><span class="line">.mixin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 多处使用相同的混合 这样写好一点-（手动写）-&gt;</span><br><span class="line">#text1,#text2,#text3&#123;</span><br><span class="line">.mixin() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承：性能好一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义继承 --&gt;</span><br><span class="line">.extend&#123;</span><br><span class="line">&lt;!-- 规则集 --&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 使用继承 --&gt;</span><br><span class="line">#text1&#123;</span><br><span class="line">&amp;::extend(.extend);</span><br><span class="line">&#125;#text2&#123;</span><br><span class="line">&amp;::extend(.extend);</span><br><span class="line">&#125;#text3&#123;</span><br><span class="line">&amp;::extend(.extend);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 最终编译为 --&gt;</span><br><span class="line">#text1,#text2,#text3&#123;</span><br><span class="line">&lt;!-- 规则集 ，相当于将规则集里面的代码cv到这里--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/22/guigu-h5-music/#disqus_thread</comments>
    </item>
    
    <item>
      <title>麦克斯韦</title>
      <link>https://shulu520.com/2019/04/20/MathJax/</link>
      <guid>https://shulu520.com/2019/04/20/MathJax/</guid>
      <pubDate>Sat, 20 Apr 2019 15:12:31 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;$$&lt;br&gt;\begin{eqnarray}&lt;br&gt;\nabla\cdot\vec{E} &amp;amp;=&amp;amp; \frac{\rho}{\epsilon_0} \&lt;br&gt;\nabla\cdot\vec{B} &amp;amp;=&amp;amp; 0 \&lt;br&gt;\nabla\times\
        
      
      </description>
      
      <content:encoded><![CDATA[<p>$$<br>\begin{eqnarray}<br>\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \<br>\nabla\cdot\vec{B} &amp;=&amp; 0 \<br>\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \<br>\nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br>\end{eqnarray}<br>$$</p>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/20/MathJax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://shulu520.com/2019/04/20/hello-world/</link>
      <guid>https://shulu520.com/2019/04/20/hello-world/</guid>
      <pubDate>Sat, 20 Apr 2019 14:23:44 GMT</pubDate>
      <description>
      
        本篇文章为博客搭建测试篇。这里是对文章的表述说明。移动端试试双击效果
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>故事的开头，多是惊魂一瞥，然后一眼万年。故事的结局，多是渐行渐远，江湖不见。</p></blockquote><h4 id="在-xxx-md文件插入html效果测试"><a href="#在-xxx-md文件插入html效果测试" class="headerlink" title="在 xxx.md文件插入html效果测试"></a>在 xxx.md文件插入html效果测试</h4><ul><li>直接写html 即可</li></ul><font size="4"> 这里输入文字，自定义字体大小 </font><br><font color="#FF0000"> 这里输入文字，自定义字体颜色</font><br><span style="background-color: #ff6600;">这里输入文字，自定义字体背景色</span><br><font color="#000000" size="4"><span style="background-color: #ADFF2F;">这是综合起来的效果 </span></font><br><font color="#FFFFFF" size="4"><span style="background-color: #68228B;">这是综合起来的效果2 </span></font><h4 id="首行缩进效果测试"><a href="#首行缩进效果测试" class="headerlink" title="首行缩进效果测试"></a>首行缩进效果测试</h4><ul><li>其中的 <code>&amp;emsp;&amp;emsp;</code> 即缩进两个字<code>最常见</code></li></ul><p>人们常觉得准备的阶段是在浪费时间，只有当真正机会来临，而自己没有能力把握的时候，才能觉悟自己平时没有准备才是浪费了时间。———罗曼·罗兰</p><ul><li>半方大的空白<code>&amp;ensp;</code>或<code>&amp;#8194</code>;<br>&ensp;人们常觉得准备的阶段是在浪费时间，只有当真正机会来临，而自己没有能力把握的时候，才能觉悟自己平时没有准备才是浪费了时间。———罗曼·罗兰<br>内容充实的生命就是长久的生命。我们要以行为而不是以时间来衡量生命。 ——小塞涅卡</li><li>全方大的空白<code>&amp;emsp;</code>或<code>&amp;#8195</code>;<br>&emsp;内容充实的生命就是长久的生命。我们要以行为而不是以时间来衡量生命。 ——小塞涅卡</li></ul><p>&emsp;&emsp;内容充实的生命就是长久的生命。我们要以行为而不是以时间来衡量生命。 ——小塞涅卡</p><ul><li>不断行的空白格<code>&amp;nbsp;</code>或<code>&amp;#160</code>;<br>&nbsp;以后无论我去哪我都把你带着我看账你帮我打算盘我谈生意你帮我出主意一起把吴家东院发扬光大做到陕西第一天下第一。———那年花开月正圆周莹经典台词<a id="more"></a></li></ul><h4 id="插入表格效果测试"><a href="#插入表格效果测试" class="headerlink" title="插入表格效果测试"></a>插入表格效果测试</h4><ul><li>直接写html标签也可以，但是这种的效果更佳</li></ul><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>max</td><td>求最大值</td></tr><tr><td>min</td><td>求最小值</td></tr></tbody></table><h4 id="文章内自定义链接效果测试"><a href="#文章内自定义链接效果测试" class="headerlink" title="文章内自定义链接效果测试"></a>文章内自定义链接效果测试</h4><ul><li>那就来个我的博客网址吧<br><a href="https://shulu520.com">myblog</a></li></ul><p>#### </p><p>md   语法<br>加粗   双层<em><br>倾斜    单层</em><br>加粗倾斜   三层*<br>删除线  双层~~<br>单层引用  &gt;加内容</p><p>分割线  三个或者三个以上的 - 或者 <em> 都可以<br>图片  ![文字]（地址）<br>超链接  <a href="地址">文字</a><br>无序列表  用 - + </em> 任何一种都可以<br>有序列表  数字加点<br>列表嵌套  上下级之间 敲三个空格<br>表格  :<br>|表头|表头|表头|<br> |—|:–:|—: |<br>|内容|内容|内容 |</p><p>注：第二行分割表头和内容。<br>-有一个就行，为了对齐，多加了几个<br> 文字默认居左<br>-两边加：表示文字居中<br> -右边加：表示文字居右</p><p>代码:<br>单行:<br>  、代码、</p><p>代码块  :<br>、、、<br>     代码<br>、、、</p>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/20/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue 学习笔记</title>
      <link>https://shulu520.com/2019/04/17/vuenote/</link>
      <guid>https://shulu520.com/2019/04/17/vuenote/</guid>
      <pubDate>Wed, 17 Apr 2019 12:00:21 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。&quot;&gt;&lt;a href=&quot;#人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。&quot; class=&quot;headerlink&quot; title=&quot;人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。&quot;&gt;&lt;/a&gt;人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。&lt;/h4&gt;&lt;h4 id=&quot;要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……&quot;&gt;&lt;a href=&quot;#要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……&quot; class=&quot;headerlink&quot; title=&quot;要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……&quot;&gt;&lt;/a&gt;要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……&lt;/h4&gt;&lt;h4 id=&quot;但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。&quot;&gt;&lt;a href=&quot;#但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。&quot; class=&quot;headerlink&quot; title=&quot;但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。&quot;&gt;&lt;/a&gt;但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。&lt;/h4&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。"><a href="#人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。" class="headerlink" title="人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。"></a>人生即在于体验，而体验源于去尝试，去折腾，去改变，去塑新。</h4><h4 id="要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……"><a href="#要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……" class="headerlink" title="要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……"></a>要知道：过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……</h4><h4 id="但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。"><a href="#但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。" class="headerlink" title="但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。"></a>但是，人生最后悔的事情就是：我本可以。生活也好，职场也罢，亦同此理；编程则更如其是。</h4><a id="more"></a><h4 id="Vue-的特点"><a href="#Vue-的特点" class="headerlink" title="Vue 的特点"></a>Vue 的特点</h4><ul><li>遵循 MVVM 模式  即MVVM 模式的一种实现</li><li>编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发</li><li>它本身只关注 UI, 可以轻松引入 vue 插件（依赖vue）或其它第三库(不依赖vue)开发项目</li></ul><h4 id="MVVM-的理解"><a href="#MVVM-的理解" class="headerlink" title="MVVM  的理解"></a>MVVM  的理解</h4><ul><li>M 即 model 模型,  数据对象（data）</li><li>V 即 view 视图，模板页面</li><li>VM 即 viewModel 视图模型  是vue的实例  dom监听  数据绑定<br>  <img src="/2019/04/17/vuenote/vuenote_files/3.jpg" alt></li></ul><h4 id="组件-即-局部功能界面-，是提供某一完整功能的模块"><a href="#组件-即-局部功能界面-，是提供某一完整功能的模块" class="headerlink" title="组件 即 局部功能界面  ，是提供某一完整功能的模块"></a>组件 即 局部功能界面  ，是提供某一完整功能的模块</h4><h4 id="模板的理解：动态的html页面，包含了一些js语法代码"><a href="#模板的理解：动态的html页面，包含了一些js语法代码" class="headerlink" title="模板的理解：动态的html页面，包含了一些js语法代码"></a>模板的理解：动态的html页面，包含了一些js语法代码</h4><h4 id="vue-扩展组件"><a href="#vue-扩展组件" class="headerlink" title="vue 扩展组件"></a>vue 扩展组件</h4><ul><li>vue-cli: vue 脚手架</li><li>axios: ajax 请求</li><li>vue-router: 路由</li><li>vuex: 状态管</li><li>vue-lazyload: 图片懒加载</li><li>vue-scroller: 页面滑动相关</li><li>mint-ui: 基于 vue 的 UI 组件库(移动端)</li><li>element-ui: 基于 vue 的 UI 组件库(PC 端)</li></ul><h4 id="编程方式"><a href="#编程方式" class="headerlink" title="编程方式"></a>编程方式</h4><ul><li>命令式 如 jquery </li><li>声明式 如 vue<h4 id="数组的扩展-array-some-和array-every-区别"><a href="#数组的扩展-array-some-和array-every-区别" class="headerlink" title="数组的扩展-array.some()和array.every()区别"></a>数组的扩展-array.some()和array.every()区别</h4></li><li>ome():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li><li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；<h4 id="挂载元素app"><a href="#挂载元素app" class="headerlink" title="挂载元素app"></a>挂载元素app</h4></li><li>new Vue({<br>  el :’#app’<br>  });<br> new vue({}).$moute(‘#app’) 用于单元测试<h4 id="vue-指令"><a href="#vue-指令" class="headerlink" title="vue 指令"></a>vue 指令</h4></li><li>v-bind  即 :   强制 动态 数据绑定（属性）</li><li>v-on    即 @   绑定事件监听</li><li>v-html  内部innerHTML    XSS攻击  内容必须是可信赖的</li></ul><h4 id="vue-计算属性-computed"><a href="#vue-计算属性-computed" class="headerlink" title="vue 计算属性 computed"></a>vue 计算属性 computed</h4><ul><li>什么时候执行 ： 初始化显示，/ 相关的data 数据属性发生变化时触发</li><li>各个方法的返回值作为相关的属性值</li><li>get 回调函数，当需要读取当前属性值的时候回调，计算并返回当前属性的值</li><li>set 回调函数，<code>监视</code>当前属性值的变化，当属性值变化时回调，更新相关的属性数据</li><li>计算属性，<code>存在缓存</code>，多次读取，只调用一次getter计算，<code>性能好</code>,</li><li>全选时可用计算属性</li></ul><h4 id="vue-的方法-methods"><a href="#vue-的方法-methods" class="headerlink" title="vue 的方法 methods"></a>vue 的方法 methods</h4><ul><li>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。</li><li>然而，不同的是计算属性是基于它们的依赖进行缓存的。只在相关依赖发生改变时它们才会重新求值</li><li>相比之下，每当触发重新渲染时，调用方法将<em>总会再次执行函数</em></li><li>如果你不希望有缓存，请用方法来替代</li></ul><h4 id="vue-的watch"><a href="#vue-的watch" class="headerlink" title="vue 的watch"></a>vue 的watch</h4><ul><li>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器</li><li>当需要在数据变化时<em>执行异步或开销较大</em>的操作时，这个方式是最有用的</li><li><img src="/2019/04/17/vuenote/vuenote_files/4.jpg" alt></li></ul><h4 id="绑定-style-class"><a href="#绑定-style-class" class="headerlink" title="绑定 style class"></a>绑定 style class</h4><ul><li>:class=”xxx”   xxx是字符串或对象</li><li>:style=”xxx”   xxx是对象</li></ul><h4 id="对象更新"><a href="#对象更新" class="headerlink" title="对象更新"></a>对象更新</h4><ul><li>完全跟新 即重新写这个对象</li><li>补充更新 vm.$set(要跟新的对象名,补充的属性名,属性值)</li></ul><h4 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h4><ul><li>变异方法（vue重写原生的方法）即以下这些方法已不再是原生的方法</li><li>push  pop  shift unshift splice sort reverse 使用它们会触发视图更新</li><li><em>注意事项</em>： 利用索引直接设置一个项时/修改数组的长度时 vue不能检测到数组变化</li></ul><h4 id="常用事件修饰符"><a href="#常用事件修饰符" class="headerlink" title="常用事件修饰符"></a>常用事件修饰符</h4><ul><li>阻止事件冒泡 如@click.stop=”XXX”   传统方法 e.stopPropagation</li><li>取消事件默认行为 如 @click.prevent=”xxx”  传统方法 e.preventDefault</li><li>@click.once=”xxx”   点击事件将只会触发一次</li></ul><h4 id="常用按键修饰符"><a href="#常用按键修饰符" class="headerlink" title="常用按键修饰符"></a>常用按键修饰符</h4><ul><li>抬起某键时，执行操作 如按回车  @keyup.enter=”xxx” <h4 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h4></li><li>left </li><li>right</li><li>middle</li></ul><h4 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h4><ul><li>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</li><li>ctrl  alt shift   meta</li></ul><h4 id="表单数据的自动收集"><a href="#表单数据的自动收集" class="headerlink" title="表单数据的自动收集"></a>表单数据的自动收集</h4><ul><li>使用 v-model</li></ul><h4 id="vue实例的-生命周期（钩子函数）-大致有三个阶段"><a href="#vue实例的-生命周期（钩子函数）-大致有三个阶段" class="headerlink" title="vue实例的 生命周期（钩子函数） 大致有三个阶段"></a>vue实例的 生命周期（钩子函数） 大致有三个阶段</h4><ul><li>初始化阶段 beforeCreate created beforeMount mounted  只执行一次</li><li>更新阶段 beforeUpdate  updated  执行N次</li><li>销毁阶段 beforeDestory   destoryed</li><li>常用的有1：<code>mounted</code> （挂载方法） 发送<em>Ajax</em> 请求,获取真实dom ，执行定时器等异步任务<pre><code>2： `beforeDestory`  收尾工作，如清除定时器，解绑操作等</code></pre></li></ul><h4 id="vue-过渡-amp-动画"><a href="#vue-过渡-amp-动画" class="headerlink" title="vue 过渡&amp;动画"></a>vue 过渡&amp;动画</h4><ul><li>过渡 ：transition</li><li>显示时的效果：xxx-enter-active{…}</li><li>隐藏时的效果 ：xxx-leave-active{…} </li><li>其中xxx表示 transition元素的name 属性值</li><li>动画 ：animation</li></ul><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><ul><li>vue.filter(‘自定义函数名’，() =&gt; {…})</li></ul><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ul><li>ref 为某个元素指定一个唯一的标识，vue对象通过$refs属性访问这个元素对象</li><li>v-cloak 防止闪现表达式 与css属性选择器配合 [v-cloak] {display:none}</li></ul><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><ul><li>全局指令：</li><li>vue.directive(‘指令名’，function(el,binding){…})</li><li>参数el指属性所在的标签对象  binding包含指令相关的数据对象</li><li>局部指令：<br>  在vue实例选项中配置directives:{‘指令名’，(el,binding) =&gt; {…},others}</li></ul><h4 id="vue-自定义插件-plugin"><a href="#vue-自定义插件-plugin" class="headerlink" title="vue 自定义插件 plugin"></a>vue 自定义插件 plugin</h4><ul><li>Vue 插件是一个包含 install 方法的对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> 自定义 Vue 插件 包在匿名函数自执行里面</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line">const MyPlugin = &#123;&#125;;</span><br><span class="line">MyPlugin.install = function (Vue, options) &#123;</span><br><span class="line">// 1. 添加全局方法或属性</span><br><span class="line">Vue.myGlobalMethod = function () &#123;</span><br><span class="line">    alert(&apos;Vue 函数对象方法执行&apos;)</span><br><span class="line">&#125;;</span><br><span class="line">// 2. 添加全局资源</span><br><span class="line">Vue.directive(&apos;my-directive&apos;, function (el, binding) &#123;</span><br><span class="line">el.innerHTML = &quot;MyPlugin my-directive &quot; + binding.value</span><br><span class="line">&#125;);</span><br><span class="line">// 3. 添加实例方法</span><br><span class="line">Vue.prototype.$myMethod = function () &#123;</span><br><span class="line">alert(&apos;vue 实例对象方法执行&apos;)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">window.MyPlugin = MyPlugin;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>页面使用插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">&lt;!--使用自定义指令--&gt;</span><br><span class="line">&lt;p v-my-directive=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;vue-myPlugin.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//声明使用自定义插件</span><br><span class="line">Vue.use(MyPlugin)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#demo&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">msg: &apos;atguigu&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//调用自定义的静态方法</span><br><span class="line"></span><br><span class="line">Vue.myGlobalMethod()</span><br><span class="line">//调用自定义的对象方法</span><br><span class="line"></span><br><span class="line">vm.$myMethod()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h4><ul><li>全局组件<br>  <img src="/2019/04/17/vuenote/vuenote_files/6.jpg" alt><br>  <img src="/2019/04/17/vuenote/vuenote_files/5.jpg" alt></li><li>局部组件<h4 id="vue-组件间通信"><a href="#vue-组件间通信" class="headerlink" title="vue 组件间通信"></a>vue 组件间通信</h4></li><li><img src="/2019/04/17/vuenote/vuenote_files/7.jpg" alt></li><li><code>父传向子</code> props<ol><li>在组件内声明所有的 props</li><li>方式一: 只指定名称<br>props: [‘name’, ‘age’, ‘setName’]</li><li>方式二: 指定名称和类型<br>props: {<br> name: String, age: Number, setNmae: Function<br>}</li><li>方式三: 指定名称/类型/必要性/默认值<br>props: {<br> name: {type: String, required: true, default:xxx},<br>}<br><em>问题</em>:</li></ol></li></ul><ul><li>a. 如果需要向非子后代传递数据必须多层逐层传递</li><li>b. 兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</li></ul><ol start="11"><li><p><em>属性校验</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 要校验的 props : &#123;</span><br><span class="line">msg :&#123;</span><br><span class="line">type :Number,</span><br><span class="line">validator (value)&#123; //validator 属性校验器，可以自定义属性校验</span><br><span class="line">return value &gt; 3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr :&#123;</span><br><span class="line">type :Array,</span><br><span class="line">default :() =&gt; ([1,2,3]) // 属性校验中，如果是`数组/对象` 需要将默认值返回</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>子传向父</code> 通过自定义事件</p></li><li>绑定事件监听     </li></ol><ul><li>// 方式一: 通过 v-on 绑定</li><li>@delete_todo=”deleteTodo”</li><li>// 方式二: 通过$on()</li><li>this.$refs.xxx.$on(‘delete_todo’, function (todo) {</li><li>this.deleteTodo(todo)</li><li>})</li></ul><ol start="22"><li>触发事件     </li></ol><ul><li>// 触发事件(只能在父组件中接收)</li><li>this.$emit(eventName, data)</li><li><em>问题</em>: 隔代组件或兄弟组件间通信此种方式不合适</li><li>vue 自定义事件 我的理解</li><li><p>子组件中  @click=”add”</p><pre><code>methods 里面 是具体的add方法干的事情add里面最终 通过this.$emit(&quot;add&quot;,this.msg)通知父级我触发了此事件并传值给父组件</code></pre></li><li><p>父组件中  监听@add=”addCounter”</p><pre><code>methods里面定义addCounter要干啥事，用一个形参接收子组件传来的值</code></pre></li></ul><ol start="3"><li><code>消息订阅与发布(PubSubJS 库)</code> </li><li>订阅消息   —-&gt;事件监听</li></ol><ul><li>PubSub.subscribe(‘msg’, function(msg, data){})</li></ul><ol start="32"><li>发布消息  —–&gt;触发事件</li></ol><ul><li>PubSub.publish(‘msg’, data)</li><li><em>优点</em>: 此方式可实现任意关系组件间通信(数据)</li></ul><ol start="4"><li><code>slot(插槽，占位的)</code></li><li>此方式用于父组件向子组件传递<em>标签数据</em><br>4.2 复用性          </li><li>使用</li><li>父组件中：<div slot="xxx">xxx 对应的标签结构</div></li><li>子组件中：<slot name="xxx">不确定的标签结构 1</slot> </li><li>插槽对应的方法属性等定义在父组件中，子组件只是使用罢了</li></ol><h4 id="模块导出为函数还是对象的依据"><a href="#模块导出为函数还是对象的依据" class="headerlink" title="模块导出为函数还是对象的依据"></a>模块导出为函数还是对象的依据</h4><p><code>要看模块向外暴露一个功能还是多个功能</code></p><ul><li>一个功能即函数</li><li>多个功能则对象 ，因为对象可以包含多个方法</li></ul><h4 id="ajax-插件相关知识"><a href="#ajax-插件相关知识" class="headerlink" title="ajax 插件相关知识"></a>ajax 插件相关知识</h4><ul><li>下载插件</li><li>引入插件</li><li>声明使用插件  即 Vue.use(名字)</li><li><code>方式一</code>：vue-resource 内部会给vm对象和组件对象添加一个属性：$http </li><li>$http 有两个方法 get() ,post()</li><li><code>方式二</code>：axios    vue.2.X   </li><li>下载 npm install axios –save</li></ul><ul><li>// 直接引入模块使用，不用声明  <code>在哪里使用在哪里引入</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos; // 发送 ajax 请求</span><br><span class="line">axios.get(url)</span><br><span class="line">.then(response =&gt; &#123;</span><br><span class="line">    console.log(response.data) // 得到返回结果数据</span><br><span class="line">&#125;)</span><br><span class="line">.catch(error =&gt; &#123;</span><br><span class="line">    console.log(error.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组方法之map方法的特点：数组里面的对象变，但数组对象的个数不变"><a href="#数组方法之map方法的特点：数组里面的对象变，但数组对象的个数不变" class="headerlink" title="数组方法之map方法的特点：数组里面的对象变，但数组对象的个数不变"></a>数组方法之map方法的特点：数组里面的对象变，但数组对象的个数不变</h4><h4 id="组件名称-路由相关"><a href="#组件名称-路由相关" class="headerlink" title="组件名称 路由相关"></a>组件名称 路由相关</h4><ul><li>开发中分为路由组件和非路由组件</li><li>路由组件 名称为 views 或 pages</li><li><p>非路由组件 名称为 components </p></li><li><p><code>路由器</code>模块命名为router建立index.js文件 </p></li><li>路由器模块: src/router/index.js</li><li>引入vue     import Vue from ‘vue’</li><li>引入VueRouter     import VueRouter from ‘vue-router’</li><li>注册使用VueRouter     Vue.use(VueRouter) </li><li><p>导出一个VueRouter实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> export default new VueRouter(&#123;</span><br><span class="line">routes 数组，</span><br><span class="line">routes: [  // 路由配置  k即（path） 和value即（component）</span><br><span class="line">&#123;</span><br><span class="line">path: &apos;/&apos;, redirect: &apos;/about&apos; </span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path: &apos;/about&apos;, component: About</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>注册路由器: main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> import Vue from &apos;vue&apos; </span><br><span class="line"> import router from &apos;./router&apos; // 创建 vue 配置路由器</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">router, </span><br><span class="line">render: h =&gt; h(app)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用路由组件标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--路由链接--&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;!--用于渲染当前路由组件--&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li><li><p>子路由 children   path可以写全或 直接写当前的路由名字（简化写法）</p></li></ul><h4 id="缓存路由组件对象"><a href="#缓存路由组件对象" class="headerlink" title="缓存路由组件对象"></a>缓存路由组件对象</h4><ul><li>默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的</li><li>如果可以缓存路由组件对象, 可以提高用户体验<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="向路由组件传递数据"><a href="#向路由组件传递数据" class="headerlink" title="向路由组件传递数据"></a>向路由组件传递数据</h4><ul><li>方式 1: 路由路径携带参数(param/query)</li></ul><ul><li><p>配置路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">&#123;</span><br><span class="line">path: &apos;mdetail/:id&apos;, component: MessageDetail</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>路由路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&apos;/home/message/mdetail/&apos;+m.id&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由组件中读取请求参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure></li></ul><ul><li>方式 2: <router-view>属性携带数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :msg=&quot;msg&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></router-view></li></ul><h4 id="编程式路由导航-即用js-的方法实现而非-标签方式"><a href="#编程式路由导航-即用js-的方法实现而非-标签方式" class="headerlink" title="编程式路由导航 即用js 的方法实现而非 标签方式"></a>编程式路由导航 即用js 的方法实现而非 标签方式</h4><ul><li>相关 API  栈的结构</li><li>this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)</li><li>this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)</li><li>this.$router.back(): 请求(返回)上一个记录路由</li><li>this.$router.go(-1): 请求(返回)上一个记录路由</li><li>this.$router.go(1): 请求下一个记录路由</li></ul><h4 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈 队列"></a>栈 队列</h4><ul><li>例子 ： 喝醉酒后<em>站</em>着从上面出来即为<em>栈</em> </li></ul><h4 id="call-方法调用"><a href="#call-方法调用" class="headerlink" title="call 方法调用"></a>call 方法调用</h4><ul><li>让一个函数成为指定对象的方法进行调用 slice.call(lis)</li><li>即让slice函数成为lis的方法进行调用</li></ul><h4 id="vue-源码分析知识点分析-vue-作为一个-MVVM-框架的基本实现原理"><a href="#vue-源码分析知识点分析-vue-作为一个-MVVM-框架的基本实现原理" class="headerlink" title="vue 源码分析知识点分析 vue 作为一个 MVVM 框架的基本实现原理"></a>vue 源码分析知识点分析 vue 作为一个 MVVM 框架的基本实现原理</h4><p>####. 准备知识</p><ul><li>1  [].slice.call(lis): 将伪数组转换为真数组</li><li>slice 方法有浅拷贝的用法，表示截取一部分，不传参数的话就是拷贝原数组</li><li><em>这样更好</em> Array.prototype.slice.call(lis)</li><li>2  node.nodeType: 得到节点类型</li><li>节点类型：常用的<ul><li>document // 文档</li><li>Element //元素节点    节点类型 nodeType === 1;</li><li>Attr //属性</li><li>Text //文本</li><li>documentFragment // 文档碎片</li></ul></li></ul><ul><li>3 Object.defineProperty(obj, propName, {}):<ul><li>给对象添加/修改属性(指定描述符)</li><li>vue <em>数据代理的核心语法</em>，不支持ie8，面试题</li></ul></li><li>属性描述符：</li><li>数据描述符：<ul><li>configurable: true/false 是否可以重新 define</li><li>enumerable: true/false 是否可以枚举(for..in / keys())</li><li>value: 指定初始值</li><li>writable: true/false value 是否可以修改</li></ul></li><li>访问描述符：vue的<code>计算属性</code>就是利用get set 方法<ul><li>get: 回调函数, 根据其他相关的属性动态计算得到当前属性值，根据相关的属性更新（得到）当前的属性</li><li>set: 回调函数, <code>监视</code>当前属性值的变化，更新相关的属性值 ，根据当前的属性更新相关的属性 </li></ul></li><li>Object.keys(obj): 得到对象自身<code>可枚举</code>的属性名的数组</li><li>obj.hasOwnProperty(prop): 判断 prop 是否是 obj 自身的属性</li><li>DocumentFragment: <code>文档碎片</code>(高效批量更新多个节点)</li><li><p>传言啊  这个 childNodes是正统属性   亲生的  而这个children是野孩子   </p></li><li><p>这个野孩子比较随意   所以用它返回来的就只有DOM元素了  其他的文字啥的   都不返回   </p></li><li><p>而 childNodes比较讲究   事无巨细  都要返回来   </p></li><li><p>但是我还是觉得野孩子乖 所以也获得了几乎所有浏览器的支持 如果你想要DOM节点  直接用野孩子就可以了 </p><figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;li&gt;test1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;test2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;test3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let list = document.getElementById(&quot;list&quot;);</span><br><span class="line">   // 1. 创建文档碎片</span><br><span class="line">   let fragment = document.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">   // 2. 取出ul中 所有 子节点保存到fragment中</span><br><span class="line">   //Array.prototype.slice.call(list.children).forEach(element =&gt; &#123;</span><br><span class="line">     fragment.appendChild(element);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   // 3.修改fragment中的每一个子元素的内容</span><br><span class="line">   Array.prototype.slice.call(fragment.children).forEach(element =&gt; &#123;</span><br><span class="line">     element.textContent = &apos;舒璐&apos;;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   // 4.将文档碎片插入到list中 </span><br><span class="line">   list.appendChild(fragment);</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据代理的实现"><a href="#数据代理的实现" class="headerlink" title="数据代理的实现"></a>数据代理的实现</h4><h4 id="基本实现流程"><a href="#基本实现流程" class="headerlink" title="基本实现流程"></a>基本实现流程</h4><ul><li>通过 Object.defineProperty()给 vm 添加与 data 对象的属性对应的属性描述符</li><li>所有添加的属性都包含 getter/setter</li><li>getter/setter 内部去操作 data 中对应的属性数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">相当于Vue的构造函数</span><br><span class="line"></span><br><span class="line">function MVVM(options) &#123;</span><br><span class="line">  // 将选项对象保存到vm</span><br><span class="line">  this.$options = options;</span><br><span class="line"></span><br><span class="line">  // 将data对象保存到vm和datq变量中</span><br><span class="line">  var data = this._data = this.$options.data;</span><br><span class="line"></span><br><span class="line">  //将vm保存在me变量中</span><br><span class="line">  var me = this;</span><br><span class="line"></span><br><span class="line">  // 遍历data中所有属性</span><br><span class="line">  Object.keys(data).forEach(function (key) &#123; // 属性名: name</span><br><span class="line"></span><br><span class="line">    // 对指定属性实现代理</span><br><span class="line">    me._proxy(key);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 对data进行监视</span><br><span class="line">  observe(data, this);</span><br><span class="line"></span><br><span class="line">  // 创建一个用来编译模板的compile对象</span><br><span class="line">  this.$compile = new Compile(options.el || document.body, this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">  $watch: function (key, cb, options) &#123;</span><br><span class="line">    new Watcher(this, key, cb);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 对指定属性实现代理</span><br><span class="line">  _proxy: function (key) &#123;</span><br><span class="line">    // 保存vm</span><br><span class="line">    var me = this;</span><br><span class="line">    // 给vm添加指定属性名的属性(使用属性描述)</span><br><span class="line">    Object.defineProperty(me, key, &#123;</span><br><span class="line">      configurable: false, // 不能再重新定义</span><br><span class="line">      enumerable: true, // 可以枚举</span><br><span class="line">      // 当通过vm.name读取属性值时自动调用</span><br><span class="line">      get: function proxyGetter() &#123;</span><br><span class="line">        // 读取data中对应属性值返回(实现代理读操作)</span><br><span class="line">        return me._data[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      // 当通过vm.name = &apos;xxx&apos;时自动调用</span><br><span class="line">      set: function proxySetter(newVal) &#123;</span><br><span class="line">        // 将最新的值保存到data中对应的属性上(实现代理写操作)</span><br><span class="line">        me._data[key] = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><code>其中最关键的部分为</code></p><ul><li>Object.defineProperty(me, key, {<br>  configurable: false, // 不能再重新定义<br>  enumerable: true, // 可以枚举<br>  // 当通过vm.name读取属性值时自动调用<br>  get: function proxyGetter() {<pre><code>// 读取data中对应属性值返回(实现代理读操作)return me._data[key];</code></pre>  },<br>  // 当通过vm.name = ‘xxx’时自动调用<br>  set: function proxySetter(newVal) {<pre><code>// 将最新的值保存到data中对应的属性上(实现代理写操作)me._data[key] = newVal;</code></pre>  }<br>});</li></ul><h4 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h4><ol><li>嵌套调用: a里面调用b,b里面调用c</li><li>递归: a 里面调用 a ,a继续调用a即特殊的嵌套调用</li><li>模板解析的基本流程</li></ol><ul><li>1)将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中</li><li>2)对 fragment 中的<code>所有层次子节点</code>递归进行编译解析处理<ul><li>对大括号表达式文本节点进行解析</li><li>对元素节点的指令属性进行解析</li><li>事件指令解析</li><li>一般指令解析</li></ul></li><li>3) 将解析后的 fragment 添加到 el 中显示</li><li>模板解析(1): 大括号表达式解析<br><code>&lt;p&gt;&lt;/p&gt;</code></li></ul><ul><li>根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1   name</li><li>从 data 中取出表达式对应的属性值</li><li>将属性值设置为文本节点的 textContent</li></ul><ul><li>模板解析(2): 事件指令解析<pre><code>从指令名中取出事件名根据指令的值(表达式)从 methods 中得到对应的事件处理函数对象给当前元素节点绑定指定事件名和回调函数的 dom 事件监听指令解析完后, 移除此指令属性</code></pre></li><li>模板解析(3): 一般指令解析<pre><code>得到指令名和指令值(表达式) text/html/class msg/myClass从 data 中根据表达式得到对应的值根据指令名确定需要操作元素节点的什么属性</code></pre><ul><li>v-text—textContent 属性</li><li>v-html—innerHTML 属性</li><li>v-class–className 属性</li><li>4) 将得到的表达式的值设置到对应的属性上</li><li>5) 移除元素的指令属性</li></ul></li></ul><h4 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call   apply bind"></a>call   apply bind</h4><ul><li>JavaScript 的一大特点是，</li><li>函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念<br>  apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；<br>  apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；<br>  apply 、 call 、bind 三者都可以利用后续参数传参；</li><li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li><li>call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里</li><li>bind()最简单的用法是创建一个函数，使这个函数<code>不论怎么调用都有同样的this值</code>。</li><li>常见的错误就像，将方法从对象中拿出来，然后调用，并且希望this指向原来的对象。</li><li>如果不做特殊处理，一般会丢失原来的对象。用bind方法可以</li></ul><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><ul><li>简单地说，就是数据更新，界面改变。</li><li>一旦更新了 data 中的某个属性数据, 所有界面上直接使用或间接使用了此属性的节点+更新</li><li>数据劫持<br>   数据劫持是 vue 中用来实现数据绑定的一种技术<br>   基本思想: 通过 defineProperty()来监视 data 中所有属性(任意层次)数据的变化, </li><li>一旦变化就去更新界面</li><li>初始化显示：页面（表达式/指令）能从data中读取数据显示（编译/解析）<br> 更新显示：更新data中的属性数据，.&gt;&gt;&gt; 页面更新<br> <img src="/2019/04/17/vuenote/vuenote_files/1.jpg" alt><br> 图中黑线表示初始化，红线表示更新时触发</li></ul><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><ul><li>双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的</li><li>双向数据绑定的实现流程:<br>   在解析 v-model 指令时, 给当前元素添加 input 监听(input事件会在value属性值发生改变时触发，<pre><code>通过js改变value属性值不会触发此事件。只有IE8以上或者谷歌火狐等标准浏览器支持。)</code></pre>   当 input 的 value 发生改变时, 将最新的值赋值给当前表达式所对应的 data 属性</li></ul><h4 id="vuex-是vue-的一个插件"><a href="#vuex-是vue-的一个插件" class="headerlink" title="vuex 是vue 的一个插件"></a>vuex 是vue 的一个插件</h4><ul><li>简单来说: 对 vue 应用中多个组件的共享状态进行集中式的管理(读/写)</li><li><p>状态自管理应用<br>   state: 驱动应用的数据源（data）<br>   view: 以声明方式将 state 映射到视图(模板界面)<br>   actions:（在vue中是函数） 响应在 view 上的用户输入导致的状态变化</p><pre><code>(包含 n 个*更新状态的方法*)![](vuenote_files/2.jpg)多组件共享状态的问题     多个视图依赖于同一状态     来自不同视图的行为需要变更同一状态     以前的解决办         将数据以及操作数据的行为都定义在父组件         将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)     vuex 就是用来解决这个问题的vuex 核心概念和 API    state         vuex 管理的状态对象,它应该是唯一的    mutations         包含多个直接更新 state 的方法(回调函数)的对象         谁来触发: action 中的 commit(&apos;mutation 名称&apos;)         只能包含同步的代码, 不能写异步代码    const mutations = {        yyy (state, {data1}) {        // 更新 state 的某个属性        }    }</code></pre></li><li><p>vuex  人生管理哲学，哈哈<br>State:想一想，你现在心里在意哪些事？</p></li><li><p>Mutation目标导向:  写下目标，直接改变State</p></li><li><p>Action阶段性执行： 写下行动 ，执行一个个Matation、异步函数、和其它阶段性执行。</p></li><li><p>Getters: 写下其它指标，根据现有的state得到其他的指标</p></li><li><p>mapState和mapGetters必须在computed中访问，因为它们返回的是对象，所以需要用拓展符…进行展开。</p></li><li><p>mapActions则是将Action挂载到methods上，也需要用拓展符…进行展开。</p></li><li><p>组件中的mapActions([“increment”])与<br>actions 中  increment 函数名一样<br>actions 中  commit(“INCREMENT”)与<br>mutations 中 INCREMENT函数名一样<br>大写的函数名只是为了区分各个函数 可以定义一个mutation-type.js </p></li></ul>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/17/vuenote/#disqus_thread</comments>
    </item>
    
    <item>
      <title>less 学习笔记</title>
      <link>https://shulu520.com/2019/04/17/less/</link>
      <guid>https://shulu520.com/2019/04/17/less/</guid>
      <pubDate>Wed, 17 Apr 2019 12:00:21 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;君子生非异也，善假于物也&quot;&gt;&lt;a href=&quot;#君子生非异也，善假于物也&quot; class=&quot;headerlink&quot; title=&quot;君子生非异也，善假于物也.&quot;&gt;&lt;/a&gt;君子生非异也，善假于物也.&lt;/h4&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="君子生非异也，善假于物也"><a href="#君子生非异也，善假于物也" class="headerlink" title="君子生非异也，善假于物也."></a>君子生非异也，善假于物也.</h4><a id="more"></a><h4 id="less-即css预处理器"><a href="#less-即css预处理器" class="headerlink" title="less 即css预处理器"></a>less 即css预处理器</h4><ul><li>vscode 编辑器 下载插件 easy less</li><li>声明编码集  @charset “utf-8”<h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4></li><li>声明变量(原始值类型) @bb:#ff0000;           使用变量    color:@bb;</li><li>声明变量（路劲类型） @img:”../images”;       使用变量    background-image:url(“@{img}/1.jpg”)</li><li>声明变量(属性类型)   @ww:width;            使用变量    @{ww}:100px;<h4 id="混合方式"><a href="#混合方式" class="headerlink" title="混合方式"></a>混合方式</h4></li><li>带默认参数     <pre><code>定义 .border-r(@radius:5px){        使用 .box{        border-radiis:@radius;                .border-r;         传参即.border-r(10px);     }                                     }</code></pre></li><li>接收多个参数<pre><code>定义 .box-s(@x, @y, @blur, @color){        使用 .box{        box-shadow:@arguments;                    .box-s(3px,4px,5px,red)     }                                         }</code></pre><h4 id="color-函数-了解就行"><a href="#color-函数-了解就行" class="headerlink" title="color 函数 了解就行"></a>color 函数 了解就行</h4></li></ul><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul><li>各种可以计算的都可以计算 包括颜色值</li><li>支持运算符 +  -  *  /   即加减乘除<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4></li><li>它用于将mixins分组在通用名称下。 </li><li>使用命名空间可以避免名称冲突，并从外部封装mixin组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">定义：</span><br><span class="line">#bgcolor()&#123; // 加 () 默认不输出</span><br><span class="line">background: #ffffff;</span><br><span class="line">    .a&#123;</span><br><span class="line">        color: #888888;</span><br><span class="line">        &amp;:hover&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">        .b&#123;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">使用：</span><br><span class="line">.bgcolor1&#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">    #bgcolor&gt;.a;    // &gt;符号表示选中混合中的每一个样式</span><br><span class="line">&#125;</span><br><span class="line">.bgcolor2&#123;</span><br><span class="line">    // #bgcolor&gt;.a&gt;.b;</span><br><span class="line">    #bgcolor .a .b;  // 省略写法：将&gt;换成空格即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h4><ul><li>我们能在编译后的css文件中看到 它 编译计算之前的样子</li><li>最终的编译计算由浏览器来完成</li><li>css3中有这样一个函数calc()</li><li><p>less里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">width:~&apos;calc(300px - 10px)&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译完的 css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">width:calc(300px - 10px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h4><ul><li>css 样式中 用来提升优先级（最高）</li><li>less 中 一样 常用来调试代码</li><li>比如 某一段样式不起作用，不知道是继承还是覆盖等造成的</li><li>给他加上 !important 还不起作用的话 就说明代码书写有误</li></ul>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/17/less/#disqus_thread</comments>
    </item>
    
    <item>
      <title>哈哈，棒棒哒</title>
      <link>https://shulu520.com/2019/04/17/haha/</link>
      <guid>https://shulu520.com/2019/04/17/haha/</guid>
      <pubDate>Wed, 17 Apr 2019 12:00:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;试了好几次，终于可以了&lt;/p&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这是二级标题&quot;&gt;&lt;/a&gt;这是二级标题&lt;/h2&gt;&lt;h3 id=&quot;这是三级标题&quot;&gt;&lt;a href=&quot;#这是三级标题&quot; clas
        
      
      </description>
      
      <content:encoded><![CDATA[<p>试了好几次，终于可以了</p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>三级标题的内容</p>]]></content:encoded>
      
      <comments>https://shulu520.com/2019/04/17/haha/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
